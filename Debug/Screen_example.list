
Screen_example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e34  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001140  08004fc8  08004fc8  00014fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006108  08006108  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08006108  08006108  00016108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006110  08006110  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006110  08006110  00016110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006114  08006114  00016114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006118  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  2000000c  08006124  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000208  08006124  00020208  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0004b9cd  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003740  00000000  00000000  0006ba4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003580  00000000  00000000  0006f190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002839  00000000  00000000  00072710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016f68  00000000  00000000  00074f49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001cca8  00000000  00000000  0008beb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009fa0c  00000000  00000000  000a8b59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000eb38  00000000  00000000  00148568  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  001570a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004fb0 	.word	0x08004fb0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08004fb0 	.word	0x08004fb0

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b970 	b.w	80004cc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	460d      	mov	r5, r1
 800020c:	4604      	mov	r4, r0
 800020e:	460f      	mov	r7, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4694      	mov	ip, r2
 8000218:	d965      	bls.n	80002e6 <__udivmoddi4+0xe2>
 800021a:	fab2 f382 	clz	r3, r2
 800021e:	b143      	cbz	r3, 8000232 <__udivmoddi4+0x2e>
 8000220:	fa02 fc03 	lsl.w	ip, r2, r3
 8000224:	f1c3 0220 	rsb	r2, r3, #32
 8000228:	409f      	lsls	r7, r3
 800022a:	fa20 f202 	lsr.w	r2, r0, r2
 800022e:	4317      	orrs	r7, r2
 8000230:	409c      	lsls	r4, r3
 8000232:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000236:	fa1f f58c 	uxth.w	r5, ip
 800023a:	fbb7 f1fe 	udiv	r1, r7, lr
 800023e:	0c22      	lsrs	r2, r4, #16
 8000240:	fb0e 7711 	mls	r7, lr, r1, r7
 8000244:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000248:	fb01 f005 	mul.w	r0, r1, r5
 800024c:	4290      	cmp	r0, r2
 800024e:	d90a      	bls.n	8000266 <__udivmoddi4+0x62>
 8000250:	eb1c 0202 	adds.w	r2, ip, r2
 8000254:	f101 37ff 	add.w	r7, r1, #4294967295
 8000258:	f080 811c 	bcs.w	8000494 <__udivmoddi4+0x290>
 800025c:	4290      	cmp	r0, r2
 800025e:	f240 8119 	bls.w	8000494 <__udivmoddi4+0x290>
 8000262:	3902      	subs	r1, #2
 8000264:	4462      	add	r2, ip
 8000266:	1a12      	subs	r2, r2, r0
 8000268:	b2a4      	uxth	r4, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000276:	fb00 f505 	mul.w	r5, r0, r5
 800027a:	42a5      	cmp	r5, r4
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x90>
 800027e:	eb1c 0404 	adds.w	r4, ip, r4
 8000282:	f100 32ff 	add.w	r2, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x294>
 800028a:	42a5      	cmp	r5, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x294>
 8000290:	4464      	add	r4, ip
 8000292:	3802      	subs	r0, #2
 8000294:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000298:	1b64      	subs	r4, r4, r5
 800029a:	2100      	movs	r1, #0
 800029c:	b11e      	cbz	r6, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40dc      	lsrs	r4, r3
 80002a0:	2300      	movs	r3, #0
 80002a2:	e9c6 4300 	strd	r4, r3, [r6]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d908      	bls.n	80002c0 <__udivmoddi4+0xbc>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80ed 	beq.w	800048e <__udivmoddi4+0x28a>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	d149      	bne.n	800035c <__udivmoddi4+0x158>
 80002c8:	42ab      	cmp	r3, r5
 80002ca:	d302      	bcc.n	80002d2 <__udivmoddi4+0xce>
 80002cc:	4282      	cmp	r2, r0
 80002ce:	f200 80f8 	bhi.w	80004c2 <__udivmoddi4+0x2be>
 80002d2:	1a84      	subs	r4, r0, r2
 80002d4:	eb65 0203 	sbc.w	r2, r5, r3
 80002d8:	2001      	movs	r0, #1
 80002da:	4617      	mov	r7, r2
 80002dc:	2e00      	cmp	r6, #0
 80002de:	d0e2      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	e9c6 4700 	strd	r4, r7, [r6]
 80002e4:	e7df      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xe6>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f382 	clz	r3, r2
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2101      	movs	r1, #1
 8000300:	fbb2 f5f7 	udiv	r5, r2, r7
 8000304:	fb07 2015 	mls	r0, r7, r5, r2
 8000308:	0c22      	lsrs	r2, r4, #16
 800030a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030e:	fb0e f005 	mul.w	r0, lr, r5
 8000312:	4290      	cmp	r0, r2
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x124>
 8000316:	eb1c 0202 	adds.w	r2, ip, r2
 800031a:	f105 38ff 	add.w	r8, r5, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4290      	cmp	r0, r2
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2b8>
 8000326:	4645      	mov	r5, r8
 8000328:	1a12      	subs	r2, r2, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000330:	fb07 2210 	mls	r2, r7, r0, r2
 8000334:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x14e>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 32ff 	add.w	r2, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x14c>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2c2>
 8000350:	4610      	mov	r0, r2
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035a:	e79f      	b.n	800029c <__udivmoddi4+0x98>
 800035c:	f1c1 0720 	rsb	r7, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa05 f401 	lsl.w	r4, r5, r1
 800036e:	fa20 f307 	lsr.w	r3, r0, r7
 8000372:	40fd      	lsrs	r5, r7
 8000374:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fbb5 f8f9 	udiv	r8, r5, r9
 800037e:	fa1f fe8c 	uxth.w	lr, ip
 8000382:	fb09 5518 	mls	r5, r9, r8, r5
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb08 f50e 	mul.w	r5, r8, lr
 8000390:	42a5      	cmp	r5, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	fa00 f001 	lsl.w	r0, r0, r1
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2b4>
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2b4>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4464      	add	r4, ip
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	b29d      	uxth	r5, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2ac>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2ac>
 80003da:	3b02      	subs	r3, #2
 80003dc:	4464      	add	r4, ip
 80003de:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e2:	fba3 9502 	umull	r9, r5, r3, r2
 80003e6:	eba4 040e 	sub.w	r4, r4, lr
 80003ea:	42ac      	cmp	r4, r5
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46ae      	mov	lr, r5
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x29c>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x298>
 80003f4:	b156      	cbz	r6, 800040c <__udivmoddi4+0x208>
 80003f6:	ebb0 0208 	subs.w	r2, r0, r8
 80003fa:	eb64 040e 	sbc.w	r4, r4, lr
 80003fe:	fa04 f707 	lsl.w	r7, r4, r7
 8000402:	40ca      	lsrs	r2, r1
 8000404:	40cc      	lsrs	r4, r1
 8000406:	4317      	orrs	r7, r2
 8000408:	e9c6 7400 	strd	r7, r4, [r6]
 800040c:	4618      	mov	r0, r3
 800040e:	2100      	movs	r1, #0
 8000410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000414:	f1c3 0120 	rsb	r1, r3, #32
 8000418:	fa02 fc03 	lsl.w	ip, r2, r3
 800041c:	fa20 f201 	lsr.w	r2, r0, r1
 8000420:	fa25 f101 	lsr.w	r1, r5, r1
 8000424:	409d      	lsls	r5, r3
 8000426:	432a      	orrs	r2, r5
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1510 	mls	r5, r7, r0, r1
 8000438:	0c11      	lsrs	r1, r2, #16
 800043a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043e:	fb00 f50e 	mul.w	r5, r0, lr
 8000442:	428d      	cmp	r5, r1
 8000444:	fa04 f403 	lsl.w	r4, r4, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x258>
 800044a:	eb1c 0101 	adds.w	r1, ip, r1
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000454:	428d      	cmp	r5, r1
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 8000458:	3802      	subs	r0, #2
 800045a:	4461      	add	r1, ip
 800045c:	1b49      	subs	r1, r1, r5
 800045e:	b292      	uxth	r2, r2
 8000460:	fbb1 f5f7 	udiv	r5, r1, r7
 8000464:	fb07 1115 	mls	r1, r7, r5, r1
 8000468:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800046c:	fb05 f10e 	mul.w	r1, r5, lr
 8000470:	4291      	cmp	r1, r2
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x282>
 8000474:	eb1c 0202 	adds.w	r2, ip, r2
 8000478:	f105 38ff 	add.w	r8, r5, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800047e:	4291      	cmp	r1, r2
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2a8>
 8000482:	3d02      	subs	r5, #2
 8000484:	4462      	add	r2, ip
 8000486:	1a52      	subs	r2, r2, r1
 8000488:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0xfc>
 800048e:	4631      	mov	r1, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e708      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000494:	4639      	mov	r1, r7
 8000496:	e6e6      	b.n	8000266 <__udivmoddi4+0x62>
 8000498:	4610      	mov	r0, r2
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x90>
 800049c:	4548      	cmp	r0, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a8:	3b01      	subs	r3, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004ac:	4645      	mov	r5, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x282>
 80004b0:	462b      	mov	r3, r5
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1da>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x258>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004bc:	3d02      	subs	r5, #2
 80004be:	4462      	add	r2, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x124>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e70a      	b.n	80002dc <__udivmoddi4+0xd8>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x14e>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <u8x8_stm32_gpio_and_delay>:
static void MX_SPI1_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */
uint8_t u8x8_stm32_gpio_and_delay(U8X8_UNUSED u8x8_t *u8x8,
U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int,
U8X8_UNUSED void *arg_ptr) {
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b084      	sub	sp, #16
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	60f8      	str	r0, [r7, #12]
 80004d8:	607b      	str	r3, [r7, #4]
 80004da:	460b      	mov	r3, r1
 80004dc:	72fb      	strb	r3, [r7, #11]
 80004de:	4613      	mov	r3, r2
 80004e0:	72bb      	strb	r3, [r7, #10]
	switch (msg) {
 80004e2:	7afb      	ldrb	r3, [r7, #11]
 80004e4:	3b28      	subs	r3, #40	; 0x28
 80004e6:	2b23      	cmp	r3, #35	; 0x23
 80004e8:	d868      	bhi.n	80005bc <u8x8_stm32_gpio_and_delay+0xec>
 80004ea:	a201      	add	r2, pc, #4	; (adr r2, 80004f0 <u8x8_stm32_gpio_and_delay+0x20>)
 80004ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004f0:	08000581 	.word	0x08000581
 80004f4:	08000589 	.word	0x08000589
 80004f8:	080005bd 	.word	0x080005bd
 80004fc:	080005bd 	.word	0x080005bd
 8000500:	080005bd 	.word	0x080005bd
 8000504:	080005bd 	.word	0x080005bd
 8000508:	080005bd 	.word	0x080005bd
 800050c:	080005bd 	.word	0x080005bd
 8000510:	080005bd 	.word	0x080005bd
 8000514:	080005bd 	.word	0x080005bd
 8000518:	080005bd 	.word	0x080005bd
 800051c:	080005bd 	.word	0x080005bd
 8000520:	080005bd 	.word	0x080005bd
 8000524:	080005bd 	.word	0x080005bd
 8000528:	080005bd 	.word	0x080005bd
 800052c:	080005bd 	.word	0x080005bd
 8000530:	080005bd 	.word	0x080005bd
 8000534:	080005bd 	.word	0x080005bd
 8000538:	080005bd 	.word	0x080005bd
 800053c:	080005bd 	.word	0x080005bd
 8000540:	080005bd 	.word	0x080005bd
 8000544:	080005bd 	.word	0x080005bd
 8000548:	080005bd 	.word	0x080005bd
 800054c:	080005bd 	.word	0x080005bd
 8000550:	080005bd 	.word	0x080005bd
 8000554:	080005bd 	.word	0x080005bd
 8000558:	080005bd 	.word	0x080005bd
 800055c:	080005bd 	.word	0x080005bd
 8000560:	080005bd 	.word	0x080005bd
 8000564:	080005bd 	.word	0x080005bd
 8000568:	080005bd 	.word	0x080005bd
 800056c:	080005bd 	.word	0x080005bd
 8000570:	080005bd 	.word	0x080005bd
 8000574:	080005a1 	.word	0x080005a1
 8000578:	08000593 	.word	0x08000593
 800057c:	080005af 	.word	0x080005af
	case U8X8_MSG_GPIO_AND_DELAY_INIT:
		HAL_Delay(1);
 8000580:	2001      	movs	r0, #1
 8000582:	f000 fbdd 	bl	8000d40 <HAL_Delay>
		break;
 8000586:	e019      	b.n	80005bc <u8x8_stm32_gpio_and_delay+0xec>
	case U8X8_MSG_DELAY_MILLI:
		HAL_Delay(arg_int);
 8000588:	7abb      	ldrb	r3, [r7, #10]
 800058a:	4618      	mov	r0, r3
 800058c:	f000 fbd8 	bl	8000d40 <HAL_Delay>
		break;
 8000590:	e014      	b.n	80005bc <u8x8_stm32_gpio_and_delay+0xec>
	case U8X8_MSG_GPIO_DC:
		HAL_GPIO_WritePin(SPI1_DC_GPIO_Port, SPI1_DC_Pin, arg_int);
 8000592:	7abb      	ldrb	r3, [r7, #10]
 8000594:	461a      	mov	r2, r3
 8000596:	2140      	movs	r1, #64	; 0x40
 8000598:	480b      	ldr	r0, [pc, #44]	; (80005c8 <u8x8_stm32_gpio_and_delay+0xf8>)
 800059a:	f000 ff1d 	bl	80013d8 <HAL_GPIO_WritePin>
		break;
 800059e:	e00d      	b.n	80005bc <u8x8_stm32_gpio_and_delay+0xec>
	case U8X8_MSG_GPIO_CS:
		HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, arg_int);
 80005a0:	7abb      	ldrb	r3, [r7, #10]
 80005a2:	461a      	mov	r2, r3
 80005a4:	2110      	movs	r1, #16
 80005a6:	4808      	ldr	r0, [pc, #32]	; (80005c8 <u8x8_stm32_gpio_and_delay+0xf8>)
 80005a8:	f000 ff16 	bl	80013d8 <HAL_GPIO_WritePin>
		break;
 80005ac:	e006      	b.n	80005bc <u8x8_stm32_gpio_and_delay+0xec>
	case U8X8_MSG_GPIO_RESET:
		HAL_GPIO_WritePin(SPI1_RESET_GPIO_Port, SPI1_RESET_Pin, arg_int);
 80005ae:	7abb      	ldrb	r3, [r7, #10]
 80005b0:	461a      	mov	r2, r3
 80005b2:	2108      	movs	r1, #8
 80005b4:	4804      	ldr	r0, [pc, #16]	; (80005c8 <u8x8_stm32_gpio_and_delay+0xf8>)
 80005b6:	f000 ff0f 	bl	80013d8 <HAL_GPIO_WritePin>
		break;
 80005ba:	bf00      	nop
	}
	return 1;
 80005bc:	2301      	movs	r3, #1
}
 80005be:	4618      	mov	r0, r3
 80005c0:	3710      	adds	r7, #16
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	40020000 	.word	0x40020000

080005cc <u8x8_byte_4wire_hw_spi>:

uint8_t u8x8_byte_4wire_hw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int,
		void *arg_ptr) {
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	60f8      	str	r0, [r7, #12]
 80005d4:	607b      	str	r3, [r7, #4]
 80005d6:	460b      	mov	r3, r1
 80005d8:	72fb      	strb	r3, [r7, #11]
 80005da:	4613      	mov	r3, r2
 80005dc:	72bb      	strb	r3, [r7, #10]
	switch (msg) {
 80005de:	7afb      	ldrb	r3, [r7, #11]
 80005e0:	3b14      	subs	r3, #20
 80005e2:	2b0c      	cmp	r3, #12
 80005e4:	d83e      	bhi.n	8000664 <u8x8_byte_4wire_hw_spi+0x98>
 80005e6:	a201      	add	r2, pc, #4	; (adr r2, 80005ec <u8x8_byte_4wire_hw_spi+0x20>)
 80005e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005ec:	08000669 	.word	0x08000669
 80005f0:	08000665 	.word	0x08000665
 80005f4:	08000665 	.word	0x08000665
 80005f8:	08000621 	.word	0x08000621
 80005fc:	08000641 	.word	0x08000641
 8000600:	08000653 	.word	0x08000653
 8000604:	08000665 	.word	0x08000665
 8000608:	08000665 	.word	0x08000665
 800060c:	08000665 	.word	0x08000665
 8000610:	08000665 	.word	0x08000665
 8000614:	08000665 	.word	0x08000665
 8000618:	08000665 	.word	0x08000665
 800061c:	08000633 	.word	0x08000633
	case U8X8_MSG_BYTE_SEND:
		HAL_SPI_Transmit(&hspi1, (uint8_t*) arg_ptr, arg_int, 10000);
 8000620:	7abb      	ldrb	r3, [r7, #10]
 8000622:	b29a      	uxth	r2, r3
 8000624:	f242 7310 	movw	r3, #10000	; 0x2710
 8000628:	6879      	ldr	r1, [r7, #4]
 800062a:	4812      	ldr	r0, [pc, #72]	; (8000674 <u8x8_byte_4wire_hw_spi+0xa8>)
 800062c:	f001 fbcf 	bl	8001dce <HAL_SPI_Transmit>
		break;
 8000630:	e01b      	b.n	800066a <u8x8_byte_4wire_hw_spi+0x9e>
	case U8X8_MSG_BYTE_INIT:
		break;
	case U8X8_MSG_BYTE_SET_DC:
		u8x8_gpio_SetDC(u8x8, arg_int);
 8000632:	7abb      	ldrb	r3, [r7, #10]
 8000634:	461a      	mov	r2, r3
 8000636:	214a      	movs	r1, #74	; 0x4a
 8000638:	68f8      	ldr	r0, [r7, #12]
 800063a:	f004 fc1e 	bl	8004e7a <u8x8_gpio_call>
		break;
 800063e:	e014      	b.n	800066a <u8x8_byte_4wire_hw_spi+0x9e>
	case U8X8_MSG_BYTE_START_TRANSFER:
		u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_enable_level);
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	461a      	mov	r2, r3
 8000648:	2149      	movs	r1, #73	; 0x49
 800064a:	68f8      	ldr	r0, [r7, #12]
 800064c:	f004 fc15 	bl	8004e7a <u8x8_gpio_call>
		break;
 8000650:	e00b      	b.n	800066a <u8x8_byte_4wire_hw_spi+0x9e>
	case U8X8_MSG_BYTE_END_TRANSFER:
		u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	785b      	ldrb	r3, [r3, #1]
 8000658:	461a      	mov	r2, r3
 800065a:	2149      	movs	r1, #73	; 0x49
 800065c:	68f8      	ldr	r0, [r7, #12]
 800065e:	f004 fc0c 	bl	8004e7a <u8x8_gpio_call>
		break;
 8000662:	e002      	b.n	800066a <u8x8_byte_4wire_hw_spi+0x9e>
	default:
		return 0;
 8000664:	2300      	movs	r3, #0
 8000666:	e001      	b.n	800066c <u8x8_byte_4wire_hw_spi+0xa0>
		break;
 8000668:	bf00      	nop
	}
	return 1;
 800066a:	2301      	movs	r3, #1
}
 800066c:	4618      	mov	r0, r3
 800066e:	3710      	adds	r7, #16
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	20000028 	.word	0x20000028

08000678 <HAL_UART_RxCpltCallback>:
}

uint16_t RX_DATA[20];

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) 
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(&huart1, RX_DATA, 20); 
 8000680:	2214      	movs	r2, #20
 8000682:	4904      	ldr	r1, [pc, #16]	; (8000694 <HAL_UART_RxCpltCallback+0x1c>)
 8000684:	4804      	ldr	r0, [pc, #16]	; (8000698 <HAL_UART_RxCpltCallback+0x20>)
 8000686:	f001 fe11 	bl	80022ac <HAL_UART_Receive_IT>
}
 800068a:	bf00      	nop
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	2000015c 	.word	0x2000015c
 8000698:	20000080 	.word	0x20000080

0800069c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b088      	sub	sp, #32
 80006a0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006a2:	f000 fadb 	bl	8000c5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006a6:	f000 f8b1 	bl	800080c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006aa:	f000 f96f 	bl	800098c <MX_GPIO_Init>
  MX_SPI1_Init();
 80006ae:	f000 f90d 	bl	80008cc <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80006b2:	f000 f941 	bl	8000938 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT (&huart1, RX_DATA , 20);
 80006b6:	1d3b      	adds	r3, r7, #4
 80006b8:	2214      	movs	r2, #20
 80006ba:	4619      	mov	r1, r3
 80006bc:	4841      	ldr	r0, [pc, #260]	; (80007c4 <main+0x128>)
 80006be:	f001 fdf5 	bl	80022ac <HAL_UART_Receive_IT>

  u8g2_Setup_sh1107_pimoroni_128x128_1(&u8g2, U8G2_R0, u8x8_byte_4wire_hw_spi,
 80006c2:	4b41      	ldr	r3, [pc, #260]	; (80007c8 <main+0x12c>)
 80006c4:	4a41      	ldr	r2, [pc, #260]	; (80007cc <main+0x130>)
 80006c6:	4942      	ldr	r1, [pc, #264]	; (80007d0 <main+0x134>)
 80006c8:	4842      	ldr	r0, [pc, #264]	; (80007d4 <main+0x138>)
 80006ca:	f002 ff11 	bl	80034f0 <u8g2_Setup_sh1107_pimoroni_128x128_1>
      u8x8_stm32_gpio_and_delay);
  u8g2_InitDisplay(&u8g2);
 80006ce:	4841      	ldr	r0, [pc, #260]	; (80007d4 <main+0x138>)
 80006d0:	f004 fba4 	bl	8004e1c <u8x8_InitDisplay>
  u8g2_SetPowerSave(&u8g2, 0);
 80006d4:	2100      	movs	r1, #0
 80006d6:	483f      	ldr	r0, [pc, #252]	; (80007d4 <main+0x138>)
 80006d8:	f004 fbaf 	bl	8004e3a <u8x8_SetPowerSave>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

    u8g2_FirstPage(&u8g2);
 80006dc:	483d      	ldr	r0, [pc, #244]	; (80007d4 <main+0x138>)
 80006de:	f002 fd94 	bl	800320a <u8g2_FirstPage>
		
    do {
		u8g2_SetFont(&u8g2, u8g2_font_ncenB14_tr);
 80006e2:	493d      	ldr	r1, [pc, #244]	; (80007d8 <main+0x13c>)
 80006e4:	483b      	ldr	r0, [pc, #236]	; (80007d4 <main+0x138>)
 80006e6:	f003 fcb3 	bl	8004050 <u8g2_SetFont>
    u8g2_DrawStr(&u8g2, 50, 18, "00:00");
 80006ea:	4b3c      	ldr	r3, [pc, #240]	; (80007dc <main+0x140>)
 80006ec:	2212      	movs	r2, #18
 80006ee:	2132      	movs	r1, #50	; 0x32
 80006f0:	4838      	ldr	r0, [pc, #224]	; (80007d4 <main+0x138>)
 80006f2:	f003 fc0b 	bl	8003f0c <u8g2_DrawStr>
    u8g2_DrawLine(&u8g2, 0, 20, 128, 20);
 80006f6:	2314      	movs	r3, #20
 80006f8:	9300      	str	r3, [sp, #0]
 80006fa:	2380      	movs	r3, #128	; 0x80
 80006fc:	2214      	movs	r2, #20
 80006fe:	2100      	movs	r1, #0
 8000700:	4834      	ldr	r0, [pc, #208]	; (80007d4 <main+0x138>)
 8000702:	f003 fe4a 	bl	800439a <u8g2_DrawLine>
    u8g2_DrawLine(&u8g2, 20, 0, 20, 20);
 8000706:	2314      	movs	r3, #20
 8000708:	9300      	str	r3, [sp, #0]
 800070a:	2314      	movs	r3, #20
 800070c:	2200      	movs	r2, #0
 800070e:	2114      	movs	r1, #20
 8000710:	4830      	ldr	r0, [pc, #192]	; (80007d4 <main+0x138>)
 8000712:	f003 fe42 	bl	800439a <u8g2_DrawLine>
    u8g2_DrawCircle(&u8g2,10, 10, 7, U8G2_DRAW_ALL);
 8000716:	230f      	movs	r3, #15
 8000718:	9300      	str	r3, [sp, #0]
 800071a:	2307      	movs	r3, #7
 800071c:	220a      	movs	r2, #10
 800071e:	210a      	movs	r1, #10
 8000720:	482c      	ldr	r0, [pc, #176]	; (80007d4 <main+0x138>)
 8000722:	f002 fe9c 	bl	800345e <u8g2_DrawCircle>
    u8g2_SetFont(&u8g2, u8g2_font_t0_12b_tf);
 8000726:	492e      	ldr	r1, [pc, #184]	; (80007e0 <main+0x144>)
 8000728:	482a      	ldr	r0, [pc, #168]	; (80007d4 <main+0x138>)
 800072a:	f003 fc91 	bl	8004050 <u8g2_SetFont>
    u8g2_DrawStr(&u8g2, 20, 55, "Listening to:");
 800072e:	4b2d      	ldr	r3, [pc, #180]	; (80007e4 <main+0x148>)
 8000730:	2237      	movs	r2, #55	; 0x37
 8000732:	2114      	movs	r1, #20
 8000734:	4827      	ldr	r0, [pc, #156]	; (80007d4 <main+0x138>)
 8000736:	f003 fbe9 	bl	8003f0c <u8g2_DrawStr>
    u8g2_DrawStr(&u8g2, 2, 70, "Upside Down");
 800073a:	4b2b      	ldr	r3, [pc, #172]	; (80007e8 <main+0x14c>)
 800073c:	2246      	movs	r2, #70	; 0x46
 800073e:	2102      	movs	r1, #2
 8000740:	4824      	ldr	r0, [pc, #144]	; (80007d4 <main+0x138>)
 8000742:	f003 fbe3 	bl	8003f0c <u8g2_DrawStr>
    u8g2_DrawStr(&u8g2, 50, 80, "by");
 8000746:	4b29      	ldr	r3, [pc, #164]	; (80007ec <main+0x150>)
 8000748:	2250      	movs	r2, #80	; 0x50
 800074a:	2132      	movs	r1, #50	; 0x32
 800074c:	4821      	ldr	r0, [pc, #132]	; (80007d4 <main+0x138>)
 800074e:	f003 fbdd 	bl	8003f0c <u8g2_DrawStr>
    u8g2_DrawStr(&u8g2, 2, 90, "Mezzosangue");
 8000752:	4b27      	ldr	r3, [pc, #156]	; (80007f0 <main+0x154>)
 8000754:	225a      	movs	r2, #90	; 0x5a
 8000756:	2102      	movs	r1, #2
 8000758:	481e      	ldr	r0, [pc, #120]	; (80007d4 <main+0x138>)
 800075a:	f003 fbd7 	bl	8003f0c <u8g2_DrawStr>
    u8g2_DrawLine(&u8g2, 0, 108, 128, 108);
 800075e:	236c      	movs	r3, #108	; 0x6c
 8000760:	9300      	str	r3, [sp, #0]
 8000762:	2380      	movs	r3, #128	; 0x80
 8000764:	226c      	movs	r2, #108	; 0x6c
 8000766:	2100      	movs	r1, #0
 8000768:	481a      	ldr	r0, [pc, #104]	; (80007d4 <main+0x138>)
 800076a:	f003 fe16 	bl	800439a <u8g2_DrawLine>
    u8g2_DrawStr(&u8g2, 2, 122, "1-");
 800076e:	4b21      	ldr	r3, [pc, #132]	; (80007f4 <main+0x158>)
 8000770:	227a      	movs	r2, #122	; 0x7a
 8000772:	2102      	movs	r1, #2
 8000774:	4817      	ldr	r0, [pc, #92]	; (80007d4 <main+0x138>)
 8000776:	f003 fbc9 	bl	8003f0c <u8g2_DrawStr>
    u8g2_DrawStr(&u8g2, 14, 122, "56");
 800077a:	4b1f      	ldr	r3, [pc, #124]	; (80007f8 <main+0x15c>)
 800077c:	227a      	movs	r2, #122	; 0x7a
 800077e:	210e      	movs	r1, #14
 8000780:	4814      	ldr	r0, [pc, #80]	; (80007d4 <main+0x138>)
 8000782:	f003 fbc3 	bl	8003f0c <u8g2_DrawStr>
    u8g2_DrawStr(&u8g2, 54, 122, "2-");
 8000786:	4b1d      	ldr	r3, [pc, #116]	; (80007fc <main+0x160>)
 8000788:	227a      	movs	r2, #122	; 0x7a
 800078a:	2136      	movs	r1, #54	; 0x36
 800078c:	4811      	ldr	r0, [pc, #68]	; (80007d4 <main+0x138>)
 800078e:	f003 fbbd 	bl	8003f0c <u8g2_DrawStr>
    u8g2_DrawStr(&u8g2, 66, 122, "02");
 8000792:	4b1b      	ldr	r3, [pc, #108]	; (8000800 <main+0x164>)
 8000794:	227a      	movs	r2, #122	; 0x7a
 8000796:	2142      	movs	r1, #66	; 0x42
 8000798:	480e      	ldr	r0, [pc, #56]	; (80007d4 <main+0x138>)
 800079a:	f003 fbb7 	bl	8003f0c <u8g2_DrawStr>
    u8g2_DrawStr(&u8g2, 102, 122, "3-");
 800079e:	4b19      	ldr	r3, [pc, #100]	; (8000804 <main+0x168>)
 80007a0:	227a      	movs	r2, #122	; 0x7a
 80007a2:	2166      	movs	r1, #102	; 0x66
 80007a4:	480b      	ldr	r0, [pc, #44]	; (80007d4 <main+0x138>)
 80007a6:	f003 fbb1 	bl	8003f0c <u8g2_DrawStr>
    u8g2_DrawStr(&u8g2, 114, 122, "74");
 80007aa:	4b17      	ldr	r3, [pc, #92]	; (8000808 <main+0x16c>)
 80007ac:	227a      	movs	r2, #122	; 0x7a
 80007ae:	2172      	movs	r1, #114	; 0x72
 80007b0:	4808      	ldr	r0, [pc, #32]	; (80007d4 <main+0x138>)
 80007b2:	f003 fbab 	bl	8003f0c <u8g2_DrawStr>
    // clear the string
		} while (u8g2_NextPage(&u8g2));
 80007b6:	4807      	ldr	r0, [pc, #28]	; (80007d4 <main+0x138>)
 80007b8:	f002 fd3b 	bl	8003232 <u8g2_NextPage>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d18f      	bne.n	80006e2 <main+0x46>
    u8g2_FirstPage(&u8g2);
 80007c2:	e78b      	b.n	80006dc <main+0x40>
 80007c4:	20000080 	.word	0x20000080
 80007c8:	080004d1 	.word	0x080004d1
 80007cc:	080005cd 	.word	0x080005cd
 80007d0:	08006094 	.word	0x08006094
 80007d4:	200000c8 	.word	0x200000c8
 80007d8:	0800586c 	.word	0x0800586c
 80007dc:	08004fc8 	.word	0x08004fc8
 80007e0:	0800503c 	.word	0x0800503c
 80007e4:	08004fe0 	.word	0x08004fe0
 80007e8:	08004ff0 	.word	0x08004ff0
 80007ec:	08004ffc 	.word	0x08004ffc
 80007f0:	08005000 	.word	0x08005000
 80007f4:	0800500c 	.word	0x0800500c
 80007f8:	08005010 	.word	0x08005010
 80007fc:	08005014 	.word	0x08005014
 8000800:	08005018 	.word	0x08005018
 8000804:	0800501c 	.word	0x0800501c
 8000808:	08005020 	.word	0x08005020

0800080c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b094      	sub	sp, #80	; 0x50
 8000810:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000812:	f107 0320 	add.w	r3, r7, #32
 8000816:	2230      	movs	r2, #48	; 0x30
 8000818:	2100      	movs	r1, #0
 800081a:	4618      	mov	r0, r3
 800081c:	f004 fb9b 	bl	8004f56 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000820:	f107 030c 	add.w	r3, r7, #12
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	605a      	str	r2, [r3, #4]
 800082a:	609a      	str	r2, [r3, #8]
 800082c:	60da      	str	r2, [r3, #12]
 800082e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000830:	2300      	movs	r3, #0
 8000832:	60bb      	str	r3, [r7, #8]
 8000834:	4b23      	ldr	r3, [pc, #140]	; (80008c4 <SystemClock_Config+0xb8>)
 8000836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000838:	4a22      	ldr	r2, [pc, #136]	; (80008c4 <SystemClock_Config+0xb8>)
 800083a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800083e:	6413      	str	r3, [r2, #64]	; 0x40
 8000840:	4b20      	ldr	r3, [pc, #128]	; (80008c4 <SystemClock_Config+0xb8>)
 8000842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000844:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000848:	60bb      	str	r3, [r7, #8]
 800084a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800084c:	2300      	movs	r3, #0
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	4b1d      	ldr	r3, [pc, #116]	; (80008c8 <SystemClock_Config+0xbc>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000858:	4a1b      	ldr	r2, [pc, #108]	; (80008c8 <SystemClock_Config+0xbc>)
 800085a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800085e:	6013      	str	r3, [r2, #0]
 8000860:	4b19      	ldr	r3, [pc, #100]	; (80008c8 <SystemClock_Config+0xbc>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000868:	607b      	str	r3, [r7, #4]
 800086a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800086c:	2302      	movs	r3, #2
 800086e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000870:	2301      	movs	r3, #1
 8000872:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000874:	2310      	movs	r3, #16
 8000876:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000878:	2300      	movs	r3, #0
 800087a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800087c:	f107 0320 	add.w	r3, r7, #32
 8000880:	4618      	mov	r0, r3
 8000882:	f000 fdc3 	bl	800140c <HAL_RCC_OscConfig>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800088c:	f000 f8b0 	bl	80009f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000890:	230f      	movs	r3, #15
 8000892:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000894:	2300      	movs	r3, #0
 8000896:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000898:	2300      	movs	r3, #0
 800089a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800089c:	2300      	movs	r3, #0
 800089e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008a0:	2300      	movs	r3, #0
 80008a2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008a4:	f107 030c 	add.w	r3, r7, #12
 80008a8:	2100      	movs	r1, #0
 80008aa:	4618      	mov	r0, r3
 80008ac:	f001 f826 	bl	80018fc <HAL_RCC_ClockConfig>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <SystemClock_Config+0xae>
  {
    Error_Handler();
 80008b6:	f000 f89b 	bl	80009f0 <Error_Handler>
  }
}
 80008ba:	bf00      	nop
 80008bc:	3750      	adds	r7, #80	; 0x50
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40023800 	.word	0x40023800
 80008c8:	40007000 	.word	0x40007000

080008cc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008d0:	4b17      	ldr	r3, [pc, #92]	; (8000930 <MX_SPI1_Init+0x64>)
 80008d2:	4a18      	ldr	r2, [pc, #96]	; (8000934 <MX_SPI1_Init+0x68>)
 80008d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008d6:	4b16      	ldr	r3, [pc, #88]	; (8000930 <MX_SPI1_Init+0x64>)
 80008d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008de:	4b14      	ldr	r3, [pc, #80]	; (8000930 <MX_SPI1_Init+0x64>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008e4:	4b12      	ldr	r3, [pc, #72]	; (8000930 <MX_SPI1_Init+0x64>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008ea:	4b11      	ldr	r3, [pc, #68]	; (8000930 <MX_SPI1_Init+0x64>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008f0:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <MX_SPI1_Init+0x64>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008f6:	4b0e      	ldr	r3, [pc, #56]	; (8000930 <MX_SPI1_Init+0x64>)
 80008f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008fc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008fe:	4b0c      	ldr	r3, [pc, #48]	; (8000930 <MX_SPI1_Init+0x64>)
 8000900:	2200      	movs	r2, #0
 8000902:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000904:	4b0a      	ldr	r3, [pc, #40]	; (8000930 <MX_SPI1_Init+0x64>)
 8000906:	2200      	movs	r2, #0
 8000908:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800090a:	4b09      	ldr	r3, [pc, #36]	; (8000930 <MX_SPI1_Init+0x64>)
 800090c:	2200      	movs	r2, #0
 800090e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000910:	4b07      	ldr	r3, [pc, #28]	; (8000930 <MX_SPI1_Init+0x64>)
 8000912:	2200      	movs	r2, #0
 8000914:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000916:	4b06      	ldr	r3, [pc, #24]	; (8000930 <MX_SPI1_Init+0x64>)
 8000918:	220a      	movs	r2, #10
 800091a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800091c:	4804      	ldr	r0, [pc, #16]	; (8000930 <MX_SPI1_Init+0x64>)
 800091e:	f001 f9cd 	bl	8001cbc <HAL_SPI_Init>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000928:	f000 f862 	bl	80009f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800092c:	bf00      	nop
 800092e:	bd80      	pop	{r7, pc}
 8000930:	20000028 	.word	0x20000028
 8000934:	40013000 	.word	0x40013000

08000938 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800093c:	4b11      	ldr	r3, [pc, #68]	; (8000984 <MX_USART1_UART_Init+0x4c>)
 800093e:	4a12      	ldr	r2, [pc, #72]	; (8000988 <MX_USART1_UART_Init+0x50>)
 8000940:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000942:	4b10      	ldr	r3, [pc, #64]	; (8000984 <MX_USART1_UART_Init+0x4c>)
 8000944:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000948:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800094a:	4b0e      	ldr	r3, [pc, #56]	; (8000984 <MX_USART1_UART_Init+0x4c>)
 800094c:	2200      	movs	r2, #0
 800094e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000950:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <MX_USART1_UART_Init+0x4c>)
 8000952:	2200      	movs	r2, #0
 8000954:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000956:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <MX_USART1_UART_Init+0x4c>)
 8000958:	2200      	movs	r2, #0
 800095a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800095c:	4b09      	ldr	r3, [pc, #36]	; (8000984 <MX_USART1_UART_Init+0x4c>)
 800095e:	220c      	movs	r2, #12
 8000960:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000962:	4b08      	ldr	r3, [pc, #32]	; (8000984 <MX_USART1_UART_Init+0x4c>)
 8000964:	2200      	movs	r2, #0
 8000966:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000968:	4b06      	ldr	r3, [pc, #24]	; (8000984 <MX_USART1_UART_Init+0x4c>)
 800096a:	2200      	movs	r2, #0
 800096c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800096e:	4805      	ldr	r0, [pc, #20]	; (8000984 <MX_USART1_UART_Init+0x4c>)
 8000970:	f001 fc4c 	bl	800220c <HAL_UART_Init>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800097a:	f000 f839 	bl	80009f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	20000080 	.word	0x20000080
 8000988:	40011000 	.word	0x40011000

0800098c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b086      	sub	sp, #24
 8000990:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000992:	1d3b      	adds	r3, r7, #4
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	605a      	str	r2, [r3, #4]
 800099a:	609a      	str	r2, [r3, #8]
 800099c:	60da      	str	r2, [r3, #12]
 800099e:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a0:	2300      	movs	r3, #0
 80009a2:	603b      	str	r3, [r7, #0]
 80009a4:	4b10      	ldr	r3, [pc, #64]	; (80009e8 <MX_GPIO_Init+0x5c>)
 80009a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a8:	4a0f      	ldr	r2, [pc, #60]	; (80009e8 <MX_GPIO_Init+0x5c>)
 80009aa:	f043 0301 	orr.w	r3, r3, #1
 80009ae:	6313      	str	r3, [r2, #48]	; 0x30
 80009b0:	4b0d      	ldr	r3, [pc, #52]	; (80009e8 <MX_GPIO_Init+0x5c>)
 80009b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b4:	f003 0301 	and.w	r3, r3, #1
 80009b8:	603b      	str	r3, [r7, #0]
 80009ba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_RESET_Pin|SPI1_CS_Pin|SPI1_DC_Pin, GPIO_PIN_RESET);
 80009bc:	2200      	movs	r2, #0
 80009be:	2158      	movs	r1, #88	; 0x58
 80009c0:	480a      	ldr	r0, [pc, #40]	; (80009ec <MX_GPIO_Init+0x60>)
 80009c2:	f000 fd09 	bl	80013d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI1_RESET_Pin SPI1_CS_Pin SPI1_DC_Pin */
  GPIO_InitStruct.Pin = SPI1_RESET_Pin|SPI1_CS_Pin|SPI1_DC_Pin;
 80009c6:	2358      	movs	r3, #88	; 0x58
 80009c8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ca:	2301      	movs	r3, #1
 80009cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d2:	2300      	movs	r3, #0
 80009d4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d6:	1d3b      	adds	r3, r7, #4
 80009d8:	4619      	mov	r1, r3
 80009da:	4804      	ldr	r0, [pc, #16]	; (80009ec <MX_GPIO_Init+0x60>)
 80009dc:	f000 fb78 	bl	80010d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009e0:	bf00      	nop
 80009e2:	3718      	adds	r7, #24
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	40023800 	.word	0x40023800
 80009ec:	40020000 	.word	0x40020000

080009f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f4:	b672      	cpsid	i
}
 80009f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009f8:	e7fe      	b.n	80009f8 <Error_Handler+0x8>
	...

080009fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	607b      	str	r3, [r7, #4]
 8000a06:	4b10      	ldr	r3, [pc, #64]	; (8000a48 <HAL_MspInit+0x4c>)
 8000a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a0a:	4a0f      	ldr	r2, [pc, #60]	; (8000a48 <HAL_MspInit+0x4c>)
 8000a0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a10:	6453      	str	r3, [r2, #68]	; 0x44
 8000a12:	4b0d      	ldr	r3, [pc, #52]	; (8000a48 <HAL_MspInit+0x4c>)
 8000a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	603b      	str	r3, [r7, #0]
 8000a22:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <HAL_MspInit+0x4c>)
 8000a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a26:	4a08      	ldr	r2, [pc, #32]	; (8000a48 <HAL_MspInit+0x4c>)
 8000a28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a2e:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <HAL_MspInit+0x4c>)
 8000a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a36:	603b      	str	r3, [r7, #0]
 8000a38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	40023800 	.word	0x40023800

08000a4c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08a      	sub	sp, #40	; 0x28
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a54:	f107 0314 	add.w	r3, r7, #20
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
 8000a60:	60da      	str	r2, [r3, #12]
 8000a62:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a19      	ldr	r2, [pc, #100]	; (8000ad0 <HAL_SPI_MspInit+0x84>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d12b      	bne.n	8000ac6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	613b      	str	r3, [r7, #16]
 8000a72:	4b18      	ldr	r3, [pc, #96]	; (8000ad4 <HAL_SPI_MspInit+0x88>)
 8000a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a76:	4a17      	ldr	r2, [pc, #92]	; (8000ad4 <HAL_SPI_MspInit+0x88>)
 8000a78:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a7e:	4b15      	ldr	r3, [pc, #84]	; (8000ad4 <HAL_SPI_MspInit+0x88>)
 8000a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a86:	613b      	str	r3, [r7, #16]
 8000a88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	60fb      	str	r3, [r7, #12]
 8000a8e:	4b11      	ldr	r3, [pc, #68]	; (8000ad4 <HAL_SPI_MspInit+0x88>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	4a10      	ldr	r2, [pc, #64]	; (8000ad4 <HAL_SPI_MspInit+0x88>)
 8000a94:	f043 0301 	orr.w	r3, r3, #1
 8000a98:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ad4 <HAL_SPI_MspInit+0x88>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	f003 0301 	and.w	r3, r3, #1
 8000aa2:	60fb      	str	r3, [r7, #12]
 8000aa4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000aa6:	23a0      	movs	r3, #160	; 0xa0
 8000aa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab2:	2303      	movs	r3, #3
 8000ab4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ab6:	2305      	movs	r3, #5
 8000ab8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aba:	f107 0314 	add.w	r3, r7, #20
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4805      	ldr	r0, [pc, #20]	; (8000ad8 <HAL_SPI_MspInit+0x8c>)
 8000ac2:	f000 fb05 	bl	80010d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ac6:	bf00      	nop
 8000ac8:	3728      	adds	r7, #40	; 0x28
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	40013000 	.word	0x40013000
 8000ad4:	40023800 	.word	0x40023800
 8000ad8:	40020000 	.word	0x40020000

08000adc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b08a      	sub	sp, #40	; 0x28
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae4:	f107 0314 	add.w	r3, r7, #20
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]
 8000af0:	60da      	str	r2, [r3, #12]
 8000af2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a1d      	ldr	r2, [pc, #116]	; (8000b70 <HAL_UART_MspInit+0x94>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d134      	bne.n	8000b68 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	613b      	str	r3, [r7, #16]
 8000b02:	4b1c      	ldr	r3, [pc, #112]	; (8000b74 <HAL_UART_MspInit+0x98>)
 8000b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b06:	4a1b      	ldr	r2, [pc, #108]	; (8000b74 <HAL_UART_MspInit+0x98>)
 8000b08:	f043 0310 	orr.w	r3, r3, #16
 8000b0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b0e:	4b19      	ldr	r3, [pc, #100]	; (8000b74 <HAL_UART_MspInit+0x98>)
 8000b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b12:	f003 0310 	and.w	r3, r3, #16
 8000b16:	613b      	str	r3, [r7, #16]
 8000b18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	60fb      	str	r3, [r7, #12]
 8000b1e:	4b15      	ldr	r3, [pc, #84]	; (8000b74 <HAL_UART_MspInit+0x98>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	4a14      	ldr	r2, [pc, #80]	; (8000b74 <HAL_UART_MspInit+0x98>)
 8000b24:	f043 0301 	orr.w	r3, r3, #1
 8000b28:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2a:	4b12      	ldr	r3, [pc, #72]	; (8000b74 <HAL_UART_MspInit+0x98>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	f003 0301 	and.w	r3, r3, #1
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b36:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b44:	2303      	movs	r3, #3
 8000b46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b48:	2307      	movs	r3, #7
 8000b4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4c:	f107 0314 	add.w	r3, r7, #20
 8000b50:	4619      	mov	r1, r3
 8000b52:	4809      	ldr	r0, [pc, #36]	; (8000b78 <HAL_UART_MspInit+0x9c>)
 8000b54:	f000 fabc 	bl	80010d0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	2025      	movs	r0, #37	; 0x25
 8000b5e:	f000 f9ee 	bl	8000f3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b62:	2025      	movs	r0, #37	; 0x25
 8000b64:	f000 fa07 	bl	8000f76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b68:	bf00      	nop
 8000b6a:	3728      	adds	r7, #40	; 0x28
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	40011000 	.word	0x40011000
 8000b74:	40023800 	.word	0x40023800
 8000b78:	40020000 	.word	0x40020000

08000b7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b80:	e7fe      	b.n	8000b80 <NMI_Handler+0x4>

08000b82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b86:	e7fe      	b.n	8000b86 <HardFault_Handler+0x4>

08000b88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b8c:	e7fe      	b.n	8000b8c <MemManage_Handler+0x4>

08000b8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b92:	e7fe      	b.n	8000b92 <BusFault_Handler+0x4>

08000b94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b98:	e7fe      	b.n	8000b98 <UsageFault_Handler+0x4>

08000b9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr

08000ba8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr

08000bb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bc8:	f000 f89a 	bl	8000d00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bcc:	bf00      	nop
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000bd4:	4802      	ldr	r0, [pc, #8]	; (8000be0 <USART1_IRQHandler+0x10>)
 8000bd6:	f001 fb8f 	bl	80022f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	20000080 	.word	0x20000080

08000be4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000be8:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <SystemInit+0x20>)
 8000bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bee:	4a05      	ldr	r2, [pc, #20]	; (8000c04 <SystemInit+0x20>)
 8000bf0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bf4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	e000ed00 	.word	0xe000ed00

08000c08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c40 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c0c:	f7ff ffea 	bl	8000be4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c10:	480c      	ldr	r0, [pc, #48]	; (8000c44 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c12:	490d      	ldr	r1, [pc, #52]	; (8000c48 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c14:	4a0d      	ldr	r2, [pc, #52]	; (8000c4c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c18:	e002      	b.n	8000c20 <LoopCopyDataInit>

08000c1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c1e:	3304      	adds	r3, #4

08000c20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c24:	d3f9      	bcc.n	8000c1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c26:	4a0a      	ldr	r2, [pc, #40]	; (8000c50 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c28:	4c0a      	ldr	r4, [pc, #40]	; (8000c54 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c2c:	e001      	b.n	8000c32 <LoopFillZerobss>

08000c2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c30:	3204      	adds	r2, #4

08000c32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c34:	d3fb      	bcc.n	8000c2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c36:	f004 f997 	bl	8004f68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c3a:	f7ff fd2f 	bl	800069c <main>
  bx  lr    
 8000c3e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c40:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000c44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c48:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c4c:	08006118 	.word	0x08006118
  ldr r2, =_sbss
 8000c50:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c54:	20000208 	.word	0x20000208

08000c58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c58:	e7fe      	b.n	8000c58 <ADC_IRQHandler>
	...

08000c5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c60:	4b0e      	ldr	r3, [pc, #56]	; (8000c9c <HAL_Init+0x40>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a0d      	ldr	r2, [pc, #52]	; (8000c9c <HAL_Init+0x40>)
 8000c66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c6c:	4b0b      	ldr	r3, [pc, #44]	; (8000c9c <HAL_Init+0x40>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a0a      	ldr	r2, [pc, #40]	; (8000c9c <HAL_Init+0x40>)
 8000c72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c78:	4b08      	ldr	r3, [pc, #32]	; (8000c9c <HAL_Init+0x40>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a07      	ldr	r2, [pc, #28]	; (8000c9c <HAL_Init+0x40>)
 8000c7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c84:	2003      	movs	r0, #3
 8000c86:	f000 f94f 	bl	8000f28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c8a:	200f      	movs	r0, #15
 8000c8c:	f000 f808 	bl	8000ca0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c90:	f7ff feb4 	bl	80009fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c94:	2300      	movs	r3, #0
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40023c00 	.word	0x40023c00

08000ca0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ca8:	4b12      	ldr	r3, [pc, #72]	; (8000cf4 <HAL_InitTick+0x54>)
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	4b12      	ldr	r3, [pc, #72]	; (8000cf8 <HAL_InitTick+0x58>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f000 f967 	bl	8000f92 <HAL_SYSTICK_Config>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e00e      	b.n	8000cec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2b0f      	cmp	r3, #15
 8000cd2:	d80a      	bhi.n	8000cea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	6879      	ldr	r1, [r7, #4]
 8000cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cdc:	f000 f92f 	bl	8000f3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ce0:	4a06      	ldr	r2, [pc, #24]	; (8000cfc <HAL_InitTick+0x5c>)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	e000      	b.n	8000cec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	3708      	adds	r7, #8
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	20000000 	.word	0x20000000
 8000cf8:	20000008 	.word	0x20000008
 8000cfc:	20000004 	.word	0x20000004

08000d00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d04:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <HAL_IncTick+0x20>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	461a      	mov	r2, r3
 8000d0a:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <HAL_IncTick+0x24>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4413      	add	r3, r2
 8000d10:	4a04      	ldr	r2, [pc, #16]	; (8000d24 <HAL_IncTick+0x24>)
 8000d12:	6013      	str	r3, [r2, #0]
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	20000008 	.word	0x20000008
 8000d24:	20000184 	.word	0x20000184

08000d28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d2c:	4b03      	ldr	r3, [pc, #12]	; (8000d3c <HAL_GetTick+0x14>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	20000184 	.word	0x20000184

08000d40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d48:	f7ff ffee 	bl	8000d28 <HAL_GetTick>
 8000d4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d58:	d005      	beq.n	8000d66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d5a:	4b0a      	ldr	r3, [pc, #40]	; (8000d84 <HAL_Delay+0x44>)
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	461a      	mov	r2, r3
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	4413      	add	r3, r2
 8000d64:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d66:	bf00      	nop
 8000d68:	f7ff ffde 	bl	8000d28 <HAL_GetTick>
 8000d6c:	4602      	mov	r2, r0
 8000d6e:	68bb      	ldr	r3, [r7, #8]
 8000d70:	1ad3      	subs	r3, r2, r3
 8000d72:	68fa      	ldr	r2, [r7, #12]
 8000d74:	429a      	cmp	r2, r3
 8000d76:	d8f7      	bhi.n	8000d68 <HAL_Delay+0x28>
  {
  }
}
 8000d78:	bf00      	nop
 8000d7a:	bf00      	nop
 8000d7c:	3710      	adds	r7, #16
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	20000008 	.word	0x20000008

08000d88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	f003 0307 	and.w	r3, r3, #7
 8000d96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d98:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <__NVIC_SetPriorityGrouping+0x44>)
 8000d9a:	68db      	ldr	r3, [r3, #12]
 8000d9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d9e:	68ba      	ldr	r2, [r7, #8]
 8000da0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000da4:	4013      	ands	r3, r2
 8000da6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000db0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000db4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000db8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dba:	4a04      	ldr	r2, [pc, #16]	; (8000dcc <__NVIC_SetPriorityGrouping+0x44>)
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	60d3      	str	r3, [r2, #12]
}
 8000dc0:	bf00      	nop
 8000dc2:	3714      	adds	r7, #20
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr
 8000dcc:	e000ed00 	.word	0xe000ed00

08000dd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dd4:	4b04      	ldr	r3, [pc, #16]	; (8000de8 <__NVIC_GetPriorityGrouping+0x18>)
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	0a1b      	lsrs	r3, r3, #8
 8000dda:	f003 0307 	and.w	r3, r3, #7
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr
 8000de8:	e000ed00 	.word	0xe000ed00

08000dec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	db0b      	blt.n	8000e16 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dfe:	79fb      	ldrb	r3, [r7, #7]
 8000e00:	f003 021f 	and.w	r2, r3, #31
 8000e04:	4907      	ldr	r1, [pc, #28]	; (8000e24 <__NVIC_EnableIRQ+0x38>)
 8000e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0a:	095b      	lsrs	r3, r3, #5
 8000e0c:	2001      	movs	r0, #1
 8000e0e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e16:	bf00      	nop
 8000e18:	370c      	adds	r7, #12
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	e000e100 	.word	0xe000e100

08000e28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	6039      	str	r1, [r7, #0]
 8000e32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	db0a      	blt.n	8000e52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	b2da      	uxtb	r2, r3
 8000e40:	490c      	ldr	r1, [pc, #48]	; (8000e74 <__NVIC_SetPriority+0x4c>)
 8000e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e46:	0112      	lsls	r2, r2, #4
 8000e48:	b2d2      	uxtb	r2, r2
 8000e4a:	440b      	add	r3, r1
 8000e4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e50:	e00a      	b.n	8000e68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	b2da      	uxtb	r2, r3
 8000e56:	4908      	ldr	r1, [pc, #32]	; (8000e78 <__NVIC_SetPriority+0x50>)
 8000e58:	79fb      	ldrb	r3, [r7, #7]
 8000e5a:	f003 030f 	and.w	r3, r3, #15
 8000e5e:	3b04      	subs	r3, #4
 8000e60:	0112      	lsls	r2, r2, #4
 8000e62:	b2d2      	uxtb	r2, r2
 8000e64:	440b      	add	r3, r1
 8000e66:	761a      	strb	r2, [r3, #24]
}
 8000e68:	bf00      	nop
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	e000e100 	.word	0xe000e100
 8000e78:	e000ed00 	.word	0xe000ed00

08000e7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b089      	sub	sp, #36	; 0x24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	60f8      	str	r0, [r7, #12]
 8000e84:	60b9      	str	r1, [r7, #8]
 8000e86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	f003 0307 	and.w	r3, r3, #7
 8000e8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	f1c3 0307 	rsb	r3, r3, #7
 8000e96:	2b04      	cmp	r3, #4
 8000e98:	bf28      	it	cs
 8000e9a:	2304      	movcs	r3, #4
 8000e9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	3304      	adds	r3, #4
 8000ea2:	2b06      	cmp	r3, #6
 8000ea4:	d902      	bls.n	8000eac <NVIC_EncodePriority+0x30>
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	3b03      	subs	r3, #3
 8000eaa:	e000      	b.n	8000eae <NVIC_EncodePriority+0x32>
 8000eac:	2300      	movs	r3, #0
 8000eae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb0:	f04f 32ff 	mov.w	r2, #4294967295
 8000eb4:	69bb      	ldr	r3, [r7, #24]
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	43da      	mvns	r2, r3
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	401a      	ands	r2, r3
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ec4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	fa01 f303 	lsl.w	r3, r1, r3
 8000ece:	43d9      	mvns	r1, r3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed4:	4313      	orrs	r3, r2
         );
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3724      	adds	r7, #36	; 0x24
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
	...

08000ee4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	3b01      	subs	r3, #1
 8000ef0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ef4:	d301      	bcc.n	8000efa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e00f      	b.n	8000f1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000efa:	4a0a      	ldr	r2, [pc, #40]	; (8000f24 <SysTick_Config+0x40>)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	3b01      	subs	r3, #1
 8000f00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f02:	210f      	movs	r1, #15
 8000f04:	f04f 30ff 	mov.w	r0, #4294967295
 8000f08:	f7ff ff8e 	bl	8000e28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f0c:	4b05      	ldr	r3, [pc, #20]	; (8000f24 <SysTick_Config+0x40>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f12:	4b04      	ldr	r3, [pc, #16]	; (8000f24 <SysTick_Config+0x40>)
 8000f14:	2207      	movs	r2, #7
 8000f16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f18:	2300      	movs	r3, #0
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	e000e010 	.word	0xe000e010

08000f28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f7ff ff29 	bl	8000d88 <__NVIC_SetPriorityGrouping>
}
 8000f36:	bf00      	nop
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b086      	sub	sp, #24
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	4603      	mov	r3, r0
 8000f46:	60b9      	str	r1, [r7, #8]
 8000f48:	607a      	str	r2, [r7, #4]
 8000f4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f50:	f7ff ff3e 	bl	8000dd0 <__NVIC_GetPriorityGrouping>
 8000f54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f56:	687a      	ldr	r2, [r7, #4]
 8000f58:	68b9      	ldr	r1, [r7, #8]
 8000f5a:	6978      	ldr	r0, [r7, #20]
 8000f5c:	f7ff ff8e 	bl	8000e7c <NVIC_EncodePriority>
 8000f60:	4602      	mov	r2, r0
 8000f62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f66:	4611      	mov	r1, r2
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff ff5d 	bl	8000e28 <__NVIC_SetPriority>
}
 8000f6e:	bf00      	nop
 8000f70:	3718      	adds	r7, #24
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b082      	sub	sp, #8
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff ff31 	bl	8000dec <__NVIC_EnableIRQ>
}
 8000f8a:	bf00      	nop
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b082      	sub	sp, #8
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f7ff ffa2 	bl	8000ee4 <SysTick_Config>
 8000fa0:	4603      	mov	r3, r0
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b084      	sub	sp, #16
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fb6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000fb8:	f7ff feb6 	bl	8000d28 <HAL_GetTick>
 8000fbc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	2b02      	cmp	r3, #2
 8000fc8:	d008      	beq.n	8000fdc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2280      	movs	r2, #128	; 0x80
 8000fce:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	e052      	b.n	8001082 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f022 0216 	bic.w	r2, r2, #22
 8000fea:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	695a      	ldr	r2, [r3, #20]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000ffa:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001000:	2b00      	cmp	r3, #0
 8001002:	d103      	bne.n	800100c <HAL_DMA_Abort+0x62>
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001008:	2b00      	cmp	r3, #0
 800100a:	d007      	beq.n	800101c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f022 0208 	bic.w	r2, r2, #8
 800101a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f022 0201 	bic.w	r2, r2, #1
 800102a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800102c:	e013      	b.n	8001056 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800102e:	f7ff fe7b 	bl	8000d28 <HAL_GetTick>
 8001032:	4602      	mov	r2, r0
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	1ad3      	subs	r3, r2, r3
 8001038:	2b05      	cmp	r3, #5
 800103a:	d90c      	bls.n	8001056 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2220      	movs	r2, #32
 8001040:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2203      	movs	r2, #3
 8001046:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2200      	movs	r2, #0
 800104e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001052:	2303      	movs	r3, #3
 8001054:	e015      	b.n	8001082 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f003 0301 	and.w	r3, r3, #1
 8001060:	2b00      	cmp	r3, #0
 8001062:	d1e4      	bne.n	800102e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001068:	223f      	movs	r2, #63	; 0x3f
 800106a:	409a      	lsls	r2, r3
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2201      	movs	r2, #1
 8001074:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2200      	movs	r2, #0
 800107c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001080:	2300      	movs	r3, #0
}
 8001082:	4618      	mov	r0, r3
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800108a:	b480      	push	{r7}
 800108c:	b083      	sub	sp, #12
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001098:	b2db      	uxtb	r3, r3
 800109a:	2b02      	cmp	r3, #2
 800109c:	d004      	beq.n	80010a8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2280      	movs	r2, #128	; 0x80
 80010a2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80010a4:	2301      	movs	r3, #1
 80010a6:	e00c      	b.n	80010c2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2205      	movs	r2, #5
 80010ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f022 0201 	bic.w	r2, r2, #1
 80010be:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80010c0:	2300      	movs	r3, #0
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	370c      	adds	r7, #12
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
	...

080010d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b089      	sub	sp, #36	; 0x24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010da:	2300      	movs	r3, #0
 80010dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010de:	2300      	movs	r3, #0
 80010e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010e2:	2300      	movs	r3, #0
 80010e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010e6:	2300      	movs	r3, #0
 80010e8:	61fb      	str	r3, [r7, #28]
 80010ea:	e159      	b.n	80013a0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010ec:	2201      	movs	r2, #1
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	697a      	ldr	r2, [r7, #20]
 80010fc:	4013      	ands	r3, r2
 80010fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	429a      	cmp	r2, r3
 8001106:	f040 8148 	bne.w	800139a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f003 0303 	and.w	r3, r3, #3
 8001112:	2b01      	cmp	r3, #1
 8001114:	d005      	beq.n	8001122 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800111e:	2b02      	cmp	r3, #2
 8001120:	d130      	bne.n	8001184 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	2203      	movs	r2, #3
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	43db      	mvns	r3, r3
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	4013      	ands	r3, r2
 8001138:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	68da      	ldr	r2, [r3, #12]
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	4313      	orrs	r3, r2
 800114a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001158:	2201      	movs	r2, #1
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	43db      	mvns	r3, r3
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	4013      	ands	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	091b      	lsrs	r3, r3, #4
 800116e:	f003 0201 	and.w	r2, r3, #1
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	4313      	orrs	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f003 0303 	and.w	r3, r3, #3
 800118c:	2b03      	cmp	r3, #3
 800118e:	d017      	beq.n	80011c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	005b      	lsls	r3, r3, #1
 800119a:	2203      	movs	r2, #3
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	43db      	mvns	r3, r3
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	4013      	ands	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	689a      	ldr	r2, [r3, #8]
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f003 0303 	and.w	r3, r3, #3
 80011c8:	2b02      	cmp	r3, #2
 80011ca:	d123      	bne.n	8001214 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	08da      	lsrs	r2, r3, #3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	3208      	adds	r2, #8
 80011d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	f003 0307 	and.w	r3, r3, #7
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	220f      	movs	r2, #15
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	43db      	mvns	r3, r3
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	4013      	ands	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	691a      	ldr	r2, [r3, #16]
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	f003 0307 	and.w	r3, r3, #7
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4313      	orrs	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	08da      	lsrs	r2, r3, #3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	3208      	adds	r2, #8
 800120e:	69b9      	ldr	r1, [r7, #24]
 8001210:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	2203      	movs	r2, #3
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	43db      	mvns	r3, r3
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	4013      	ands	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f003 0203 	and.w	r2, r3, #3
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4313      	orrs	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001250:	2b00      	cmp	r3, #0
 8001252:	f000 80a2 	beq.w	800139a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	60fb      	str	r3, [r7, #12]
 800125a:	4b57      	ldr	r3, [pc, #348]	; (80013b8 <HAL_GPIO_Init+0x2e8>)
 800125c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125e:	4a56      	ldr	r2, [pc, #344]	; (80013b8 <HAL_GPIO_Init+0x2e8>)
 8001260:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001264:	6453      	str	r3, [r2, #68]	; 0x44
 8001266:	4b54      	ldr	r3, [pc, #336]	; (80013b8 <HAL_GPIO_Init+0x2e8>)
 8001268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001272:	4a52      	ldr	r2, [pc, #328]	; (80013bc <HAL_GPIO_Init+0x2ec>)
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	089b      	lsrs	r3, r3, #2
 8001278:	3302      	adds	r3, #2
 800127a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800127e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	f003 0303 	and.w	r3, r3, #3
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	220f      	movs	r2, #15
 800128a:	fa02 f303 	lsl.w	r3, r2, r3
 800128e:	43db      	mvns	r3, r3
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	4013      	ands	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a49      	ldr	r2, [pc, #292]	; (80013c0 <HAL_GPIO_Init+0x2f0>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d019      	beq.n	80012d2 <HAL_GPIO_Init+0x202>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4a48      	ldr	r2, [pc, #288]	; (80013c4 <HAL_GPIO_Init+0x2f4>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d013      	beq.n	80012ce <HAL_GPIO_Init+0x1fe>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4a47      	ldr	r2, [pc, #284]	; (80013c8 <HAL_GPIO_Init+0x2f8>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d00d      	beq.n	80012ca <HAL_GPIO_Init+0x1fa>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4a46      	ldr	r2, [pc, #280]	; (80013cc <HAL_GPIO_Init+0x2fc>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d007      	beq.n	80012c6 <HAL_GPIO_Init+0x1f6>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a45      	ldr	r2, [pc, #276]	; (80013d0 <HAL_GPIO_Init+0x300>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d101      	bne.n	80012c2 <HAL_GPIO_Init+0x1f2>
 80012be:	2304      	movs	r3, #4
 80012c0:	e008      	b.n	80012d4 <HAL_GPIO_Init+0x204>
 80012c2:	2307      	movs	r3, #7
 80012c4:	e006      	b.n	80012d4 <HAL_GPIO_Init+0x204>
 80012c6:	2303      	movs	r3, #3
 80012c8:	e004      	b.n	80012d4 <HAL_GPIO_Init+0x204>
 80012ca:	2302      	movs	r3, #2
 80012cc:	e002      	b.n	80012d4 <HAL_GPIO_Init+0x204>
 80012ce:	2301      	movs	r3, #1
 80012d0:	e000      	b.n	80012d4 <HAL_GPIO_Init+0x204>
 80012d2:	2300      	movs	r3, #0
 80012d4:	69fa      	ldr	r2, [r7, #28]
 80012d6:	f002 0203 	and.w	r2, r2, #3
 80012da:	0092      	lsls	r2, r2, #2
 80012dc:	4093      	lsls	r3, r2
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012e4:	4935      	ldr	r1, [pc, #212]	; (80013bc <HAL_GPIO_Init+0x2ec>)
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	089b      	lsrs	r3, r3, #2
 80012ea:	3302      	adds	r3, #2
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012f2:	4b38      	ldr	r3, [pc, #224]	; (80013d4 <HAL_GPIO_Init+0x304>)
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	43db      	mvns	r3, r3
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	4013      	ands	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d003      	beq.n	8001316 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	4313      	orrs	r3, r2
 8001314:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001316:	4a2f      	ldr	r2, [pc, #188]	; (80013d4 <HAL_GPIO_Init+0x304>)
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800131c:	4b2d      	ldr	r3, [pc, #180]	; (80013d4 <HAL_GPIO_Init+0x304>)
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	43db      	mvns	r3, r3
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	4013      	ands	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001334:	2b00      	cmp	r3, #0
 8001336:	d003      	beq.n	8001340 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	4313      	orrs	r3, r2
 800133e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001340:	4a24      	ldr	r2, [pc, #144]	; (80013d4 <HAL_GPIO_Init+0x304>)
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001346:	4b23      	ldr	r3, [pc, #140]	; (80013d4 <HAL_GPIO_Init+0x304>)
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	43db      	mvns	r3, r3
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	4013      	ands	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d003      	beq.n	800136a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	4313      	orrs	r3, r2
 8001368:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800136a:	4a1a      	ldr	r2, [pc, #104]	; (80013d4 <HAL_GPIO_Init+0x304>)
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001370:	4b18      	ldr	r3, [pc, #96]	; (80013d4 <HAL_GPIO_Init+0x304>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	43db      	mvns	r3, r3
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	4013      	ands	r3, r2
 800137e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001388:	2b00      	cmp	r3, #0
 800138a:	d003      	beq.n	8001394 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	4313      	orrs	r3, r2
 8001392:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001394:	4a0f      	ldr	r2, [pc, #60]	; (80013d4 <HAL_GPIO_Init+0x304>)
 8001396:	69bb      	ldr	r3, [r7, #24]
 8001398:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	3301      	adds	r3, #1
 800139e:	61fb      	str	r3, [r7, #28]
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	2b0f      	cmp	r3, #15
 80013a4:	f67f aea2 	bls.w	80010ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013a8:	bf00      	nop
 80013aa:	bf00      	nop
 80013ac:	3724      	adds	r7, #36	; 0x24
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	40023800 	.word	0x40023800
 80013bc:	40013800 	.word	0x40013800
 80013c0:	40020000 	.word	0x40020000
 80013c4:	40020400 	.word	0x40020400
 80013c8:	40020800 	.word	0x40020800
 80013cc:	40020c00 	.word	0x40020c00
 80013d0:	40021000 	.word	0x40021000
 80013d4:	40013c00 	.word	0x40013c00

080013d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	460b      	mov	r3, r1
 80013e2:	807b      	strh	r3, [r7, #2]
 80013e4:	4613      	mov	r3, r2
 80013e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013e8:	787b      	ldrb	r3, [r7, #1]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d003      	beq.n	80013f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013ee:	887a      	ldrh	r2, [r7, #2]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013f4:	e003      	b.n	80013fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013f6:	887b      	ldrh	r3, [r7, #2]
 80013f8:	041a      	lsls	r2, r3, #16
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	619a      	str	r2, [r3, #24]
}
 80013fe:	bf00      	nop
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
	...

0800140c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b086      	sub	sp, #24
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d101      	bne.n	800141e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e267      	b.n	80018ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 0301 	and.w	r3, r3, #1
 8001426:	2b00      	cmp	r3, #0
 8001428:	d075      	beq.n	8001516 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800142a:	4b88      	ldr	r3, [pc, #544]	; (800164c <HAL_RCC_OscConfig+0x240>)
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	f003 030c 	and.w	r3, r3, #12
 8001432:	2b04      	cmp	r3, #4
 8001434:	d00c      	beq.n	8001450 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001436:	4b85      	ldr	r3, [pc, #532]	; (800164c <HAL_RCC_OscConfig+0x240>)
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800143e:	2b08      	cmp	r3, #8
 8001440:	d112      	bne.n	8001468 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001442:	4b82      	ldr	r3, [pc, #520]	; (800164c <HAL_RCC_OscConfig+0x240>)
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800144a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800144e:	d10b      	bne.n	8001468 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001450:	4b7e      	ldr	r3, [pc, #504]	; (800164c <HAL_RCC_OscConfig+0x240>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001458:	2b00      	cmp	r3, #0
 800145a:	d05b      	beq.n	8001514 <HAL_RCC_OscConfig+0x108>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d157      	bne.n	8001514 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e242      	b.n	80018ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001470:	d106      	bne.n	8001480 <HAL_RCC_OscConfig+0x74>
 8001472:	4b76      	ldr	r3, [pc, #472]	; (800164c <HAL_RCC_OscConfig+0x240>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a75      	ldr	r2, [pc, #468]	; (800164c <HAL_RCC_OscConfig+0x240>)
 8001478:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800147c:	6013      	str	r3, [r2, #0]
 800147e:	e01d      	b.n	80014bc <HAL_RCC_OscConfig+0xb0>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001488:	d10c      	bne.n	80014a4 <HAL_RCC_OscConfig+0x98>
 800148a:	4b70      	ldr	r3, [pc, #448]	; (800164c <HAL_RCC_OscConfig+0x240>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a6f      	ldr	r2, [pc, #444]	; (800164c <HAL_RCC_OscConfig+0x240>)
 8001490:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001494:	6013      	str	r3, [r2, #0]
 8001496:	4b6d      	ldr	r3, [pc, #436]	; (800164c <HAL_RCC_OscConfig+0x240>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a6c      	ldr	r2, [pc, #432]	; (800164c <HAL_RCC_OscConfig+0x240>)
 800149c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014a0:	6013      	str	r3, [r2, #0]
 80014a2:	e00b      	b.n	80014bc <HAL_RCC_OscConfig+0xb0>
 80014a4:	4b69      	ldr	r3, [pc, #420]	; (800164c <HAL_RCC_OscConfig+0x240>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a68      	ldr	r2, [pc, #416]	; (800164c <HAL_RCC_OscConfig+0x240>)
 80014aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014ae:	6013      	str	r3, [r2, #0]
 80014b0:	4b66      	ldr	r3, [pc, #408]	; (800164c <HAL_RCC_OscConfig+0x240>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a65      	ldr	r2, [pc, #404]	; (800164c <HAL_RCC_OscConfig+0x240>)
 80014b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d013      	beq.n	80014ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c4:	f7ff fc30 	bl	8000d28 <HAL_GetTick>
 80014c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ca:	e008      	b.n	80014de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014cc:	f7ff fc2c 	bl	8000d28 <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	2b64      	cmp	r3, #100	; 0x64
 80014d8:	d901      	bls.n	80014de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e207      	b.n	80018ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014de:	4b5b      	ldr	r3, [pc, #364]	; (800164c <HAL_RCC_OscConfig+0x240>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d0f0      	beq.n	80014cc <HAL_RCC_OscConfig+0xc0>
 80014ea:	e014      	b.n	8001516 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ec:	f7ff fc1c 	bl	8000d28 <HAL_GetTick>
 80014f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014f2:	e008      	b.n	8001506 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014f4:	f7ff fc18 	bl	8000d28 <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	2b64      	cmp	r3, #100	; 0x64
 8001500:	d901      	bls.n	8001506 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e1f3      	b.n	80018ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001506:	4b51      	ldr	r3, [pc, #324]	; (800164c <HAL_RCC_OscConfig+0x240>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d1f0      	bne.n	80014f4 <HAL_RCC_OscConfig+0xe8>
 8001512:	e000      	b.n	8001516 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001514:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	2b00      	cmp	r3, #0
 8001520:	d063      	beq.n	80015ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001522:	4b4a      	ldr	r3, [pc, #296]	; (800164c <HAL_RCC_OscConfig+0x240>)
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	f003 030c 	and.w	r3, r3, #12
 800152a:	2b00      	cmp	r3, #0
 800152c:	d00b      	beq.n	8001546 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800152e:	4b47      	ldr	r3, [pc, #284]	; (800164c <HAL_RCC_OscConfig+0x240>)
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001536:	2b08      	cmp	r3, #8
 8001538:	d11c      	bne.n	8001574 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800153a:	4b44      	ldr	r3, [pc, #272]	; (800164c <HAL_RCC_OscConfig+0x240>)
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d116      	bne.n	8001574 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001546:	4b41      	ldr	r3, [pc, #260]	; (800164c <HAL_RCC_OscConfig+0x240>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	2b00      	cmp	r3, #0
 8001550:	d005      	beq.n	800155e <HAL_RCC_OscConfig+0x152>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	68db      	ldr	r3, [r3, #12]
 8001556:	2b01      	cmp	r3, #1
 8001558:	d001      	beq.n	800155e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e1c7      	b.n	80018ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800155e:	4b3b      	ldr	r3, [pc, #236]	; (800164c <HAL_RCC_OscConfig+0x240>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	691b      	ldr	r3, [r3, #16]
 800156a:	00db      	lsls	r3, r3, #3
 800156c:	4937      	ldr	r1, [pc, #220]	; (800164c <HAL_RCC_OscConfig+0x240>)
 800156e:	4313      	orrs	r3, r2
 8001570:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001572:	e03a      	b.n	80015ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d020      	beq.n	80015be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800157c:	4b34      	ldr	r3, [pc, #208]	; (8001650 <HAL_RCC_OscConfig+0x244>)
 800157e:	2201      	movs	r2, #1
 8001580:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001582:	f7ff fbd1 	bl	8000d28 <HAL_GetTick>
 8001586:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001588:	e008      	b.n	800159c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800158a:	f7ff fbcd 	bl	8000d28 <HAL_GetTick>
 800158e:	4602      	mov	r2, r0
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	2b02      	cmp	r3, #2
 8001596:	d901      	bls.n	800159c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001598:	2303      	movs	r3, #3
 800159a:	e1a8      	b.n	80018ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800159c:	4b2b      	ldr	r3, [pc, #172]	; (800164c <HAL_RCC_OscConfig+0x240>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 0302 	and.w	r3, r3, #2
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d0f0      	beq.n	800158a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015a8:	4b28      	ldr	r3, [pc, #160]	; (800164c <HAL_RCC_OscConfig+0x240>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	691b      	ldr	r3, [r3, #16]
 80015b4:	00db      	lsls	r3, r3, #3
 80015b6:	4925      	ldr	r1, [pc, #148]	; (800164c <HAL_RCC_OscConfig+0x240>)
 80015b8:	4313      	orrs	r3, r2
 80015ba:	600b      	str	r3, [r1, #0]
 80015bc:	e015      	b.n	80015ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015be:	4b24      	ldr	r3, [pc, #144]	; (8001650 <HAL_RCC_OscConfig+0x244>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015c4:	f7ff fbb0 	bl	8000d28 <HAL_GetTick>
 80015c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015ca:	e008      	b.n	80015de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015cc:	f7ff fbac 	bl	8000d28 <HAL_GetTick>
 80015d0:	4602      	mov	r2, r0
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d901      	bls.n	80015de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80015da:	2303      	movs	r3, #3
 80015dc:	e187      	b.n	80018ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015de:	4b1b      	ldr	r3, [pc, #108]	; (800164c <HAL_RCC_OscConfig+0x240>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0302 	and.w	r3, r3, #2
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d1f0      	bne.n	80015cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0308 	and.w	r3, r3, #8
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d036      	beq.n	8001664 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	695b      	ldr	r3, [r3, #20]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d016      	beq.n	800162c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015fe:	4b15      	ldr	r3, [pc, #84]	; (8001654 <HAL_RCC_OscConfig+0x248>)
 8001600:	2201      	movs	r2, #1
 8001602:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001604:	f7ff fb90 	bl	8000d28 <HAL_GetTick>
 8001608:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800160a:	e008      	b.n	800161e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800160c:	f7ff fb8c 	bl	8000d28 <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	2b02      	cmp	r3, #2
 8001618:	d901      	bls.n	800161e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e167      	b.n	80018ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800161e:	4b0b      	ldr	r3, [pc, #44]	; (800164c <HAL_RCC_OscConfig+0x240>)
 8001620:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001622:	f003 0302 	and.w	r3, r3, #2
 8001626:	2b00      	cmp	r3, #0
 8001628:	d0f0      	beq.n	800160c <HAL_RCC_OscConfig+0x200>
 800162a:	e01b      	b.n	8001664 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800162c:	4b09      	ldr	r3, [pc, #36]	; (8001654 <HAL_RCC_OscConfig+0x248>)
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001632:	f7ff fb79 	bl	8000d28 <HAL_GetTick>
 8001636:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001638:	e00e      	b.n	8001658 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800163a:	f7ff fb75 	bl	8000d28 <HAL_GetTick>
 800163e:	4602      	mov	r2, r0
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	2b02      	cmp	r3, #2
 8001646:	d907      	bls.n	8001658 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001648:	2303      	movs	r3, #3
 800164a:	e150      	b.n	80018ee <HAL_RCC_OscConfig+0x4e2>
 800164c:	40023800 	.word	0x40023800
 8001650:	42470000 	.word	0x42470000
 8001654:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001658:	4b88      	ldr	r3, [pc, #544]	; (800187c <HAL_RCC_OscConfig+0x470>)
 800165a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800165c:	f003 0302 	and.w	r3, r3, #2
 8001660:	2b00      	cmp	r3, #0
 8001662:	d1ea      	bne.n	800163a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 0304 	and.w	r3, r3, #4
 800166c:	2b00      	cmp	r3, #0
 800166e:	f000 8097 	beq.w	80017a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001672:	2300      	movs	r3, #0
 8001674:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001676:	4b81      	ldr	r3, [pc, #516]	; (800187c <HAL_RCC_OscConfig+0x470>)
 8001678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d10f      	bne.n	80016a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	60bb      	str	r3, [r7, #8]
 8001686:	4b7d      	ldr	r3, [pc, #500]	; (800187c <HAL_RCC_OscConfig+0x470>)
 8001688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168a:	4a7c      	ldr	r2, [pc, #496]	; (800187c <HAL_RCC_OscConfig+0x470>)
 800168c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001690:	6413      	str	r3, [r2, #64]	; 0x40
 8001692:	4b7a      	ldr	r3, [pc, #488]	; (800187c <HAL_RCC_OscConfig+0x470>)
 8001694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800169a:	60bb      	str	r3, [r7, #8]
 800169c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800169e:	2301      	movs	r3, #1
 80016a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016a2:	4b77      	ldr	r3, [pc, #476]	; (8001880 <HAL_RCC_OscConfig+0x474>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d118      	bne.n	80016e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016ae:	4b74      	ldr	r3, [pc, #464]	; (8001880 <HAL_RCC_OscConfig+0x474>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a73      	ldr	r2, [pc, #460]	; (8001880 <HAL_RCC_OscConfig+0x474>)
 80016b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016ba:	f7ff fb35 	bl	8000d28 <HAL_GetTick>
 80016be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016c0:	e008      	b.n	80016d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016c2:	f7ff fb31 	bl	8000d28 <HAL_GetTick>
 80016c6:	4602      	mov	r2, r0
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d901      	bls.n	80016d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80016d0:	2303      	movs	r3, #3
 80016d2:	e10c      	b.n	80018ee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016d4:	4b6a      	ldr	r3, [pc, #424]	; (8001880 <HAL_RCC_OscConfig+0x474>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d0f0      	beq.n	80016c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d106      	bne.n	80016f6 <HAL_RCC_OscConfig+0x2ea>
 80016e8:	4b64      	ldr	r3, [pc, #400]	; (800187c <HAL_RCC_OscConfig+0x470>)
 80016ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ec:	4a63      	ldr	r2, [pc, #396]	; (800187c <HAL_RCC_OscConfig+0x470>)
 80016ee:	f043 0301 	orr.w	r3, r3, #1
 80016f2:	6713      	str	r3, [r2, #112]	; 0x70
 80016f4:	e01c      	b.n	8001730 <HAL_RCC_OscConfig+0x324>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	2b05      	cmp	r3, #5
 80016fc:	d10c      	bne.n	8001718 <HAL_RCC_OscConfig+0x30c>
 80016fe:	4b5f      	ldr	r3, [pc, #380]	; (800187c <HAL_RCC_OscConfig+0x470>)
 8001700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001702:	4a5e      	ldr	r2, [pc, #376]	; (800187c <HAL_RCC_OscConfig+0x470>)
 8001704:	f043 0304 	orr.w	r3, r3, #4
 8001708:	6713      	str	r3, [r2, #112]	; 0x70
 800170a:	4b5c      	ldr	r3, [pc, #368]	; (800187c <HAL_RCC_OscConfig+0x470>)
 800170c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800170e:	4a5b      	ldr	r2, [pc, #364]	; (800187c <HAL_RCC_OscConfig+0x470>)
 8001710:	f043 0301 	orr.w	r3, r3, #1
 8001714:	6713      	str	r3, [r2, #112]	; 0x70
 8001716:	e00b      	b.n	8001730 <HAL_RCC_OscConfig+0x324>
 8001718:	4b58      	ldr	r3, [pc, #352]	; (800187c <HAL_RCC_OscConfig+0x470>)
 800171a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800171c:	4a57      	ldr	r2, [pc, #348]	; (800187c <HAL_RCC_OscConfig+0x470>)
 800171e:	f023 0301 	bic.w	r3, r3, #1
 8001722:	6713      	str	r3, [r2, #112]	; 0x70
 8001724:	4b55      	ldr	r3, [pc, #340]	; (800187c <HAL_RCC_OscConfig+0x470>)
 8001726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001728:	4a54      	ldr	r2, [pc, #336]	; (800187c <HAL_RCC_OscConfig+0x470>)
 800172a:	f023 0304 	bic.w	r3, r3, #4
 800172e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d015      	beq.n	8001764 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001738:	f7ff faf6 	bl	8000d28 <HAL_GetTick>
 800173c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800173e:	e00a      	b.n	8001756 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001740:	f7ff faf2 	bl	8000d28 <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	f241 3288 	movw	r2, #5000	; 0x1388
 800174e:	4293      	cmp	r3, r2
 8001750:	d901      	bls.n	8001756 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e0cb      	b.n	80018ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001756:	4b49      	ldr	r3, [pc, #292]	; (800187c <HAL_RCC_OscConfig+0x470>)
 8001758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800175a:	f003 0302 	and.w	r3, r3, #2
 800175e:	2b00      	cmp	r3, #0
 8001760:	d0ee      	beq.n	8001740 <HAL_RCC_OscConfig+0x334>
 8001762:	e014      	b.n	800178e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001764:	f7ff fae0 	bl	8000d28 <HAL_GetTick>
 8001768:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800176a:	e00a      	b.n	8001782 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800176c:	f7ff fadc 	bl	8000d28 <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	f241 3288 	movw	r2, #5000	; 0x1388
 800177a:	4293      	cmp	r3, r2
 800177c:	d901      	bls.n	8001782 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e0b5      	b.n	80018ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001782:	4b3e      	ldr	r3, [pc, #248]	; (800187c <HAL_RCC_OscConfig+0x470>)
 8001784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001786:	f003 0302 	and.w	r3, r3, #2
 800178a:	2b00      	cmp	r3, #0
 800178c:	d1ee      	bne.n	800176c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800178e:	7dfb      	ldrb	r3, [r7, #23]
 8001790:	2b01      	cmp	r3, #1
 8001792:	d105      	bne.n	80017a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001794:	4b39      	ldr	r3, [pc, #228]	; (800187c <HAL_RCC_OscConfig+0x470>)
 8001796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001798:	4a38      	ldr	r2, [pc, #224]	; (800187c <HAL_RCC_OscConfig+0x470>)
 800179a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800179e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	699b      	ldr	r3, [r3, #24]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	f000 80a1 	beq.w	80018ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017aa:	4b34      	ldr	r3, [pc, #208]	; (800187c <HAL_RCC_OscConfig+0x470>)
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	f003 030c 	and.w	r3, r3, #12
 80017b2:	2b08      	cmp	r3, #8
 80017b4:	d05c      	beq.n	8001870 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	699b      	ldr	r3, [r3, #24]
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d141      	bne.n	8001842 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017be:	4b31      	ldr	r3, [pc, #196]	; (8001884 <HAL_RCC_OscConfig+0x478>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c4:	f7ff fab0 	bl	8000d28 <HAL_GetTick>
 80017c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017ca:	e008      	b.n	80017de <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017cc:	f7ff faac 	bl	8000d28 <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d901      	bls.n	80017de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e087      	b.n	80018ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017de:	4b27      	ldr	r3, [pc, #156]	; (800187c <HAL_RCC_OscConfig+0x470>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d1f0      	bne.n	80017cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	69da      	ldr	r2, [r3, #28]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6a1b      	ldr	r3, [r3, #32]
 80017f2:	431a      	orrs	r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f8:	019b      	lsls	r3, r3, #6
 80017fa:	431a      	orrs	r2, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001800:	085b      	lsrs	r3, r3, #1
 8001802:	3b01      	subs	r3, #1
 8001804:	041b      	lsls	r3, r3, #16
 8001806:	431a      	orrs	r2, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800180c:	061b      	lsls	r3, r3, #24
 800180e:	491b      	ldr	r1, [pc, #108]	; (800187c <HAL_RCC_OscConfig+0x470>)
 8001810:	4313      	orrs	r3, r2
 8001812:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001814:	4b1b      	ldr	r3, [pc, #108]	; (8001884 <HAL_RCC_OscConfig+0x478>)
 8001816:	2201      	movs	r2, #1
 8001818:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800181a:	f7ff fa85 	bl	8000d28 <HAL_GetTick>
 800181e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001820:	e008      	b.n	8001834 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001822:	f7ff fa81 	bl	8000d28 <HAL_GetTick>
 8001826:	4602      	mov	r2, r0
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	2b02      	cmp	r3, #2
 800182e:	d901      	bls.n	8001834 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001830:	2303      	movs	r3, #3
 8001832:	e05c      	b.n	80018ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001834:	4b11      	ldr	r3, [pc, #68]	; (800187c <HAL_RCC_OscConfig+0x470>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800183c:	2b00      	cmp	r3, #0
 800183e:	d0f0      	beq.n	8001822 <HAL_RCC_OscConfig+0x416>
 8001840:	e054      	b.n	80018ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001842:	4b10      	ldr	r3, [pc, #64]	; (8001884 <HAL_RCC_OscConfig+0x478>)
 8001844:	2200      	movs	r2, #0
 8001846:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001848:	f7ff fa6e 	bl	8000d28 <HAL_GetTick>
 800184c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800184e:	e008      	b.n	8001862 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001850:	f7ff fa6a 	bl	8000d28 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b02      	cmp	r3, #2
 800185c:	d901      	bls.n	8001862 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e045      	b.n	80018ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001862:	4b06      	ldr	r3, [pc, #24]	; (800187c <HAL_RCC_OscConfig+0x470>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d1f0      	bne.n	8001850 <HAL_RCC_OscConfig+0x444>
 800186e:	e03d      	b.n	80018ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	699b      	ldr	r3, [r3, #24]
 8001874:	2b01      	cmp	r3, #1
 8001876:	d107      	bne.n	8001888 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e038      	b.n	80018ee <HAL_RCC_OscConfig+0x4e2>
 800187c:	40023800 	.word	0x40023800
 8001880:	40007000 	.word	0x40007000
 8001884:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001888:	4b1b      	ldr	r3, [pc, #108]	; (80018f8 <HAL_RCC_OscConfig+0x4ec>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	699b      	ldr	r3, [r3, #24]
 8001892:	2b01      	cmp	r3, #1
 8001894:	d028      	beq.n	80018e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d121      	bne.n	80018e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d11a      	bne.n	80018e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018b2:	68fa      	ldr	r2, [r7, #12]
 80018b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80018b8:	4013      	ands	r3, r2
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80018be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d111      	bne.n	80018e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ce:	085b      	lsrs	r3, r3, #1
 80018d0:	3b01      	subs	r3, #1
 80018d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d107      	bne.n	80018e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d001      	beq.n	80018ec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e000      	b.n	80018ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80018ec:	2300      	movs	r3, #0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3718      	adds	r7, #24
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	40023800 	.word	0x40023800

080018fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d101      	bne.n	8001910 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e0cc      	b.n	8001aaa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001910:	4b68      	ldr	r3, [pc, #416]	; (8001ab4 <HAL_RCC_ClockConfig+0x1b8>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 0307 	and.w	r3, r3, #7
 8001918:	683a      	ldr	r2, [r7, #0]
 800191a:	429a      	cmp	r2, r3
 800191c:	d90c      	bls.n	8001938 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800191e:	4b65      	ldr	r3, [pc, #404]	; (8001ab4 <HAL_RCC_ClockConfig+0x1b8>)
 8001920:	683a      	ldr	r2, [r7, #0]
 8001922:	b2d2      	uxtb	r2, r2
 8001924:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001926:	4b63      	ldr	r3, [pc, #396]	; (8001ab4 <HAL_RCC_ClockConfig+0x1b8>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0307 	and.w	r3, r3, #7
 800192e:	683a      	ldr	r2, [r7, #0]
 8001930:	429a      	cmp	r2, r3
 8001932:	d001      	beq.n	8001938 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e0b8      	b.n	8001aaa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0302 	and.w	r3, r3, #2
 8001940:	2b00      	cmp	r3, #0
 8001942:	d020      	beq.n	8001986 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0304 	and.w	r3, r3, #4
 800194c:	2b00      	cmp	r3, #0
 800194e:	d005      	beq.n	800195c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001950:	4b59      	ldr	r3, [pc, #356]	; (8001ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	4a58      	ldr	r2, [pc, #352]	; (8001ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8001956:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800195a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0308 	and.w	r3, r3, #8
 8001964:	2b00      	cmp	r3, #0
 8001966:	d005      	beq.n	8001974 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001968:	4b53      	ldr	r3, [pc, #332]	; (8001ab8 <HAL_RCC_ClockConfig+0x1bc>)
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	4a52      	ldr	r2, [pc, #328]	; (8001ab8 <HAL_RCC_ClockConfig+0x1bc>)
 800196e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001972:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001974:	4b50      	ldr	r3, [pc, #320]	; (8001ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	494d      	ldr	r1, [pc, #308]	; (8001ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8001982:	4313      	orrs	r3, r2
 8001984:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	2b00      	cmp	r3, #0
 8001990:	d044      	beq.n	8001a1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	2b01      	cmp	r3, #1
 8001998:	d107      	bne.n	80019aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800199a:	4b47      	ldr	r3, [pc, #284]	; (8001ab8 <HAL_RCC_ClockConfig+0x1bc>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d119      	bne.n	80019da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e07f      	b.n	8001aaa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d003      	beq.n	80019ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019b6:	2b03      	cmp	r3, #3
 80019b8:	d107      	bne.n	80019ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019ba:	4b3f      	ldr	r3, [pc, #252]	; (8001ab8 <HAL_RCC_ClockConfig+0x1bc>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d109      	bne.n	80019da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e06f      	b.n	8001aaa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019ca:	4b3b      	ldr	r3, [pc, #236]	; (8001ab8 <HAL_RCC_ClockConfig+0x1bc>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d101      	bne.n	80019da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e067      	b.n	8001aaa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019da:	4b37      	ldr	r3, [pc, #220]	; (8001ab8 <HAL_RCC_ClockConfig+0x1bc>)
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	f023 0203 	bic.w	r2, r3, #3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	4934      	ldr	r1, [pc, #208]	; (8001ab8 <HAL_RCC_ClockConfig+0x1bc>)
 80019e8:	4313      	orrs	r3, r2
 80019ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019ec:	f7ff f99c 	bl	8000d28 <HAL_GetTick>
 80019f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019f2:	e00a      	b.n	8001a0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019f4:	f7ff f998 	bl	8000d28 <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e04f      	b.n	8001aaa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a0a:	4b2b      	ldr	r3, [pc, #172]	; (8001ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	f003 020c 	and.w	r2, r3, #12
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d1eb      	bne.n	80019f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a1c:	4b25      	ldr	r3, [pc, #148]	; (8001ab4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0307 	and.w	r3, r3, #7
 8001a24:	683a      	ldr	r2, [r7, #0]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d20c      	bcs.n	8001a44 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a2a:	4b22      	ldr	r3, [pc, #136]	; (8001ab4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a2c:	683a      	ldr	r2, [r7, #0]
 8001a2e:	b2d2      	uxtb	r2, r2
 8001a30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a32:	4b20      	ldr	r3, [pc, #128]	; (8001ab4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0307 	and.w	r3, r3, #7
 8001a3a:	683a      	ldr	r2, [r7, #0]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d001      	beq.n	8001a44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e032      	b.n	8001aaa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0304 	and.w	r3, r3, #4
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d008      	beq.n	8001a62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a50:	4b19      	ldr	r3, [pc, #100]	; (8001ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	4916      	ldr	r1, [pc, #88]	; (8001ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0308 	and.w	r3, r3, #8
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d009      	beq.n	8001a82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a6e:	4b12      	ldr	r3, [pc, #72]	; (8001ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	691b      	ldr	r3, [r3, #16]
 8001a7a:	00db      	lsls	r3, r3, #3
 8001a7c:	490e      	ldr	r1, [pc, #56]	; (8001ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a82:	f000 f821 	bl	8001ac8 <HAL_RCC_GetSysClockFreq>
 8001a86:	4602      	mov	r2, r0
 8001a88:	4b0b      	ldr	r3, [pc, #44]	; (8001ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	091b      	lsrs	r3, r3, #4
 8001a8e:	f003 030f 	and.w	r3, r3, #15
 8001a92:	490a      	ldr	r1, [pc, #40]	; (8001abc <HAL_RCC_ClockConfig+0x1c0>)
 8001a94:	5ccb      	ldrb	r3, [r1, r3]
 8001a96:	fa22 f303 	lsr.w	r3, r2, r3
 8001a9a:	4a09      	ldr	r2, [pc, #36]	; (8001ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a9e:	4b09      	ldr	r3, [pc, #36]	; (8001ac4 <HAL_RCC_ClockConfig+0x1c8>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7ff f8fc 	bl	8000ca0 <HAL_InitTick>

  return HAL_OK;
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3710      	adds	r7, #16
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	40023c00 	.word	0x40023c00
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	08005024 	.word	0x08005024
 8001ac0:	20000000 	.word	0x20000000
 8001ac4:	20000004 	.word	0x20000004

08001ac8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ac8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001acc:	b090      	sub	sp, #64	; 0x40
 8001ace:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	637b      	str	r3, [r7, #52]	; 0x34
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ad8:	2300      	movs	r3, #0
 8001ada:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001adc:	2300      	movs	r3, #0
 8001ade:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ae0:	4b59      	ldr	r3, [pc, #356]	; (8001c48 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	f003 030c 	and.w	r3, r3, #12
 8001ae8:	2b08      	cmp	r3, #8
 8001aea:	d00d      	beq.n	8001b08 <HAL_RCC_GetSysClockFreq+0x40>
 8001aec:	2b08      	cmp	r3, #8
 8001aee:	f200 80a1 	bhi.w	8001c34 <HAL_RCC_GetSysClockFreq+0x16c>
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d002      	beq.n	8001afc <HAL_RCC_GetSysClockFreq+0x34>
 8001af6:	2b04      	cmp	r3, #4
 8001af8:	d003      	beq.n	8001b02 <HAL_RCC_GetSysClockFreq+0x3a>
 8001afa:	e09b      	b.n	8001c34 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001afc:	4b53      	ldr	r3, [pc, #332]	; (8001c4c <HAL_RCC_GetSysClockFreq+0x184>)
 8001afe:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001b00:	e09b      	b.n	8001c3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b02:	4b53      	ldr	r3, [pc, #332]	; (8001c50 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b04:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001b06:	e098      	b.n	8001c3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b08:	4b4f      	ldr	r3, [pc, #316]	; (8001c48 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b10:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b12:	4b4d      	ldr	r3, [pc, #308]	; (8001c48 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d028      	beq.n	8001b70 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b1e:	4b4a      	ldr	r3, [pc, #296]	; (8001c48 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	099b      	lsrs	r3, r3, #6
 8001b24:	2200      	movs	r2, #0
 8001b26:	623b      	str	r3, [r7, #32]
 8001b28:	627a      	str	r2, [r7, #36]	; 0x24
 8001b2a:	6a3b      	ldr	r3, [r7, #32]
 8001b2c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001b30:	2100      	movs	r1, #0
 8001b32:	4b47      	ldr	r3, [pc, #284]	; (8001c50 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b34:	fb03 f201 	mul.w	r2, r3, r1
 8001b38:	2300      	movs	r3, #0
 8001b3a:	fb00 f303 	mul.w	r3, r0, r3
 8001b3e:	4413      	add	r3, r2
 8001b40:	4a43      	ldr	r2, [pc, #268]	; (8001c50 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b42:	fba0 1202 	umull	r1, r2, r0, r2
 8001b46:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b48:	460a      	mov	r2, r1
 8001b4a:	62ba      	str	r2, [r7, #40]	; 0x28
 8001b4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b4e:	4413      	add	r3, r2
 8001b50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b54:	2200      	movs	r2, #0
 8001b56:	61bb      	str	r3, [r7, #24]
 8001b58:	61fa      	str	r2, [r7, #28]
 8001b5a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b5e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001b62:	f7fe fb37 	bl	80001d4 <__aeabi_uldivmod>
 8001b66:	4602      	mov	r2, r0
 8001b68:	460b      	mov	r3, r1
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b6e:	e053      	b.n	8001c18 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b70:	4b35      	ldr	r3, [pc, #212]	; (8001c48 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	099b      	lsrs	r3, r3, #6
 8001b76:	2200      	movs	r2, #0
 8001b78:	613b      	str	r3, [r7, #16]
 8001b7a:	617a      	str	r2, [r7, #20]
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001b82:	f04f 0b00 	mov.w	fp, #0
 8001b86:	4652      	mov	r2, sl
 8001b88:	465b      	mov	r3, fp
 8001b8a:	f04f 0000 	mov.w	r0, #0
 8001b8e:	f04f 0100 	mov.w	r1, #0
 8001b92:	0159      	lsls	r1, r3, #5
 8001b94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b98:	0150      	lsls	r0, r2, #5
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	ebb2 080a 	subs.w	r8, r2, sl
 8001ba2:	eb63 090b 	sbc.w	r9, r3, fp
 8001ba6:	f04f 0200 	mov.w	r2, #0
 8001baa:	f04f 0300 	mov.w	r3, #0
 8001bae:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001bb2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001bb6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001bba:	ebb2 0408 	subs.w	r4, r2, r8
 8001bbe:	eb63 0509 	sbc.w	r5, r3, r9
 8001bc2:	f04f 0200 	mov.w	r2, #0
 8001bc6:	f04f 0300 	mov.w	r3, #0
 8001bca:	00eb      	lsls	r3, r5, #3
 8001bcc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001bd0:	00e2      	lsls	r2, r4, #3
 8001bd2:	4614      	mov	r4, r2
 8001bd4:	461d      	mov	r5, r3
 8001bd6:	eb14 030a 	adds.w	r3, r4, sl
 8001bda:	603b      	str	r3, [r7, #0]
 8001bdc:	eb45 030b 	adc.w	r3, r5, fp
 8001be0:	607b      	str	r3, [r7, #4]
 8001be2:	f04f 0200 	mov.w	r2, #0
 8001be6:	f04f 0300 	mov.w	r3, #0
 8001bea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001bee:	4629      	mov	r1, r5
 8001bf0:	028b      	lsls	r3, r1, #10
 8001bf2:	4621      	mov	r1, r4
 8001bf4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001bf8:	4621      	mov	r1, r4
 8001bfa:	028a      	lsls	r2, r1, #10
 8001bfc:	4610      	mov	r0, r2
 8001bfe:	4619      	mov	r1, r3
 8001c00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c02:	2200      	movs	r2, #0
 8001c04:	60bb      	str	r3, [r7, #8]
 8001c06:	60fa      	str	r2, [r7, #12]
 8001c08:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c0c:	f7fe fae2 	bl	80001d4 <__aeabi_uldivmod>
 8001c10:	4602      	mov	r2, r0
 8001c12:	460b      	mov	r3, r1
 8001c14:	4613      	mov	r3, r2
 8001c16:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c18:	4b0b      	ldr	r3, [pc, #44]	; (8001c48 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	0c1b      	lsrs	r3, r3, #16
 8001c1e:	f003 0303 	and.w	r3, r3, #3
 8001c22:	3301      	adds	r3, #1
 8001c24:	005b      	lsls	r3, r3, #1
 8001c26:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001c28:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c30:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001c32:	e002      	b.n	8001c3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c34:	4b05      	ldr	r3, [pc, #20]	; (8001c4c <HAL_RCC_GetSysClockFreq+0x184>)
 8001c36:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001c38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3740      	adds	r7, #64	; 0x40
 8001c40:	46bd      	mov	sp, r7
 8001c42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c46:	bf00      	nop
 8001c48:	40023800 	.word	0x40023800
 8001c4c:	00f42400 	.word	0x00f42400
 8001c50:	017d7840 	.word	0x017d7840

08001c54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c58:	4b03      	ldr	r3, [pc, #12]	; (8001c68 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	20000000 	.word	0x20000000

08001c6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c70:	f7ff fff0 	bl	8001c54 <HAL_RCC_GetHCLKFreq>
 8001c74:	4602      	mov	r2, r0
 8001c76:	4b05      	ldr	r3, [pc, #20]	; (8001c8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	0a9b      	lsrs	r3, r3, #10
 8001c7c:	f003 0307 	and.w	r3, r3, #7
 8001c80:	4903      	ldr	r1, [pc, #12]	; (8001c90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c82:	5ccb      	ldrb	r3, [r1, r3]
 8001c84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	40023800 	.word	0x40023800
 8001c90:	08005034 	.word	0x08005034

08001c94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c98:	f7ff ffdc 	bl	8001c54 <HAL_RCC_GetHCLKFreq>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	4b05      	ldr	r3, [pc, #20]	; (8001cb4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	0b5b      	lsrs	r3, r3, #13
 8001ca4:	f003 0307 	and.w	r3, r3, #7
 8001ca8:	4903      	ldr	r1, [pc, #12]	; (8001cb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001caa:	5ccb      	ldrb	r3, [r1, r3]
 8001cac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	40023800 	.word	0x40023800
 8001cb8:	08005034 	.word	0x08005034

08001cbc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d101      	bne.n	8001cce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e07b      	b.n	8001dc6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d108      	bne.n	8001ce8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001cde:	d009      	beq.n	8001cf4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	61da      	str	r2, [r3, #28]
 8001ce6:	e005      	b.n	8001cf4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2200      	movs	r2, #0
 8001cec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d106      	bne.n	8001d14 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f7fe fe9c 	bl	8000a4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2202      	movs	r2, #2
 8001d18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d2a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001d3c:	431a      	orrs	r2, r3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d46:	431a      	orrs	r2, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	691b      	ldr	r3, [r3, #16]
 8001d4c:	f003 0302 	and.w	r3, r3, #2
 8001d50:	431a      	orrs	r2, r3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	695b      	ldr	r3, [r3, #20]
 8001d56:	f003 0301 	and.w	r3, r3, #1
 8001d5a:	431a      	orrs	r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	699b      	ldr	r3, [r3, #24]
 8001d60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d64:	431a      	orrs	r2, r3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	69db      	ldr	r3, [r3, #28]
 8001d6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d6e:	431a      	orrs	r2, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6a1b      	ldr	r3, [r3, #32]
 8001d74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d78:	ea42 0103 	orr.w	r1, r2, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d80:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	430a      	orrs	r2, r1
 8001d8a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	699b      	ldr	r3, [r3, #24]
 8001d90:	0c1b      	lsrs	r3, r3, #16
 8001d92:	f003 0104 	and.w	r1, r3, #4
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9a:	f003 0210 	and.w	r2, r3, #16
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	430a      	orrs	r2, r1
 8001da4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	69da      	ldr	r2, [r3, #28]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001db4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b088      	sub	sp, #32
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	60f8      	str	r0, [r7, #12]
 8001dd6:	60b9      	str	r1, [r7, #8]
 8001dd8:	603b      	str	r3, [r7, #0]
 8001dda:	4613      	mov	r3, r2
 8001ddc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001dde:	2300      	movs	r3, #0
 8001de0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d101      	bne.n	8001df0 <HAL_SPI_Transmit+0x22>
 8001dec:	2302      	movs	r3, #2
 8001dee:	e12d      	b.n	800204c <HAL_SPI_Transmit+0x27e>
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001df8:	f7fe ff96 	bl	8000d28 <HAL_GetTick>
 8001dfc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001dfe:	88fb      	ldrh	r3, [r7, #6]
 8001e00:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d002      	beq.n	8001e14 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001e0e:	2302      	movs	r3, #2
 8001e10:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001e12:	e116      	b.n	8002042 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d002      	beq.n	8001e20 <HAL_SPI_Transmit+0x52>
 8001e1a:	88fb      	ldrh	r3, [r7, #6]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d102      	bne.n	8001e26 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001e24:	e10d      	b.n	8002042 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2203      	movs	r2, #3
 8001e2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2200      	movs	r2, #0
 8001e32:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	68ba      	ldr	r2, [r7, #8]
 8001e38:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	88fa      	ldrh	r2, [r7, #6]
 8001e3e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	88fa      	ldrh	r2, [r7, #6]
 8001e44:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2200      	movs	r2, #0
 8001e56:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2200      	movs	r2, #0
 8001e62:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e6c:	d10f      	bne.n	8001e8e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e7c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e8c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e98:	2b40      	cmp	r3, #64	; 0x40
 8001e9a:	d007      	beq.n	8001eac <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001eaa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001eb4:	d14f      	bne.n	8001f56 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d002      	beq.n	8001ec4 <HAL_SPI_Transmit+0xf6>
 8001ebe:	8afb      	ldrh	r3, [r7, #22]
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d142      	bne.n	8001f4a <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec8:	881a      	ldrh	r2, [r3, #0]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed4:	1c9a      	adds	r2, r3, #2
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ede:	b29b      	uxth	r3, r3
 8001ee0:	3b01      	subs	r3, #1
 8001ee2:	b29a      	uxth	r2, r3
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001ee8:	e02f      	b.n	8001f4a <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f003 0302 	and.w	r3, r3, #2
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d112      	bne.n	8001f1e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efc:	881a      	ldrh	r2, [r3, #0]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f08:	1c9a      	adds	r2, r3, #2
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	3b01      	subs	r3, #1
 8001f16:	b29a      	uxth	r2, r3
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	86da      	strh	r2, [r3, #54]	; 0x36
 8001f1c:	e015      	b.n	8001f4a <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f1e:	f7fe ff03 	bl	8000d28 <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	69bb      	ldr	r3, [r7, #24]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	683a      	ldr	r2, [r7, #0]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d803      	bhi.n	8001f36 <HAL_SPI_Transmit+0x168>
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f34:	d102      	bne.n	8001f3c <HAL_SPI_Transmit+0x16e>
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d106      	bne.n	8001f4a <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2201      	movs	r2, #1
 8001f44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8001f48:	e07b      	b.n	8002042 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d1ca      	bne.n	8001eea <HAL_SPI_Transmit+0x11c>
 8001f54:	e050      	b.n	8001ff8 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d002      	beq.n	8001f64 <HAL_SPI_Transmit+0x196>
 8001f5e:	8afb      	ldrh	r3, [r7, #22]
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d144      	bne.n	8001fee <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	330c      	adds	r3, #12
 8001f6e:	7812      	ldrb	r2, [r2, #0]
 8001f70:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f76:	1c5a      	adds	r2, r3, #1
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	3b01      	subs	r3, #1
 8001f84:	b29a      	uxth	r2, r3
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001f8a:	e030      	b.n	8001fee <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	f003 0302 	and.w	r3, r3, #2
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d113      	bne.n	8001fc2 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	330c      	adds	r3, #12
 8001fa4:	7812      	ldrb	r2, [r2, #0]
 8001fa6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fac:	1c5a      	adds	r2, r3, #1
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	3b01      	subs	r3, #1
 8001fba:	b29a      	uxth	r2, r3
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	86da      	strh	r2, [r3, #54]	; 0x36
 8001fc0:	e015      	b.n	8001fee <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001fc2:	f7fe feb1 	bl	8000d28 <HAL_GetTick>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	683a      	ldr	r2, [r7, #0]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d803      	bhi.n	8001fda <HAL_SPI_Transmit+0x20c>
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fd8:	d102      	bne.n	8001fe0 <HAL_SPI_Transmit+0x212>
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d106      	bne.n	8001fee <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8001fec:	e029      	b.n	8002042 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d1c9      	bne.n	8001f8c <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	6839      	ldr	r1, [r7, #0]
 8001ffc:	68f8      	ldr	r0, [r7, #12]
 8001ffe:	f000 f8b1 	bl	8002164 <SPI_EndRxTxTransaction>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d002      	beq.n	800200e <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2220      	movs	r2, #32
 800200c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d10a      	bne.n	800202c <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002016:	2300      	movs	r3, #0
 8002018:	613b      	str	r3, [r7, #16]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	613b      	str	r3, [r7, #16]
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	613b      	str	r3, [r7, #16]
 800202a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002030:	2b00      	cmp	r3, #0
 8002032:	d002      	beq.n	800203a <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	77fb      	strb	r3, [r7, #31]
 8002038:	e003      	b.n	8002042 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2201      	movs	r2, #1
 800203e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800204a:	7ffb      	ldrb	r3, [r7, #31]
}
 800204c:	4618      	mov	r0, r3
 800204e:	3720      	adds	r7, #32
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}

08002054 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b088      	sub	sp, #32
 8002058:	af00      	add	r7, sp, #0
 800205a:	60f8      	str	r0, [r7, #12]
 800205c:	60b9      	str	r1, [r7, #8]
 800205e:	603b      	str	r3, [r7, #0]
 8002060:	4613      	mov	r3, r2
 8002062:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002064:	f7fe fe60 	bl	8000d28 <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800206c:	1a9b      	subs	r3, r3, r2
 800206e:	683a      	ldr	r2, [r7, #0]
 8002070:	4413      	add	r3, r2
 8002072:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002074:	f7fe fe58 	bl	8000d28 <HAL_GetTick>
 8002078:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800207a:	4b39      	ldr	r3, [pc, #228]	; (8002160 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	015b      	lsls	r3, r3, #5
 8002080:	0d1b      	lsrs	r3, r3, #20
 8002082:	69fa      	ldr	r2, [r7, #28]
 8002084:	fb02 f303 	mul.w	r3, r2, r3
 8002088:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800208a:	e054      	b.n	8002136 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002092:	d050      	beq.n	8002136 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002094:	f7fe fe48 	bl	8000d28 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	69fa      	ldr	r2, [r7, #28]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d902      	bls.n	80020aa <SPI_WaitFlagStateUntilTimeout+0x56>
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d13d      	bne.n	8002126 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	685a      	ldr	r2, [r3, #4]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80020b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80020c2:	d111      	bne.n	80020e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020cc:	d004      	beq.n	80020d8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020d6:	d107      	bne.n	80020e8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020f0:	d10f      	bne.n	8002112 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002100:	601a      	str	r2, [r3, #0]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002110:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2201      	movs	r2, #1
 8002116:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2200      	movs	r2, #0
 800211e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e017      	b.n	8002156 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d101      	bne.n	8002130 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800212c:	2300      	movs	r3, #0
 800212e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	3b01      	subs	r3, #1
 8002134:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	689a      	ldr	r2, [r3, #8]
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	4013      	ands	r3, r2
 8002140:	68ba      	ldr	r2, [r7, #8]
 8002142:	429a      	cmp	r2, r3
 8002144:	bf0c      	ite	eq
 8002146:	2301      	moveq	r3, #1
 8002148:	2300      	movne	r3, #0
 800214a:	b2db      	uxtb	r3, r3
 800214c:	461a      	mov	r2, r3
 800214e:	79fb      	ldrb	r3, [r7, #7]
 8002150:	429a      	cmp	r2, r3
 8002152:	d19b      	bne.n	800208c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002154:	2300      	movs	r3, #0
}
 8002156:	4618      	mov	r0, r3
 8002158:	3720      	adds	r7, #32
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	20000000 	.word	0x20000000

08002164 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b088      	sub	sp, #32
 8002168:	af02      	add	r7, sp, #8
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	60b9      	str	r1, [r7, #8]
 800216e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	9300      	str	r3, [sp, #0]
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	2201      	movs	r2, #1
 8002178:	2102      	movs	r1, #2
 800217a:	68f8      	ldr	r0, [r7, #12]
 800217c:	f7ff ff6a 	bl	8002054 <SPI_WaitFlagStateUntilTimeout>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d007      	beq.n	8002196 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800218a:	f043 0220 	orr.w	r2, r3, #32
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e032      	b.n	80021fc <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002196:	4b1b      	ldr	r3, [pc, #108]	; (8002204 <SPI_EndRxTxTransaction+0xa0>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a1b      	ldr	r2, [pc, #108]	; (8002208 <SPI_EndRxTxTransaction+0xa4>)
 800219c:	fba2 2303 	umull	r2, r3, r2, r3
 80021a0:	0d5b      	lsrs	r3, r3, #21
 80021a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80021a6:	fb02 f303 	mul.w	r3, r2, r3
 80021aa:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80021b4:	d112      	bne.n	80021dc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	9300      	str	r3, [sp, #0]
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	2200      	movs	r2, #0
 80021be:	2180      	movs	r1, #128	; 0x80
 80021c0:	68f8      	ldr	r0, [r7, #12]
 80021c2:	f7ff ff47 	bl	8002054 <SPI_WaitFlagStateUntilTimeout>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d016      	beq.n	80021fa <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021d0:	f043 0220 	orr.w	r2, r3, #32
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80021d8:	2303      	movs	r3, #3
 80021da:	e00f      	b.n	80021fc <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d00a      	beq.n	80021f8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	3b01      	subs	r3, #1
 80021e6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021f2:	2b80      	cmp	r3, #128	; 0x80
 80021f4:	d0f2      	beq.n	80021dc <SPI_EndRxTxTransaction+0x78>
 80021f6:	e000      	b.n	80021fa <SPI_EndRxTxTransaction+0x96>
        break;
 80021f8:	bf00      	nop
  }

  return HAL_OK;
 80021fa:	2300      	movs	r3, #0
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3718      	adds	r7, #24
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	20000000 	.word	0x20000000
 8002208:	165e9f81 	.word	0x165e9f81

0800220c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d101      	bne.n	800221e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e042      	b.n	80022a4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2b00      	cmp	r3, #0
 8002228:	d106      	bne.n	8002238 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f7fe fc52 	bl	8000adc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2224      	movs	r2, #36	; 0x24
 800223c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	68da      	ldr	r2, [r3, #12]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800224e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f000 fcdb 	bl	8002c0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	691a      	ldr	r2, [r3, #16]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002264:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	695a      	ldr	r2, [r3, #20]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002274:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	68da      	ldr	r2, [r3, #12]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002284:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2220      	movs	r2, #32
 8002290:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2220      	movs	r2, #32
 8002298:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80022a2:	2300      	movs	r3, #0
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3708      	adds	r7, #8
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}

080022ac <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	60b9      	str	r1, [r7, #8]
 80022b6:	4613      	mov	r3, r2
 80022b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	2b20      	cmp	r3, #32
 80022c4:	d112      	bne.n	80022ec <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d002      	beq.n	80022d2 <HAL_UART_Receive_IT+0x26>
 80022cc:	88fb      	ldrh	r3, [r7, #6]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d101      	bne.n	80022d6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e00b      	b.n	80022ee <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2200      	movs	r2, #0
 80022da:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80022dc:	88fb      	ldrh	r3, [r7, #6]
 80022de:	461a      	mov	r2, r3
 80022e0:	68b9      	ldr	r1, [r7, #8]
 80022e2:	68f8      	ldr	r0, [r7, #12]
 80022e4:	f000 faba 	bl	800285c <UART_Start_Receive_IT>
 80022e8:	4603      	mov	r3, r0
 80022ea:	e000      	b.n	80022ee <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80022ec:	2302      	movs	r3, #2
  }
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3710      	adds	r7, #16
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
	...

080022f8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b0ba      	sub	sp, #232	; 0xe8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	695b      	ldr	r3, [r3, #20]
 800231a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800231e:	2300      	movs	r3, #0
 8002320:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002324:	2300      	movs	r3, #0
 8002326:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800232a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800232e:	f003 030f 	and.w	r3, r3, #15
 8002332:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002336:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800233a:	2b00      	cmp	r3, #0
 800233c:	d10f      	bne.n	800235e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800233e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002342:	f003 0320 	and.w	r3, r3, #32
 8002346:	2b00      	cmp	r3, #0
 8002348:	d009      	beq.n	800235e <HAL_UART_IRQHandler+0x66>
 800234a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800234e:	f003 0320 	and.w	r3, r3, #32
 8002352:	2b00      	cmp	r3, #0
 8002354:	d003      	beq.n	800235e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f000 fb99 	bl	8002a8e <UART_Receive_IT>
      return;
 800235c:	e25b      	b.n	8002816 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800235e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002362:	2b00      	cmp	r3, #0
 8002364:	f000 80de 	beq.w	8002524 <HAL_UART_IRQHandler+0x22c>
 8002368:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800236c:	f003 0301 	and.w	r3, r3, #1
 8002370:	2b00      	cmp	r3, #0
 8002372:	d106      	bne.n	8002382 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002374:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002378:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800237c:	2b00      	cmp	r3, #0
 800237e:	f000 80d1 	beq.w	8002524 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002382:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002386:	f003 0301 	and.w	r3, r3, #1
 800238a:	2b00      	cmp	r3, #0
 800238c:	d00b      	beq.n	80023a6 <HAL_UART_IRQHandler+0xae>
 800238e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002396:	2b00      	cmp	r3, #0
 8002398:	d005      	beq.n	80023a6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800239e:	f043 0201 	orr.w	r2, r3, #1
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80023a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023aa:	f003 0304 	and.w	r3, r3, #4
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d00b      	beq.n	80023ca <HAL_UART_IRQHandler+0xd2>
 80023b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80023b6:	f003 0301 	and.w	r3, r3, #1
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d005      	beq.n	80023ca <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c2:	f043 0202 	orr.w	r2, r3, #2
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80023ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d00b      	beq.n	80023ee <HAL_UART_IRQHandler+0xf6>
 80023d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80023da:	f003 0301 	and.w	r3, r3, #1
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d005      	beq.n	80023ee <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e6:	f043 0204 	orr.w	r2, r3, #4
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80023ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023f2:	f003 0308 	and.w	r3, r3, #8
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d011      	beq.n	800241e <HAL_UART_IRQHandler+0x126>
 80023fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023fe:	f003 0320 	and.w	r3, r3, #32
 8002402:	2b00      	cmp	r3, #0
 8002404:	d105      	bne.n	8002412 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002406:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	2b00      	cmp	r3, #0
 8002410:	d005      	beq.n	800241e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002416:	f043 0208 	orr.w	r2, r3, #8
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002422:	2b00      	cmp	r3, #0
 8002424:	f000 81f2 	beq.w	800280c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002428:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800242c:	f003 0320 	and.w	r3, r3, #32
 8002430:	2b00      	cmp	r3, #0
 8002432:	d008      	beq.n	8002446 <HAL_UART_IRQHandler+0x14e>
 8002434:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002438:	f003 0320 	and.w	r3, r3, #32
 800243c:	2b00      	cmp	r3, #0
 800243e:	d002      	beq.n	8002446 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f000 fb24 	bl	8002a8e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	695b      	ldr	r3, [r3, #20]
 800244c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002450:	2b40      	cmp	r3, #64	; 0x40
 8002452:	bf0c      	ite	eq
 8002454:	2301      	moveq	r3, #1
 8002456:	2300      	movne	r3, #0
 8002458:	b2db      	uxtb	r3, r3
 800245a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002462:	f003 0308 	and.w	r3, r3, #8
 8002466:	2b00      	cmp	r3, #0
 8002468:	d103      	bne.n	8002472 <HAL_UART_IRQHandler+0x17a>
 800246a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800246e:	2b00      	cmp	r3, #0
 8002470:	d04f      	beq.n	8002512 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f000 fa2c 	bl	80028d0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	695b      	ldr	r3, [r3, #20]
 800247e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002482:	2b40      	cmp	r3, #64	; 0x40
 8002484:	d141      	bne.n	800250a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	3314      	adds	r3, #20
 800248c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002490:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002494:	e853 3f00 	ldrex	r3, [r3]
 8002498:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800249c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80024a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80024a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	3314      	adds	r3, #20
 80024ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80024b2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80024b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80024be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80024c2:	e841 2300 	strex	r3, r2, [r1]
 80024c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80024ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d1d9      	bne.n	8002486 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d013      	beq.n	8002502 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024de:	4a7e      	ldr	r2, [pc, #504]	; (80026d8 <HAL_UART_IRQHandler+0x3e0>)
 80024e0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7fe fdcf 	bl	800108a <HAL_DMA_Abort_IT>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d016      	beq.n	8002520 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80024fc:	4610      	mov	r0, r2
 80024fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002500:	e00e      	b.n	8002520 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f000 f994 	bl	8002830 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002508:	e00a      	b.n	8002520 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f000 f990 	bl	8002830 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002510:	e006      	b.n	8002520 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f000 f98c 	bl	8002830 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2200      	movs	r2, #0
 800251c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800251e:	e175      	b.n	800280c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002520:	bf00      	nop
    return;
 8002522:	e173      	b.n	800280c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002528:	2b01      	cmp	r3, #1
 800252a:	f040 814f 	bne.w	80027cc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800252e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002532:	f003 0310 	and.w	r3, r3, #16
 8002536:	2b00      	cmp	r3, #0
 8002538:	f000 8148 	beq.w	80027cc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800253c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002540:	f003 0310 	and.w	r3, r3, #16
 8002544:	2b00      	cmp	r3, #0
 8002546:	f000 8141 	beq.w	80027cc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800254a:	2300      	movs	r3, #0
 800254c:	60bb      	str	r3, [r7, #8]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	60bb      	str	r3, [r7, #8]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	60bb      	str	r3, [r7, #8]
 800255e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	695b      	ldr	r3, [r3, #20]
 8002566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800256a:	2b40      	cmp	r3, #64	; 0x40
 800256c:	f040 80b6 	bne.w	80026dc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800257c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002580:	2b00      	cmp	r3, #0
 8002582:	f000 8145 	beq.w	8002810 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800258a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800258e:	429a      	cmp	r2, r3
 8002590:	f080 813e 	bcs.w	8002810 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800259a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025a0:	69db      	ldr	r3, [r3, #28]
 80025a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025a6:	f000 8088 	beq.w	80026ba <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	330c      	adds	r3, #12
 80025b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80025b8:	e853 3f00 	ldrex	r3, [r3]
 80025bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80025c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	330c      	adds	r3, #12
 80025d2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80025d6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80025da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025de:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80025e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80025e6:	e841 2300 	strex	r3, r2, [r1]
 80025ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80025ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d1d9      	bne.n	80025aa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	3314      	adds	r3, #20
 80025fc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002600:	e853 3f00 	ldrex	r3, [r3]
 8002604:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002606:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002608:	f023 0301 	bic.w	r3, r3, #1
 800260c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	3314      	adds	r3, #20
 8002616:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800261a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800261e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002620:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002622:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002626:	e841 2300 	strex	r3, r2, [r1]
 800262a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800262c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800262e:	2b00      	cmp	r3, #0
 8002630:	d1e1      	bne.n	80025f6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	3314      	adds	r3, #20
 8002638:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800263a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800263c:	e853 3f00 	ldrex	r3, [r3]
 8002640:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002642:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002644:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002648:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	3314      	adds	r3, #20
 8002652:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002656:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002658:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800265a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800265c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800265e:	e841 2300 	strex	r3, r2, [r1]
 8002662:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002664:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002666:	2b00      	cmp	r3, #0
 8002668:	d1e3      	bne.n	8002632 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2220      	movs	r2, #32
 800266e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	330c      	adds	r3, #12
 800267e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002680:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002682:	e853 3f00 	ldrex	r3, [r3]
 8002686:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002688:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800268a:	f023 0310 	bic.w	r3, r3, #16
 800268e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	330c      	adds	r3, #12
 8002698:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800269c:	65ba      	str	r2, [r7, #88]	; 0x58
 800269e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026a0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80026a2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80026a4:	e841 2300 	strex	r3, r2, [r1]
 80026a8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80026aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d1e3      	bne.n	8002678 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7fe fc78 	bl	8000faa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2202      	movs	r2, #2
 80026be:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	4619      	mov	r1, r3
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f000 f8b7 	bl	8002844 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80026d6:	e09b      	b.n	8002810 <HAL_UART_IRQHandler+0x518>
 80026d8:	08002997 	.word	0x08002997
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	f000 808e 	beq.w	8002814 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80026f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	f000 8089 	beq.w	8002814 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	330c      	adds	r3, #12
 8002708:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800270a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800270c:	e853 3f00 	ldrex	r3, [r3]
 8002710:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002714:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002718:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	330c      	adds	r3, #12
 8002722:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002726:	647a      	str	r2, [r7, #68]	; 0x44
 8002728:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800272a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800272c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800272e:	e841 2300 	strex	r3, r2, [r1]
 8002732:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002734:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002736:	2b00      	cmp	r3, #0
 8002738:	d1e3      	bne.n	8002702 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	3314      	adds	r3, #20
 8002740:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002744:	e853 3f00 	ldrex	r3, [r3]
 8002748:	623b      	str	r3, [r7, #32]
   return(result);
 800274a:	6a3b      	ldr	r3, [r7, #32]
 800274c:	f023 0301 	bic.w	r3, r3, #1
 8002750:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	3314      	adds	r3, #20
 800275a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800275e:	633a      	str	r2, [r7, #48]	; 0x30
 8002760:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002762:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002764:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002766:	e841 2300 	strex	r3, r2, [r1]
 800276a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800276c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800276e:	2b00      	cmp	r3, #0
 8002770:	d1e3      	bne.n	800273a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2220      	movs	r2, #32
 8002776:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	330c      	adds	r3, #12
 8002786:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	e853 3f00 	ldrex	r3, [r3]
 800278e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f023 0310 	bic.w	r3, r3, #16
 8002796:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	330c      	adds	r3, #12
 80027a0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80027a4:	61fa      	str	r2, [r7, #28]
 80027a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027a8:	69b9      	ldr	r1, [r7, #24]
 80027aa:	69fa      	ldr	r2, [r7, #28]
 80027ac:	e841 2300 	strex	r3, r2, [r1]
 80027b0:	617b      	str	r3, [r7, #20]
   return(result);
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d1e3      	bne.n	8002780 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2202      	movs	r2, #2
 80027bc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80027be:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80027c2:	4619      	mov	r1, r3
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f000 f83d 	bl	8002844 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80027ca:	e023      	b.n	8002814 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80027cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d009      	beq.n	80027ec <HAL_UART_IRQHandler+0x4f4>
 80027d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d003      	beq.n	80027ec <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f000 f8ea 	bl	80029be <UART_Transmit_IT>
    return;
 80027ea:	e014      	b.n	8002816 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80027ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d00e      	beq.n	8002816 <HAL_UART_IRQHandler+0x51e>
 80027f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002800:	2b00      	cmp	r3, #0
 8002802:	d008      	beq.n	8002816 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f000 f92a 	bl	8002a5e <UART_EndTransmit_IT>
    return;
 800280a:	e004      	b.n	8002816 <HAL_UART_IRQHandler+0x51e>
    return;
 800280c:	bf00      	nop
 800280e:	e002      	b.n	8002816 <HAL_UART_IRQHandler+0x51e>
      return;
 8002810:	bf00      	nop
 8002812:	e000      	b.n	8002816 <HAL_UART_IRQHandler+0x51e>
      return;
 8002814:	bf00      	nop
  }
}
 8002816:	37e8      	adds	r7, #232	; 0xe8
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}

0800281c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002824:	bf00      	nop
 8002826:	370c      	adds	r7, #12
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr

08002830 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002838:	bf00      	nop
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	460b      	mov	r3, r1
 800284e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002850:	bf00      	nop
 8002852:	370c      	adds	r7, #12
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr

0800285c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800285c:	b480      	push	{r7}
 800285e:	b085      	sub	sp, #20
 8002860:	af00      	add	r7, sp, #0
 8002862:	60f8      	str	r0, [r7, #12]
 8002864:	60b9      	str	r1, [r7, #8]
 8002866:	4613      	mov	r3, r2
 8002868:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	68ba      	ldr	r2, [r7, #8]
 800286e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	88fa      	ldrh	r2, [r7, #6]
 8002874:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	88fa      	ldrh	r2, [r7, #6]
 800287a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2200      	movs	r2, #0
 8002880:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2222      	movs	r2, #34	; 0x22
 8002886:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d007      	beq.n	80028a2 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	68da      	ldr	r2, [r3, #12]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028a0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	695a      	ldr	r2, [r3, #20]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f042 0201 	orr.w	r2, r2, #1
 80028b0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	68da      	ldr	r2, [r3, #12]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f042 0220 	orr.w	r2, r2, #32
 80028c0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80028c2:	2300      	movs	r3, #0
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3714      	adds	r7, #20
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b095      	sub	sp, #84	; 0x54
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	330c      	adds	r3, #12
 80028de:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028e2:	e853 3f00 	ldrex	r3, [r3]
 80028e6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80028e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80028ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	330c      	adds	r3, #12
 80028f6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80028f8:	643a      	str	r2, [r7, #64]	; 0x40
 80028fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80028fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002900:	e841 2300 	strex	r3, r2, [r1]
 8002904:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002908:	2b00      	cmp	r3, #0
 800290a:	d1e5      	bne.n	80028d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	3314      	adds	r3, #20
 8002912:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002914:	6a3b      	ldr	r3, [r7, #32]
 8002916:	e853 3f00 	ldrex	r3, [r3]
 800291a:	61fb      	str	r3, [r7, #28]
   return(result);
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	f023 0301 	bic.w	r3, r3, #1
 8002922:	64bb      	str	r3, [r7, #72]	; 0x48
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	3314      	adds	r3, #20
 800292a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800292c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800292e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002930:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002932:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002934:	e841 2300 	strex	r3, r2, [r1]
 8002938:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800293a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293c:	2b00      	cmp	r3, #0
 800293e:	d1e5      	bne.n	800290c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002944:	2b01      	cmp	r3, #1
 8002946:	d119      	bne.n	800297c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	330c      	adds	r3, #12
 800294e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	e853 3f00 	ldrex	r3, [r3]
 8002956:	60bb      	str	r3, [r7, #8]
   return(result);
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	f023 0310 	bic.w	r3, r3, #16
 800295e:	647b      	str	r3, [r7, #68]	; 0x44
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	330c      	adds	r3, #12
 8002966:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002968:	61ba      	str	r2, [r7, #24]
 800296a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800296c:	6979      	ldr	r1, [r7, #20]
 800296e:	69ba      	ldr	r2, [r7, #24]
 8002970:	e841 2300 	strex	r3, r2, [r1]
 8002974:	613b      	str	r3, [r7, #16]
   return(result);
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d1e5      	bne.n	8002948 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2220      	movs	r2, #32
 8002980:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	631a      	str	r2, [r3, #48]	; 0x30
}
 800298a:	bf00      	nop
 800298c:	3754      	adds	r7, #84	; 0x54
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr

08002996 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002996:	b580      	push	{r7, lr}
 8002998:	b084      	sub	sp, #16
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2200      	movs	r2, #0
 80029a8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2200      	movs	r2, #0
 80029ae:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80029b0:	68f8      	ldr	r0, [r7, #12]
 80029b2:	f7ff ff3d 	bl	8002830 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80029b6:	bf00      	nop
 80029b8:	3710      	adds	r7, #16
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}

080029be <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80029be:	b480      	push	{r7}
 80029c0:	b085      	sub	sp, #20
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b21      	cmp	r3, #33	; 0x21
 80029d0:	d13e      	bne.n	8002a50 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029da:	d114      	bne.n	8002a06 <UART_Transmit_IT+0x48>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	691b      	ldr	r3, [r3, #16]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d110      	bne.n	8002a06 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a1b      	ldr	r3, [r3, #32]
 80029e8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	881b      	ldrh	r3, [r3, #0]
 80029ee:	461a      	mov	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029f8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a1b      	ldr	r3, [r3, #32]
 80029fe:	1c9a      	adds	r2, r3, #2
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	621a      	str	r2, [r3, #32]
 8002a04:	e008      	b.n	8002a18 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a1b      	ldr	r3, [r3, #32]
 8002a0a:	1c59      	adds	r1, r3, #1
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	6211      	str	r1, [r2, #32]
 8002a10:	781a      	ldrb	r2, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	4619      	mov	r1, r3
 8002a26:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d10f      	bne.n	8002a4c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	68da      	ldr	r2, [r3, #12]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a3a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68da      	ldr	r2, [r3, #12]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a4a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	e000      	b.n	8002a52 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002a50:	2302      	movs	r3, #2
  }
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3714      	adds	r7, #20
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr

08002a5e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b082      	sub	sp, #8
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	68da      	ldr	r2, [r3, #12]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a74:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2220      	movs	r2, #32
 8002a7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f7ff fecc 	bl	800281c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3708      	adds	r7, #8
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}

08002a8e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002a8e:	b580      	push	{r7, lr}
 8002a90:	b08c      	sub	sp, #48	; 0x30
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	2b22      	cmp	r3, #34	; 0x22
 8002aa0:	f040 80ae 	bne.w	8002c00 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002aac:	d117      	bne.n	8002ade <UART_Receive_IT+0x50>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	691b      	ldr	r3, [r3, #16]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d113      	bne.n	8002ade <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002abe:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002acc:	b29a      	uxth	r2, r3
 8002ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ad0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad6:	1c9a      	adds	r2, r3, #2
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	629a      	str	r2, [r3, #40]	; 0x28
 8002adc:	e026      	b.n	8002b2c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002af0:	d007      	beq.n	8002b02 <UART_Receive_IT+0x74>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d10a      	bne.n	8002b10 <UART_Receive_IT+0x82>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	691b      	ldr	r3, [r3, #16]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d106      	bne.n	8002b10 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	b2da      	uxtb	r2, r3
 8002b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b0c:	701a      	strb	r2, [r3, #0]
 8002b0e:	e008      	b.n	8002b22 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b1c:	b2da      	uxtb	r2, r3
 8002b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b20:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b26:	1c5a      	adds	r2, r3, #1
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	3b01      	subs	r3, #1
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	4619      	mov	r1, r3
 8002b3a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d15d      	bne.n	8002bfc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	68da      	ldr	r2, [r3, #12]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f022 0220 	bic.w	r2, r2, #32
 8002b4e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68da      	ldr	r2, [r3, #12]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b5e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	695a      	ldr	r2, [r3, #20]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f022 0201 	bic.w	r2, r2, #1
 8002b6e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2220      	movs	r2, #32
 8002b74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d135      	bne.n	8002bf2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	330c      	adds	r3, #12
 8002b92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	e853 3f00 	ldrex	r3, [r3]
 8002b9a:	613b      	str	r3, [r7, #16]
   return(result);
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	f023 0310 	bic.w	r3, r3, #16
 8002ba2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	330c      	adds	r3, #12
 8002baa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bac:	623a      	str	r2, [r7, #32]
 8002bae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bb0:	69f9      	ldr	r1, [r7, #28]
 8002bb2:	6a3a      	ldr	r2, [r7, #32]
 8002bb4:	e841 2300 	strex	r3, r2, [r1]
 8002bb8:	61bb      	str	r3, [r7, #24]
   return(result);
 8002bba:	69bb      	ldr	r3, [r7, #24]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d1e5      	bne.n	8002b8c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0310 	and.w	r3, r3, #16
 8002bca:	2b10      	cmp	r3, #16
 8002bcc:	d10a      	bne.n	8002be4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002bce:	2300      	movs	r3, #0
 8002bd0:	60fb      	str	r3, [r7, #12]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	60fb      	str	r3, [r7, #12]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	60fb      	str	r3, [r7, #12]
 8002be2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002be8:	4619      	mov	r1, r3
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f7ff fe2a 	bl	8002844 <HAL_UARTEx_RxEventCallback>
 8002bf0:	e002      	b.n	8002bf8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f7fd fd40 	bl	8000678 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	e002      	b.n	8002c02 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	e000      	b.n	8002c02 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002c00:	2302      	movs	r3, #2
  }
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3730      	adds	r7, #48	; 0x30
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
	...

08002c0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c10:	b0c0      	sub	sp, #256	; 0x100
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	691b      	ldr	r3, [r3, #16]
 8002c20:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c28:	68d9      	ldr	r1, [r3, #12]
 8002c2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	ea40 0301 	orr.w	r3, r0, r1
 8002c34:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c3a:	689a      	ldr	r2, [r3, #8]
 8002c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	431a      	orrs	r2, r3
 8002c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c48:	695b      	ldr	r3, [r3, #20]
 8002c4a:	431a      	orrs	r2, r3
 8002c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c50:	69db      	ldr	r3, [r3, #28]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002c64:	f021 010c 	bic.w	r1, r1, #12
 8002c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002c72:	430b      	orrs	r3, r1
 8002c74:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	695b      	ldr	r3, [r3, #20]
 8002c7e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002c82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c86:	6999      	ldr	r1, [r3, #24]
 8002c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	ea40 0301 	orr.w	r3, r0, r1
 8002c92:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	4b8f      	ldr	r3, [pc, #572]	; (8002ed8 <UART_SetConfig+0x2cc>)
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d005      	beq.n	8002cac <UART_SetConfig+0xa0>
 8002ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	4b8d      	ldr	r3, [pc, #564]	; (8002edc <UART_SetConfig+0x2d0>)
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d104      	bne.n	8002cb6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002cac:	f7fe fff2 	bl	8001c94 <HAL_RCC_GetPCLK2Freq>
 8002cb0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002cb4:	e003      	b.n	8002cbe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002cb6:	f7fe ffd9 	bl	8001c6c <HAL_RCC_GetPCLK1Freq>
 8002cba:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cc2:	69db      	ldr	r3, [r3, #28]
 8002cc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cc8:	f040 810c 	bne.w	8002ee4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ccc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002cd6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002cda:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002cde:	4622      	mov	r2, r4
 8002ce0:	462b      	mov	r3, r5
 8002ce2:	1891      	adds	r1, r2, r2
 8002ce4:	65b9      	str	r1, [r7, #88]	; 0x58
 8002ce6:	415b      	adcs	r3, r3
 8002ce8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002cea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002cee:	4621      	mov	r1, r4
 8002cf0:	eb12 0801 	adds.w	r8, r2, r1
 8002cf4:	4629      	mov	r1, r5
 8002cf6:	eb43 0901 	adc.w	r9, r3, r1
 8002cfa:	f04f 0200 	mov.w	r2, #0
 8002cfe:	f04f 0300 	mov.w	r3, #0
 8002d02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d0e:	4690      	mov	r8, r2
 8002d10:	4699      	mov	r9, r3
 8002d12:	4623      	mov	r3, r4
 8002d14:	eb18 0303 	adds.w	r3, r8, r3
 8002d18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002d1c:	462b      	mov	r3, r5
 8002d1e:	eb49 0303 	adc.w	r3, r9, r3
 8002d22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002d26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002d32:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002d36:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	18db      	adds	r3, r3, r3
 8002d3e:	653b      	str	r3, [r7, #80]	; 0x50
 8002d40:	4613      	mov	r3, r2
 8002d42:	eb42 0303 	adc.w	r3, r2, r3
 8002d46:	657b      	str	r3, [r7, #84]	; 0x54
 8002d48:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002d4c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002d50:	f7fd fa40 	bl	80001d4 <__aeabi_uldivmod>
 8002d54:	4602      	mov	r2, r0
 8002d56:	460b      	mov	r3, r1
 8002d58:	4b61      	ldr	r3, [pc, #388]	; (8002ee0 <UART_SetConfig+0x2d4>)
 8002d5a:	fba3 2302 	umull	r2, r3, r3, r2
 8002d5e:	095b      	lsrs	r3, r3, #5
 8002d60:	011c      	lsls	r4, r3, #4
 8002d62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d66:	2200      	movs	r2, #0
 8002d68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002d6c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002d70:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002d74:	4642      	mov	r2, r8
 8002d76:	464b      	mov	r3, r9
 8002d78:	1891      	adds	r1, r2, r2
 8002d7a:	64b9      	str	r1, [r7, #72]	; 0x48
 8002d7c:	415b      	adcs	r3, r3
 8002d7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d80:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002d84:	4641      	mov	r1, r8
 8002d86:	eb12 0a01 	adds.w	sl, r2, r1
 8002d8a:	4649      	mov	r1, r9
 8002d8c:	eb43 0b01 	adc.w	fp, r3, r1
 8002d90:	f04f 0200 	mov.w	r2, #0
 8002d94:	f04f 0300 	mov.w	r3, #0
 8002d98:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002d9c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002da0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002da4:	4692      	mov	sl, r2
 8002da6:	469b      	mov	fp, r3
 8002da8:	4643      	mov	r3, r8
 8002daa:	eb1a 0303 	adds.w	r3, sl, r3
 8002dae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002db2:	464b      	mov	r3, r9
 8002db4:	eb4b 0303 	adc.w	r3, fp, r3
 8002db8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002dc8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002dcc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002dd0:	460b      	mov	r3, r1
 8002dd2:	18db      	adds	r3, r3, r3
 8002dd4:	643b      	str	r3, [r7, #64]	; 0x40
 8002dd6:	4613      	mov	r3, r2
 8002dd8:	eb42 0303 	adc.w	r3, r2, r3
 8002ddc:	647b      	str	r3, [r7, #68]	; 0x44
 8002dde:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002de2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002de6:	f7fd f9f5 	bl	80001d4 <__aeabi_uldivmod>
 8002dea:	4602      	mov	r2, r0
 8002dec:	460b      	mov	r3, r1
 8002dee:	4611      	mov	r1, r2
 8002df0:	4b3b      	ldr	r3, [pc, #236]	; (8002ee0 <UART_SetConfig+0x2d4>)
 8002df2:	fba3 2301 	umull	r2, r3, r3, r1
 8002df6:	095b      	lsrs	r3, r3, #5
 8002df8:	2264      	movs	r2, #100	; 0x64
 8002dfa:	fb02 f303 	mul.w	r3, r2, r3
 8002dfe:	1acb      	subs	r3, r1, r3
 8002e00:	00db      	lsls	r3, r3, #3
 8002e02:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002e06:	4b36      	ldr	r3, [pc, #216]	; (8002ee0 <UART_SetConfig+0x2d4>)
 8002e08:	fba3 2302 	umull	r2, r3, r3, r2
 8002e0c:	095b      	lsrs	r3, r3, #5
 8002e0e:	005b      	lsls	r3, r3, #1
 8002e10:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002e14:	441c      	add	r4, r3
 8002e16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002e20:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002e24:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002e28:	4642      	mov	r2, r8
 8002e2a:	464b      	mov	r3, r9
 8002e2c:	1891      	adds	r1, r2, r2
 8002e2e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002e30:	415b      	adcs	r3, r3
 8002e32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e34:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002e38:	4641      	mov	r1, r8
 8002e3a:	1851      	adds	r1, r2, r1
 8002e3c:	6339      	str	r1, [r7, #48]	; 0x30
 8002e3e:	4649      	mov	r1, r9
 8002e40:	414b      	adcs	r3, r1
 8002e42:	637b      	str	r3, [r7, #52]	; 0x34
 8002e44:	f04f 0200 	mov.w	r2, #0
 8002e48:	f04f 0300 	mov.w	r3, #0
 8002e4c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002e50:	4659      	mov	r1, fp
 8002e52:	00cb      	lsls	r3, r1, #3
 8002e54:	4651      	mov	r1, sl
 8002e56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e5a:	4651      	mov	r1, sl
 8002e5c:	00ca      	lsls	r2, r1, #3
 8002e5e:	4610      	mov	r0, r2
 8002e60:	4619      	mov	r1, r3
 8002e62:	4603      	mov	r3, r0
 8002e64:	4642      	mov	r2, r8
 8002e66:	189b      	adds	r3, r3, r2
 8002e68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002e6c:	464b      	mov	r3, r9
 8002e6e:	460a      	mov	r2, r1
 8002e70:	eb42 0303 	adc.w	r3, r2, r3
 8002e74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002e84:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002e88:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002e8c:	460b      	mov	r3, r1
 8002e8e:	18db      	adds	r3, r3, r3
 8002e90:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e92:	4613      	mov	r3, r2
 8002e94:	eb42 0303 	adc.w	r3, r2, r3
 8002e98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e9a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e9e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002ea2:	f7fd f997 	bl	80001d4 <__aeabi_uldivmod>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	460b      	mov	r3, r1
 8002eaa:	4b0d      	ldr	r3, [pc, #52]	; (8002ee0 <UART_SetConfig+0x2d4>)
 8002eac:	fba3 1302 	umull	r1, r3, r3, r2
 8002eb0:	095b      	lsrs	r3, r3, #5
 8002eb2:	2164      	movs	r1, #100	; 0x64
 8002eb4:	fb01 f303 	mul.w	r3, r1, r3
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	00db      	lsls	r3, r3, #3
 8002ebc:	3332      	adds	r3, #50	; 0x32
 8002ebe:	4a08      	ldr	r2, [pc, #32]	; (8002ee0 <UART_SetConfig+0x2d4>)
 8002ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec4:	095b      	lsrs	r3, r3, #5
 8002ec6:	f003 0207 	and.w	r2, r3, #7
 8002eca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4422      	add	r2, r4
 8002ed2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002ed4:	e106      	b.n	80030e4 <UART_SetConfig+0x4d8>
 8002ed6:	bf00      	nop
 8002ed8:	40011000 	.word	0x40011000
 8002edc:	40011400 	.word	0x40011400
 8002ee0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ee4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002eee:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002ef2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002ef6:	4642      	mov	r2, r8
 8002ef8:	464b      	mov	r3, r9
 8002efa:	1891      	adds	r1, r2, r2
 8002efc:	6239      	str	r1, [r7, #32]
 8002efe:	415b      	adcs	r3, r3
 8002f00:	627b      	str	r3, [r7, #36]	; 0x24
 8002f02:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002f06:	4641      	mov	r1, r8
 8002f08:	1854      	adds	r4, r2, r1
 8002f0a:	4649      	mov	r1, r9
 8002f0c:	eb43 0501 	adc.w	r5, r3, r1
 8002f10:	f04f 0200 	mov.w	r2, #0
 8002f14:	f04f 0300 	mov.w	r3, #0
 8002f18:	00eb      	lsls	r3, r5, #3
 8002f1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f1e:	00e2      	lsls	r2, r4, #3
 8002f20:	4614      	mov	r4, r2
 8002f22:	461d      	mov	r5, r3
 8002f24:	4643      	mov	r3, r8
 8002f26:	18e3      	adds	r3, r4, r3
 8002f28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002f2c:	464b      	mov	r3, r9
 8002f2e:	eb45 0303 	adc.w	r3, r5, r3
 8002f32:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002f36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002f42:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002f46:	f04f 0200 	mov.w	r2, #0
 8002f4a:	f04f 0300 	mov.w	r3, #0
 8002f4e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002f52:	4629      	mov	r1, r5
 8002f54:	008b      	lsls	r3, r1, #2
 8002f56:	4621      	mov	r1, r4
 8002f58:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f5c:	4621      	mov	r1, r4
 8002f5e:	008a      	lsls	r2, r1, #2
 8002f60:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002f64:	f7fd f936 	bl	80001d4 <__aeabi_uldivmod>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	460b      	mov	r3, r1
 8002f6c:	4b60      	ldr	r3, [pc, #384]	; (80030f0 <UART_SetConfig+0x4e4>)
 8002f6e:	fba3 2302 	umull	r2, r3, r3, r2
 8002f72:	095b      	lsrs	r3, r3, #5
 8002f74:	011c      	lsls	r4, r3, #4
 8002f76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002f80:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002f84:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002f88:	4642      	mov	r2, r8
 8002f8a:	464b      	mov	r3, r9
 8002f8c:	1891      	adds	r1, r2, r2
 8002f8e:	61b9      	str	r1, [r7, #24]
 8002f90:	415b      	adcs	r3, r3
 8002f92:	61fb      	str	r3, [r7, #28]
 8002f94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f98:	4641      	mov	r1, r8
 8002f9a:	1851      	adds	r1, r2, r1
 8002f9c:	6139      	str	r1, [r7, #16]
 8002f9e:	4649      	mov	r1, r9
 8002fa0:	414b      	adcs	r3, r1
 8002fa2:	617b      	str	r3, [r7, #20]
 8002fa4:	f04f 0200 	mov.w	r2, #0
 8002fa8:	f04f 0300 	mov.w	r3, #0
 8002fac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002fb0:	4659      	mov	r1, fp
 8002fb2:	00cb      	lsls	r3, r1, #3
 8002fb4:	4651      	mov	r1, sl
 8002fb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002fba:	4651      	mov	r1, sl
 8002fbc:	00ca      	lsls	r2, r1, #3
 8002fbe:	4610      	mov	r0, r2
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	4642      	mov	r2, r8
 8002fc6:	189b      	adds	r3, r3, r2
 8002fc8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002fcc:	464b      	mov	r3, r9
 8002fce:	460a      	mov	r2, r1
 8002fd0:	eb42 0303 	adc.w	r3, r2, r3
 8002fd4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	67bb      	str	r3, [r7, #120]	; 0x78
 8002fe2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002fe4:	f04f 0200 	mov.w	r2, #0
 8002fe8:	f04f 0300 	mov.w	r3, #0
 8002fec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002ff0:	4649      	mov	r1, r9
 8002ff2:	008b      	lsls	r3, r1, #2
 8002ff4:	4641      	mov	r1, r8
 8002ff6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ffa:	4641      	mov	r1, r8
 8002ffc:	008a      	lsls	r2, r1, #2
 8002ffe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003002:	f7fd f8e7 	bl	80001d4 <__aeabi_uldivmod>
 8003006:	4602      	mov	r2, r0
 8003008:	460b      	mov	r3, r1
 800300a:	4611      	mov	r1, r2
 800300c:	4b38      	ldr	r3, [pc, #224]	; (80030f0 <UART_SetConfig+0x4e4>)
 800300e:	fba3 2301 	umull	r2, r3, r3, r1
 8003012:	095b      	lsrs	r3, r3, #5
 8003014:	2264      	movs	r2, #100	; 0x64
 8003016:	fb02 f303 	mul.w	r3, r2, r3
 800301a:	1acb      	subs	r3, r1, r3
 800301c:	011b      	lsls	r3, r3, #4
 800301e:	3332      	adds	r3, #50	; 0x32
 8003020:	4a33      	ldr	r2, [pc, #204]	; (80030f0 <UART_SetConfig+0x4e4>)
 8003022:	fba2 2303 	umull	r2, r3, r2, r3
 8003026:	095b      	lsrs	r3, r3, #5
 8003028:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800302c:	441c      	add	r4, r3
 800302e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003032:	2200      	movs	r2, #0
 8003034:	673b      	str	r3, [r7, #112]	; 0x70
 8003036:	677a      	str	r2, [r7, #116]	; 0x74
 8003038:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800303c:	4642      	mov	r2, r8
 800303e:	464b      	mov	r3, r9
 8003040:	1891      	adds	r1, r2, r2
 8003042:	60b9      	str	r1, [r7, #8]
 8003044:	415b      	adcs	r3, r3
 8003046:	60fb      	str	r3, [r7, #12]
 8003048:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800304c:	4641      	mov	r1, r8
 800304e:	1851      	adds	r1, r2, r1
 8003050:	6039      	str	r1, [r7, #0]
 8003052:	4649      	mov	r1, r9
 8003054:	414b      	adcs	r3, r1
 8003056:	607b      	str	r3, [r7, #4]
 8003058:	f04f 0200 	mov.w	r2, #0
 800305c:	f04f 0300 	mov.w	r3, #0
 8003060:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003064:	4659      	mov	r1, fp
 8003066:	00cb      	lsls	r3, r1, #3
 8003068:	4651      	mov	r1, sl
 800306a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800306e:	4651      	mov	r1, sl
 8003070:	00ca      	lsls	r2, r1, #3
 8003072:	4610      	mov	r0, r2
 8003074:	4619      	mov	r1, r3
 8003076:	4603      	mov	r3, r0
 8003078:	4642      	mov	r2, r8
 800307a:	189b      	adds	r3, r3, r2
 800307c:	66bb      	str	r3, [r7, #104]	; 0x68
 800307e:	464b      	mov	r3, r9
 8003080:	460a      	mov	r2, r1
 8003082:	eb42 0303 	adc.w	r3, r2, r3
 8003086:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	663b      	str	r3, [r7, #96]	; 0x60
 8003092:	667a      	str	r2, [r7, #100]	; 0x64
 8003094:	f04f 0200 	mov.w	r2, #0
 8003098:	f04f 0300 	mov.w	r3, #0
 800309c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80030a0:	4649      	mov	r1, r9
 80030a2:	008b      	lsls	r3, r1, #2
 80030a4:	4641      	mov	r1, r8
 80030a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80030aa:	4641      	mov	r1, r8
 80030ac:	008a      	lsls	r2, r1, #2
 80030ae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80030b2:	f7fd f88f 	bl	80001d4 <__aeabi_uldivmod>
 80030b6:	4602      	mov	r2, r0
 80030b8:	460b      	mov	r3, r1
 80030ba:	4b0d      	ldr	r3, [pc, #52]	; (80030f0 <UART_SetConfig+0x4e4>)
 80030bc:	fba3 1302 	umull	r1, r3, r3, r2
 80030c0:	095b      	lsrs	r3, r3, #5
 80030c2:	2164      	movs	r1, #100	; 0x64
 80030c4:	fb01 f303 	mul.w	r3, r1, r3
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	011b      	lsls	r3, r3, #4
 80030cc:	3332      	adds	r3, #50	; 0x32
 80030ce:	4a08      	ldr	r2, [pc, #32]	; (80030f0 <UART_SetConfig+0x4e4>)
 80030d0:	fba2 2303 	umull	r2, r3, r2, r3
 80030d4:	095b      	lsrs	r3, r3, #5
 80030d6:	f003 020f 	and.w	r2, r3, #15
 80030da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4422      	add	r2, r4
 80030e2:	609a      	str	r2, [r3, #8]
}
 80030e4:	bf00      	nop
 80030e6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80030ea:	46bd      	mov	sp, r7
 80030ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030f0:	51eb851f 	.word	0x51eb851f

080030f4 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	7c1b      	ldrb	r3, [r3, #16]
 8003102:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800310a:	461a      	mov	r2, r3
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	fb02 f303 	mul.w	r3, r2, r3
 8003112:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	00db      	lsls	r3, r3, #3
 8003118:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800311e:	68fa      	ldr	r2, [r7, #12]
 8003120:	2100      	movs	r1, #0
 8003122:	4618      	mov	r0, r3
 8003124:	f001 ff17 	bl	8004f56 <memset>
}
 8003128:	bf00      	nop
 800312a:	3710      	adds	r7, #16
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}

08003130 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b086      	sub	sp, #24
 8003134:	af02      	add	r7, sp, #8
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	460b      	mov	r3, r1
 800313a:	70fb      	strb	r3, [r7, #3]
 800313c:	4613      	mov	r3, r2
 800313e:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	7c1b      	ldrb	r3, [r3, #16]
 8003146:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8003148:	78fb      	ldrb	r3, [r7, #3]
 800314a:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003150:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8003152:	7bfb      	ldrb	r3, [r7, #15]
 8003154:	b29b      	uxth	r3, r3
 8003156:	89ba      	ldrh	r2, [r7, #12]
 8003158:	fb12 f303 	smulbb	r3, r2, r3
 800315c:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 800315e:	89bb      	ldrh	r3, [r7, #12]
 8003160:	00db      	lsls	r3, r3, #3
 8003162:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8003164:	89bb      	ldrh	r3, [r7, #12]
 8003166:	68ba      	ldr	r2, [r7, #8]
 8003168:	4413      	add	r3, r2
 800316a:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 800316c:	7bf9      	ldrb	r1, [r7, #15]
 800316e:	78ba      	ldrb	r2, [r7, #2]
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	9300      	str	r3, [sp, #0]
 8003174:	460b      	mov	r3, r1
 8003176:	2100      	movs	r1, #0
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f001 fe1e 	bl	8004dba <u8x8_DrawTile>
}
 800317e:	bf00      	nop
 8003180:	3710      	adds	r7, #16
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}

08003186 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8003186:	b580      	push	{r7, lr}
 8003188:	b084      	sub	sp, #16
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 800318e:	2300      	movs	r3, #0
 8003190:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003198:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80031a0:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	7c5b      	ldrb	r3, [r3, #17]
 80031a8:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 80031aa:	7bba      	ldrb	r2, [r7, #14]
 80031ac:	7bfb      	ldrb	r3, [r7, #15]
 80031ae:	4619      	mov	r1, r3
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f7ff ffbd 	bl	8003130 <u8g2_send_tile_row>
    src_row++;
 80031b6:	7bfb      	ldrb	r3, [r7, #15]
 80031b8:	3301      	adds	r3, #1
 80031ba:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 80031bc:	7bbb      	ldrb	r3, [r7, #14]
 80031be:	3301      	adds	r3, #1
 80031c0:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 80031c2:	7bfa      	ldrb	r2, [r7, #15]
 80031c4:	7b7b      	ldrb	r3, [r7, #13]
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d203      	bcs.n	80031d2 <u8g2_send_buffer+0x4c>
 80031ca:	7bba      	ldrb	r2, [r7, #14]
 80031cc:	7b3b      	ldrb	r3, [r7, #12]
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d3eb      	bcc.n	80031aa <u8g2_send_buffer+0x24>
}
 80031d2:	bf00      	nop
 80031d4:	3710      	adds	r7, #16
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}

080031da <u8g2_SetBufferCurrTileRow>:
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
}

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 80031da:	b580      	push	{r7, lr}
 80031dc:	b082      	sub	sp, #8
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
 80031e2:	460b      	mov	r3, r1
 80031e4:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	78fa      	ldrb	r2, [r7, #3]
 80031ea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  u8g2->cb->update_dimension(u8g2);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	4798      	blx	r3
}
 8003202:	bf00      	nop
 8003204:	3708      	adds	r7, #8
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}

0800320a <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 800320a:	b580      	push	{r7, lr}
 800320c:	b082      	sub	sp, #8
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8003218:	2b00      	cmp	r3, #0
 800321a:	d002      	beq.n	8003222 <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f7ff ff69 	bl	80030f4 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 8003222:	2100      	movs	r1, #0
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f7ff ffd8 	bl	80031da <u8g2_SetBufferCurrTileRow>
}
 800322a:	bf00      	nop
 800322c:	3708      	adds	r7, #8
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}

08003232 <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 8003232:	b580      	push	{r7, lr}
 8003234:	b084      	sub	sp, #16
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f7ff ffa3 	bl	8003186 <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003246:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 800324e:	7bfb      	ldrb	r3, [r7, #15]
 8003250:	4413      	add	r3, r2
 8003252:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	7c5b      	ldrb	r3, [r3, #17]
 800325a:	7bfa      	ldrb	r2, [r7, #15]
 800325c:	429a      	cmp	r2, r3
 800325e:	d304      	bcc.n	800326a <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f001 fdfb 	bl	8004e5c <u8x8_RefreshDisplay>
    return 0;
 8003266:	2300      	movs	r3, #0
 8003268:	e00d      	b.n	8003286 <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8003270:	2b00      	cmp	r3, #0
 8003272:	d002      	beq.n	800327a <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f7ff ff3d 	bl	80030f4 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 800327a:	7bfb      	ldrb	r3, [r7, #15]
 800327c:	4619      	mov	r1, r3
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f7ff ffab 	bl	80031da <u8g2_SetBufferCurrTileRow>
  return 1;
 8003284:	2301      	movs	r3, #1
}
 8003286:	4618      	mov	r0, r3
 8003288:	3710      	adds	r7, #16
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}

0800328e <u8g2_draw_circle_section>:
/* Circle */

static void u8g2_draw_circle_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option) U8G2_NOINLINE;

static void u8g2_draw_circle_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option)
{
 800328e:	b580      	push	{r7, lr}
 8003290:	b084      	sub	sp, #16
 8003292:	af00      	add	r7, sp, #0
 8003294:	60f8      	str	r0, [r7, #12]
 8003296:	4608      	mov	r0, r1
 8003298:	4611      	mov	r1, r2
 800329a:	461a      	mov	r2, r3
 800329c:	4603      	mov	r3, r0
 800329e:	817b      	strh	r3, [r7, #10]
 80032a0:	460b      	mov	r3, r1
 80032a2:	813b      	strh	r3, [r7, #8]
 80032a4:	4613      	mov	r3, r2
 80032a6:	80fb      	strh	r3, [r7, #6]
    /* upper right */
    if ( option & U8G2_DRAW_UPPER_RIGHT )
 80032a8:	7f3b      	ldrb	r3, [r7, #28]
 80032aa:	f003 0301 	and.w	r3, r3, #1
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d017      	beq.n	80032e2 <u8g2_draw_circle_section+0x54>
    {
      u8g2_DrawPixel(u8g2, x0 + x, y0 - y);
 80032b2:	88fa      	ldrh	r2, [r7, #6]
 80032b4:	897b      	ldrh	r3, [r7, #10]
 80032b6:	4413      	add	r3, r2
 80032b8:	b299      	uxth	r1, r3
 80032ba:	8b3a      	ldrh	r2, [r7, #24]
 80032bc:	893b      	ldrh	r3, [r7, #8]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	461a      	mov	r2, r3
 80032c4:	68f8      	ldr	r0, [r7, #12]
 80032c6:	f000 ffd7 	bl	8004278 <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 + y, y0 - x);
 80032ca:	88fa      	ldrh	r2, [r7, #6]
 80032cc:	893b      	ldrh	r3, [r7, #8]
 80032ce:	4413      	add	r3, r2
 80032d0:	b299      	uxth	r1, r3
 80032d2:	8b3a      	ldrh	r2, [r7, #24]
 80032d4:	897b      	ldrh	r3, [r7, #10]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	b29b      	uxth	r3, r3
 80032da:	461a      	mov	r2, r3
 80032dc:	68f8      	ldr	r0, [r7, #12]
 80032de:	f000 ffcb 	bl	8004278 <u8g2_DrawPixel>
    }
    
    /* upper left */
    if ( option & U8G2_DRAW_UPPER_LEFT )
 80032e2:	7f3b      	ldrb	r3, [r7, #28]
 80032e4:	f003 0302 	and.w	r3, r3, #2
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d017      	beq.n	800331c <u8g2_draw_circle_section+0x8e>
    {
      u8g2_DrawPixel(u8g2, x0 - x, y0 - y);
 80032ec:	88fa      	ldrh	r2, [r7, #6]
 80032ee:	897b      	ldrh	r3, [r7, #10]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	b299      	uxth	r1, r3
 80032f4:	8b3a      	ldrh	r2, [r7, #24]
 80032f6:	893b      	ldrh	r3, [r7, #8]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	461a      	mov	r2, r3
 80032fe:	68f8      	ldr	r0, [r7, #12]
 8003300:	f000 ffba 	bl	8004278 <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 - y, y0 - x);
 8003304:	88fa      	ldrh	r2, [r7, #6]
 8003306:	893b      	ldrh	r3, [r7, #8]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	b299      	uxth	r1, r3
 800330c:	8b3a      	ldrh	r2, [r7, #24]
 800330e:	897b      	ldrh	r3, [r7, #10]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	b29b      	uxth	r3, r3
 8003314:	461a      	mov	r2, r3
 8003316:	68f8      	ldr	r0, [r7, #12]
 8003318:	f000 ffae 	bl	8004278 <u8g2_DrawPixel>
    }
    
    /* lower right */
    if ( option & U8G2_DRAW_LOWER_RIGHT )
 800331c:	7f3b      	ldrb	r3, [r7, #28]
 800331e:	f003 0308 	and.w	r3, r3, #8
 8003322:	2b00      	cmp	r3, #0
 8003324:	d017      	beq.n	8003356 <u8g2_draw_circle_section+0xc8>
    {
      u8g2_DrawPixel(u8g2, x0 + x, y0 + y);
 8003326:	88fa      	ldrh	r2, [r7, #6]
 8003328:	897b      	ldrh	r3, [r7, #10]
 800332a:	4413      	add	r3, r2
 800332c:	b299      	uxth	r1, r3
 800332e:	8b3a      	ldrh	r2, [r7, #24]
 8003330:	893b      	ldrh	r3, [r7, #8]
 8003332:	4413      	add	r3, r2
 8003334:	b29b      	uxth	r3, r3
 8003336:	461a      	mov	r2, r3
 8003338:	68f8      	ldr	r0, [r7, #12]
 800333a:	f000 ff9d 	bl	8004278 <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 + y, y0 + x);
 800333e:	88fa      	ldrh	r2, [r7, #6]
 8003340:	893b      	ldrh	r3, [r7, #8]
 8003342:	4413      	add	r3, r2
 8003344:	b299      	uxth	r1, r3
 8003346:	8b3a      	ldrh	r2, [r7, #24]
 8003348:	897b      	ldrh	r3, [r7, #10]
 800334a:	4413      	add	r3, r2
 800334c:	b29b      	uxth	r3, r3
 800334e:	461a      	mov	r2, r3
 8003350:	68f8      	ldr	r0, [r7, #12]
 8003352:	f000 ff91 	bl	8004278 <u8g2_DrawPixel>
    }
    
    /* lower left */
    if ( option & U8G2_DRAW_LOWER_LEFT )
 8003356:	7f3b      	ldrb	r3, [r7, #28]
 8003358:	f003 0304 	and.w	r3, r3, #4
 800335c:	2b00      	cmp	r3, #0
 800335e:	d017      	beq.n	8003390 <u8g2_draw_circle_section+0x102>
    {
      u8g2_DrawPixel(u8g2, x0 - x, y0 + y);
 8003360:	88fa      	ldrh	r2, [r7, #6]
 8003362:	897b      	ldrh	r3, [r7, #10]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	b299      	uxth	r1, r3
 8003368:	8b3a      	ldrh	r2, [r7, #24]
 800336a:	893b      	ldrh	r3, [r7, #8]
 800336c:	4413      	add	r3, r2
 800336e:	b29b      	uxth	r3, r3
 8003370:	461a      	mov	r2, r3
 8003372:	68f8      	ldr	r0, [r7, #12]
 8003374:	f000 ff80 	bl	8004278 <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 - y, y0 + x);
 8003378:	88fa      	ldrh	r2, [r7, #6]
 800337a:	893b      	ldrh	r3, [r7, #8]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	b299      	uxth	r1, r3
 8003380:	8b3a      	ldrh	r2, [r7, #24]
 8003382:	897b      	ldrh	r3, [r7, #10]
 8003384:	4413      	add	r3, r2
 8003386:	b29b      	uxth	r3, r3
 8003388:	461a      	mov	r2, r3
 800338a:	68f8      	ldr	r0, [r7, #12]
 800338c:	f000 ff74 	bl	8004278 <u8g2_DrawPixel>
    }
}
 8003390:	bf00      	nop
 8003392:	3710      	adds	r7, #16
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}

08003398 <u8g2_draw_circle>:

static void u8g2_draw_circle(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b08a      	sub	sp, #40	; 0x28
 800339c:	af02      	add	r7, sp, #8
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	4608      	mov	r0, r1
 80033a2:	4611      	mov	r1, r2
 80033a4:	461a      	mov	r2, r3
 80033a6:	4603      	mov	r3, r0
 80033a8:	817b      	strh	r3, [r7, #10]
 80033aa:	460b      	mov	r3, r1
 80033ac:	813b      	strh	r3, [r7, #8]
 80033ae:	4613      	mov	r3, r2
 80033b0:	80fb      	strh	r3, [r7, #6]
    u8g2_int_t ddF_x;
    u8g2_int_t ddF_y;
    u8g2_uint_t x;
    u8g2_uint_t y;

    f = 1;
 80033b2:	2301      	movs	r3, #1
 80033b4:	83fb      	strh	r3, [r7, #30]
    f -= rad;
 80033b6:	8bfa      	ldrh	r2, [r7, #30]
 80033b8:	88fb      	ldrh	r3, [r7, #6]
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	b29b      	uxth	r3, r3
 80033be:	83fb      	strh	r3, [r7, #30]
    ddF_x = 1;
 80033c0:	2301      	movs	r3, #1
 80033c2:	83bb      	strh	r3, [r7, #28]
    ddF_y = 0;
 80033c4:	2300      	movs	r3, #0
 80033c6:	837b      	strh	r3, [r7, #26]
    ddF_y -= rad;
 80033c8:	8b7a      	ldrh	r2, [r7, #26]
 80033ca:	88fb      	ldrh	r3, [r7, #6]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	837b      	strh	r3, [r7, #26]
    ddF_y *= 2;
 80033d2:	8b7b      	ldrh	r3, [r7, #26]
 80033d4:	005b      	lsls	r3, r3, #1
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	837b      	strh	r3, [r7, #26]
    x = 0;
 80033da:	2300      	movs	r3, #0
 80033dc:	833b      	strh	r3, [r7, #24]
    y = rad;
 80033de:	88fb      	ldrh	r3, [r7, #6]
 80033e0:	82fb      	strh	r3, [r7, #22]

    u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);
 80033e2:	8978      	ldrh	r0, [r7, #10]
 80033e4:	8afa      	ldrh	r2, [r7, #22]
 80033e6:	8b39      	ldrh	r1, [r7, #24]
 80033e8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80033ec:	9301      	str	r3, [sp, #4]
 80033ee:	893b      	ldrh	r3, [r7, #8]
 80033f0:	9300      	str	r3, [sp, #0]
 80033f2:	4603      	mov	r3, r0
 80033f4:	68f8      	ldr	r0, [r7, #12]
 80033f6:	f7ff ff4a 	bl	800328e <u8g2_draw_circle_section>
    
    while ( x < y )
 80033fa:	e027      	b.n	800344c <u8g2_draw_circle+0xb4>
    {
      if (f >= 0) 
 80033fc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003400:	2b00      	cmp	r3, #0
 8003402:	db0b      	blt.n	800341c <u8g2_draw_circle+0x84>
      {
        y--;
 8003404:	8afb      	ldrh	r3, [r7, #22]
 8003406:	3b01      	subs	r3, #1
 8003408:	82fb      	strh	r3, [r7, #22]
        ddF_y += 2;
 800340a:	8b7b      	ldrh	r3, [r7, #26]
 800340c:	3302      	adds	r3, #2
 800340e:	b29b      	uxth	r3, r3
 8003410:	837b      	strh	r3, [r7, #26]
        f += ddF_y;
 8003412:	8bfa      	ldrh	r2, [r7, #30]
 8003414:	8b7b      	ldrh	r3, [r7, #26]
 8003416:	4413      	add	r3, r2
 8003418:	b29b      	uxth	r3, r3
 800341a:	83fb      	strh	r3, [r7, #30]
      }
      x++;
 800341c:	8b3b      	ldrh	r3, [r7, #24]
 800341e:	3301      	adds	r3, #1
 8003420:	833b      	strh	r3, [r7, #24]
      ddF_x += 2;
 8003422:	8bbb      	ldrh	r3, [r7, #28]
 8003424:	3302      	adds	r3, #2
 8003426:	b29b      	uxth	r3, r3
 8003428:	83bb      	strh	r3, [r7, #28]
      f += ddF_x;
 800342a:	8bfa      	ldrh	r2, [r7, #30]
 800342c:	8bbb      	ldrh	r3, [r7, #28]
 800342e:	4413      	add	r3, r2
 8003430:	b29b      	uxth	r3, r3
 8003432:	83fb      	strh	r3, [r7, #30]

      u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);    
 8003434:	8978      	ldrh	r0, [r7, #10]
 8003436:	8afa      	ldrh	r2, [r7, #22]
 8003438:	8b39      	ldrh	r1, [r7, #24]
 800343a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800343e:	9301      	str	r3, [sp, #4]
 8003440:	893b      	ldrh	r3, [r7, #8]
 8003442:	9300      	str	r3, [sp, #0]
 8003444:	4603      	mov	r3, r0
 8003446:	68f8      	ldr	r0, [r7, #12]
 8003448:	f7ff ff21 	bl	800328e <u8g2_draw_circle_section>
    while ( x < y )
 800344c:	8b3a      	ldrh	r2, [r7, #24]
 800344e:	8afb      	ldrh	r3, [r7, #22]
 8003450:	429a      	cmp	r2, r3
 8003452:	d3d3      	bcc.n	80033fc <u8g2_draw_circle+0x64>
    }
}
 8003454:	bf00      	nop
 8003456:	bf00      	nop
 8003458:	3720      	adds	r7, #32
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <u8g2_DrawCircle>:

void u8g2_DrawCircle(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
{
 800345e:	b590      	push	{r4, r7, lr}
 8003460:	b087      	sub	sp, #28
 8003462:	af02      	add	r7, sp, #8
 8003464:	60f8      	str	r0, [r7, #12]
 8003466:	4608      	mov	r0, r1
 8003468:	4611      	mov	r1, r2
 800346a:	461a      	mov	r2, r3
 800346c:	4603      	mov	r3, r0
 800346e:	817b      	strh	r3, [r7, #10]
 8003470:	460b      	mov	r3, r1
 8003472:	813b      	strh	r3, [r7, #8]
 8003474:	4613      	mov	r3, r2
 8003476:	80fb      	strh	r3, [r7, #6]
  /* check for bounding box */
#ifdef U8G2_WITH_INTERSECTION
  {
    if ( u8g2_IsIntersection(u8g2, x0-rad, y0-rad, x0+rad+1, y0+rad+1) == 0 ) 
 8003478:	897a      	ldrh	r2, [r7, #10]
 800347a:	88fb      	ldrh	r3, [r7, #6]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	b299      	uxth	r1, r3
 8003480:	893a      	ldrh	r2, [r7, #8]
 8003482:	88fb      	ldrh	r3, [r7, #6]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	b298      	uxth	r0, r3
 8003488:	897a      	ldrh	r2, [r7, #10]
 800348a:	88fb      	ldrh	r3, [r7, #6]
 800348c:	4413      	add	r3, r2
 800348e:	b29b      	uxth	r3, r3
 8003490:	3301      	adds	r3, #1
 8003492:	b29c      	uxth	r4, r3
 8003494:	893a      	ldrh	r2, [r7, #8]
 8003496:	88fb      	ldrh	r3, [r7, #6]
 8003498:	4413      	add	r3, r2
 800349a:	b29b      	uxth	r3, r3
 800349c:	3301      	adds	r3, #1
 800349e:	b29b      	uxth	r3, r3
 80034a0:	9300      	str	r3, [sp, #0]
 80034a2:	4623      	mov	r3, r4
 80034a4:	4602      	mov	r2, r0
 80034a6:	68f8      	ldr	r0, [r7, #12]
 80034a8:	f000 ff4c 	bl	8004344 <u8g2_IsIntersection>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d00a      	beq.n	80034c8 <u8g2_DrawCircle+0x6a>
  }
#endif /* U8G2_WITH_INTERSECTION */
  
  
  /* draw circle */
  u8g2_draw_circle(u8g2, x0, y0, rad, option);
 80034b2:	88f8      	ldrh	r0, [r7, #6]
 80034b4:	893a      	ldrh	r2, [r7, #8]
 80034b6:	8979      	ldrh	r1, [r7, #10]
 80034b8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80034bc:	9300      	str	r3, [sp, #0]
 80034be:	4603      	mov	r3, r0
 80034c0:	68f8      	ldr	r0, [r7, #12]
 80034c2:	f7ff ff69 	bl	8003398 <u8g2_draw_circle>
 80034c6:	e000      	b.n	80034ca <u8g2_DrawCircle+0x6c>
      return;
 80034c8:	bf00      	nop
}
 80034ca:	3714      	adds	r7, #20
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd90      	pop	{r4, r7, pc}

080034d0 <u8g2_m_16_16_1>:
  *page_cnt = 16;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_16_1(uint8_t *page_cnt)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 1;
  return 0;
  #else
  static uint8_t buf[128];
  *page_cnt = 1;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	701a      	strb	r2, [r3, #0]
  return buf;
 80034de:	4b03      	ldr	r3, [pc, #12]	; (80034ec <u8g2_m_16_16_1+0x1c>)
  #endif
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	370c      	adds	r7, #12
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr
 80034ec:	20000188 	.word	0x20000188

080034f0 <u8g2_Setup_sh1107_pimoroni_128x128_1>:
  u8g2_SetupDisplay(u8g2, u8x8_d_sh1107_128x128, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
  buf = u8g2_m_16_16_1(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
void u8g2_Setup_sh1107_pimoroni_128x128_1(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b088      	sub	sp, #32
 80034f4:	af02      	add	r7, sp, #8
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	607a      	str	r2, [r7, #4]
 80034fc:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_sh1107_pimoroni_128x128, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	9300      	str	r3, [sp, #0]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a0b      	ldr	r2, [pc, #44]	; (8003534 <u8g2_Setup_sh1107_pimoroni_128x128_1+0x44>)
 8003506:	490c      	ldr	r1, [pc, #48]	; (8003538 <u8g2_Setup_sh1107_pimoroni_128x128_1+0x48>)
 8003508:	68f8      	ldr	r0, [r7, #12]
 800350a:	f001 fd07 	bl	8004f1c <u8x8_Setup>
  buf = u8g2_m_16_16_1(&tile_buf_height);
 800350e:	f107 0313 	add.w	r3, r7, #19
 8003512:	4618      	mov	r0, r3
 8003514:	f7ff ffdc 	bl	80034d0 <u8g2_m_16_16_1>
 8003518:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 800351a:	7cfa      	ldrb	r2, [r7, #19]
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	9300      	str	r3, [sp, #0]
 8003520:	4b06      	ldr	r3, [pc, #24]	; (800353c <u8g2_Setup_sh1107_pimoroni_128x128_1+0x4c>)
 8003522:	6979      	ldr	r1, [r7, #20]
 8003524:	68f8      	ldr	r0, [r7, #12]
 8003526:	f001 f891 	bl	800464c <u8g2_SetupBuffer>
}
 800352a:	bf00      	nop
 800352c:	3718      	adds	r7, #24
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	08004ae5 	.word	0x08004ae5
 8003538:	08004cb5 	.word	0x08004cb5
 800353c:	080044cf 	.word	0x080044cf

08003540 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	460b      	mov	r3, r1
 800354a:	70fb      	strb	r3, [r7, #3]
  font += offset;
 800354c:	78fb      	ldrb	r3, [r7, #3]
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	4413      	add	r3, r2
 8003552:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	781b      	ldrb	r3, [r3, #0]
}
 8003558:	4618      	mov	r0, r3
 800355a:	370c      	adds	r7, #12
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr

08003564 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 8003564:	b480      	push	{r7}
 8003566:	b085      	sub	sp, #20
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	460b      	mov	r3, r1
 800356e:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 8003570:	78fb      	ldrb	r3, [r7, #3]
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	4413      	add	r3, r2
 8003576:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	81fb      	strh	r3, [r7, #14]
    font++;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	3301      	adds	r3, #1
 8003582:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 8003584:	89fb      	ldrh	r3, [r7, #14]
 8003586:	021b      	lsls	r3, r3, #8
 8003588:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	b29a      	uxth	r2, r3
 8003590:	89fb      	ldrh	r3, [r7, #14]
 8003592:	4413      	add	r3, r2
 8003594:	81fb      	strh	r3, [r7, #14]
    return pos;
 8003596:	89fb      	ldrh	r3, [r7, #14]
}
 8003598:	4618      	mov	r0, r3
 800359a:	3714      	adds	r7, #20
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr

080035a4 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 80035ae:	2100      	movs	r1, #0
 80035b0:	6838      	ldr	r0, [r7, #0]
 80035b2:	f7ff ffc5 	bl	8003540 <u8g2_font_get_byte>
 80035b6:	4603      	mov	r3, r0
 80035b8:	461a      	mov	r2, r3
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 80035be:	2101      	movs	r1, #1
 80035c0:	6838      	ldr	r0, [r7, #0]
 80035c2:	f7ff ffbd 	bl	8003540 <u8g2_font_get_byte>
 80035c6:	4603      	mov	r3, r0
 80035c8:	461a      	mov	r2, r3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 80035ce:	2102      	movs	r1, #2
 80035d0:	6838      	ldr	r0, [r7, #0]
 80035d2:	f7ff ffb5 	bl	8003540 <u8g2_font_get_byte>
 80035d6:	4603      	mov	r3, r0
 80035d8:	461a      	mov	r2, r3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 80035de:	2103      	movs	r1, #3
 80035e0:	6838      	ldr	r0, [r7, #0]
 80035e2:	f7ff ffad 	bl	8003540 <u8g2_font_get_byte>
 80035e6:	4603      	mov	r3, r0
 80035e8:	461a      	mov	r2, r3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 80035ee:	2104      	movs	r1, #4
 80035f0:	6838      	ldr	r0, [r7, #0]
 80035f2:	f7ff ffa5 	bl	8003540 <u8g2_font_get_byte>
 80035f6:	4603      	mov	r3, r0
 80035f8:	461a      	mov	r2, r3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 80035fe:	2105      	movs	r1, #5
 8003600:	6838      	ldr	r0, [r7, #0]
 8003602:	f7ff ff9d 	bl	8003540 <u8g2_font_get_byte>
 8003606:	4603      	mov	r3, r0
 8003608:	461a      	mov	r2, r3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 800360e:	2106      	movs	r1, #6
 8003610:	6838      	ldr	r0, [r7, #0]
 8003612:	f7ff ff95 	bl	8003540 <u8g2_font_get_byte>
 8003616:	4603      	mov	r3, r0
 8003618:	461a      	mov	r2, r3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 800361e:	2107      	movs	r1, #7
 8003620:	6838      	ldr	r0, [r7, #0]
 8003622:	f7ff ff8d 	bl	8003540 <u8g2_font_get_byte>
 8003626:	4603      	mov	r3, r0
 8003628:	461a      	mov	r2, r3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 800362e:	2108      	movs	r1, #8
 8003630:	6838      	ldr	r0, [r7, #0]
 8003632:	f7ff ff85 	bl	8003540 <u8g2_font_get_byte>
 8003636:	4603      	mov	r3, r0
 8003638:	461a      	mov	r2, r3
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 800363e:	2109      	movs	r1, #9
 8003640:	6838      	ldr	r0, [r7, #0]
 8003642:	f7ff ff7d 	bl	8003540 <u8g2_font_get_byte>
 8003646:	4603      	mov	r3, r0
 8003648:	b25a      	sxtb	r2, r3
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 800364e:	210a      	movs	r1, #10
 8003650:	6838      	ldr	r0, [r7, #0]
 8003652:	f7ff ff75 	bl	8003540 <u8g2_font_get_byte>
 8003656:	4603      	mov	r3, r0
 8003658:	b25a      	sxtb	r2, r3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 800365e:	210b      	movs	r1, #11
 8003660:	6838      	ldr	r0, [r7, #0]
 8003662:	f7ff ff6d 	bl	8003540 <u8g2_font_get_byte>
 8003666:	4603      	mov	r3, r0
 8003668:	b25a      	sxtb	r2, r3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 800366e:	210c      	movs	r1, #12
 8003670:	6838      	ldr	r0, [r7, #0]
 8003672:	f7ff ff65 	bl	8003540 <u8g2_font_get_byte>
 8003676:	4603      	mov	r3, r0
 8003678:	b25a      	sxtb	r2, r3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 800367e:	210d      	movs	r1, #13
 8003680:	6838      	ldr	r0, [r7, #0]
 8003682:	f7ff ff5d 	bl	8003540 <u8g2_font_get_byte>
 8003686:	4603      	mov	r3, r0
 8003688:	b25a      	sxtb	r2, r3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 800368e:	210e      	movs	r1, #14
 8003690:	6838      	ldr	r0, [r7, #0]
 8003692:	f7ff ff55 	bl	8003540 <u8g2_font_get_byte>
 8003696:	4603      	mov	r3, r0
 8003698:	b25a      	sxtb	r2, r3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 800369e:	210f      	movs	r1, #15
 80036a0:	6838      	ldr	r0, [r7, #0]
 80036a2:	f7ff ff4d 	bl	8003540 <u8g2_font_get_byte>
 80036a6:	4603      	mov	r3, r0
 80036a8:	b25a      	sxtb	r2, r3
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 80036ae:	2110      	movs	r1, #16
 80036b0:	6838      	ldr	r0, [r7, #0]
 80036b2:	f7ff ff45 	bl	8003540 <u8g2_font_get_byte>
 80036b6:	4603      	mov	r3, r0
 80036b8:	b25a      	sxtb	r2, r3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 80036be:	2111      	movs	r1, #17
 80036c0:	6838      	ldr	r0, [r7, #0]
 80036c2:	f7ff ff4f 	bl	8003564 <u8g2_font_get_word>
 80036c6:	4603      	mov	r3, r0
 80036c8:	461a      	mov	r2, r3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 80036ce:	2113      	movs	r1, #19
 80036d0:	6838      	ldr	r0, [r7, #0]
 80036d2:	f7ff ff47 	bl	8003564 <u8g2_font_get_word>
 80036d6:	4603      	mov	r3, r0
 80036d8:	461a      	mov	r2, r3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 80036de:	2115      	movs	r1, #21
 80036e0:	6838      	ldr	r0, [r7, #0]
 80036e2:	f7ff ff3f 	bl	8003564 <u8g2_font_get_word>
 80036e6:	4603      	mov	r3, r0
 80036e8:	461a      	mov	r2, r3
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	82da      	strh	r2, [r3, #22]
#endif
}
 80036ee:	bf00      	nop
 80036f0:	3708      	adds	r7, #8
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}

080036f6 <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 80036f6:	b480      	push	{r7}
 80036f8:	b085      	sub	sp, #20
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]
 80036fe:	460b      	mov	r3, r1
 8003700:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	7b1b      	ldrb	r3, [r3, #12]
 8003706:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	781b      	ldrb	r3, [r3, #0]
 800370e:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 8003710:	7bfa      	ldrb	r2, [r7, #15]
 8003712:	7b7b      	ldrb	r3, [r7, #13]
 8003714:	fa42 f303 	asr.w	r3, r2, r3
 8003718:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 800371a:	7b7b      	ldrb	r3, [r7, #13]
 800371c:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 800371e:	7bba      	ldrb	r2, [r7, #14]
 8003720:	78fb      	ldrb	r3, [r7, #3]
 8003722:	4413      	add	r3, r2
 8003724:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 8003726:	7bbb      	ldrb	r3, [r7, #14]
 8003728:	2b07      	cmp	r3, #7
 800372a:	d91a      	bls.n	8003762 <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 800372c:	2308      	movs	r3, #8
 800372e:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 8003730:	7b3a      	ldrb	r2, [r7, #12]
 8003732:	7b7b      	ldrb	r3, [r7, #13]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	1c5a      	adds	r2, r3, #1
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	461a      	mov	r2, r3
 800374a:	7b3b      	ldrb	r3, [r7, #12]
 800374c:	fa02 f303 	lsl.w	r3, r2, r3
 8003750:	b25a      	sxtb	r2, r3
 8003752:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003756:	4313      	orrs	r3, r2
 8003758:	b25b      	sxtb	r3, r3
 800375a:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 800375c:	7bbb      	ldrb	r3, [r7, #14]
 800375e:	3b08      	subs	r3, #8
 8003760:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 8003762:	78fb      	ldrb	r3, [r7, #3]
 8003764:	f04f 32ff 	mov.w	r2, #4294967295
 8003768:	fa02 f303 	lsl.w	r3, r2, r3
 800376c:	b2db      	uxtb	r3, r3
 800376e:	43db      	mvns	r3, r3
 8003770:	b2da      	uxtb	r2, r3
 8003772:	7bfb      	ldrb	r3, [r7, #15]
 8003774:	4013      	ands	r3, r2
 8003776:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	7bba      	ldrb	r2, [r7, #14]
 800377c:	731a      	strb	r2, [r3, #12]
  return val;
 800377e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003780:	4618      	mov	r0, r3
 8003782:	3714      	adds	r7, #20
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	460b      	mov	r3, r1
 8003796:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8003798:	78fb      	ldrb	r3, [r7, #3]
 800379a:	4619      	mov	r1, r3
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f7ff ffaa 	bl	80036f6 <u8g2_font_decode_get_unsigned_bits>
 80037a2:	4603      	mov	r3, r0
 80037a4:	73fb      	strb	r3, [r7, #15]
  d = 1;
 80037a6:	2301      	movs	r3, #1
 80037a8:	73bb      	strb	r3, [r7, #14]
  cnt--;
 80037aa:	78fb      	ldrb	r3, [r7, #3]
 80037ac:	3b01      	subs	r3, #1
 80037ae:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 80037b0:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80037b4:	78fb      	ldrb	r3, [r7, #3]
 80037b6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ba:	73bb      	strb	r3, [r7, #14]
  v -= d;
 80037bc:	7bfa      	ldrb	r2, [r7, #15]
 80037be:	7bbb      	ldrb	r3, [r7, #14]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	73fb      	strb	r3, [r7, #15]
  return v;
 80037c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3710      	adds	r7, #16
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}

080037d2 <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 80037d2:	b490      	push	{r4, r7}
 80037d4:	b082      	sub	sp, #8
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	4604      	mov	r4, r0
 80037da:	4608      	mov	r0, r1
 80037dc:	4611      	mov	r1, r2
 80037de:	461a      	mov	r2, r3
 80037e0:	4623      	mov	r3, r4
 80037e2:	80fb      	strh	r3, [r7, #6]
 80037e4:	4603      	mov	r3, r0
 80037e6:	717b      	strb	r3, [r7, #5]
 80037e8:	460b      	mov	r3, r1
 80037ea:	713b      	strb	r3, [r7, #4]
 80037ec:	4613      	mov	r3, r2
 80037ee:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 80037f0:	78fb      	ldrb	r3, [r7, #3]
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d014      	beq.n	8003820 <u8g2_add_vector_y+0x4e>
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	dc19      	bgt.n	800382e <u8g2_add_vector_y+0x5c>
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d002      	beq.n	8003804 <u8g2_add_vector_y+0x32>
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d007      	beq.n	8003812 <u8g2_add_vector_y+0x40>
 8003802:	e014      	b.n	800382e <u8g2_add_vector_y+0x5c>
  {
    case 0:
      dy += y;
 8003804:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8003808:	b29a      	uxth	r2, r3
 800380a:	88fb      	ldrh	r3, [r7, #6]
 800380c:	4413      	add	r3, r2
 800380e:	80fb      	strh	r3, [r7, #6]
      break;
 8003810:	e014      	b.n	800383c <u8g2_add_vector_y+0x6a>
    case 1:
      dy += x;
 8003812:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8003816:	b29a      	uxth	r2, r3
 8003818:	88fb      	ldrh	r3, [r7, #6]
 800381a:	4413      	add	r3, r2
 800381c:	80fb      	strh	r3, [r7, #6]
      break;
 800381e:	e00d      	b.n	800383c <u8g2_add_vector_y+0x6a>
    case 2:
      dy -= y;
 8003820:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8003824:	b29b      	uxth	r3, r3
 8003826:	88fa      	ldrh	r2, [r7, #6]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	80fb      	strh	r3, [r7, #6]
      break;
 800382c:	e006      	b.n	800383c <u8g2_add_vector_y+0x6a>
    default:
      dy -= x;
 800382e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8003832:	b29b      	uxth	r3, r3
 8003834:	88fa      	ldrh	r2, [r7, #6]
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	80fb      	strh	r3, [r7, #6]
      break;      
 800383a:	bf00      	nop
  }
  return dy;
 800383c:	88fb      	ldrh	r3, [r7, #6]
}
 800383e:	4618      	mov	r0, r3
 8003840:	3708      	adds	r7, #8
 8003842:	46bd      	mov	sp, r7
 8003844:	bc90      	pop	{r4, r7}
 8003846:	4770      	bx	lr

08003848 <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 8003848:	b490      	push	{r4, r7}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
 800384e:	4604      	mov	r4, r0
 8003850:	4608      	mov	r0, r1
 8003852:	4611      	mov	r1, r2
 8003854:	461a      	mov	r2, r3
 8003856:	4623      	mov	r3, r4
 8003858:	80fb      	strh	r3, [r7, #6]
 800385a:	4603      	mov	r3, r0
 800385c:	717b      	strb	r3, [r7, #5]
 800385e:	460b      	mov	r3, r1
 8003860:	713b      	strb	r3, [r7, #4]
 8003862:	4613      	mov	r3, r2
 8003864:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 8003866:	78fb      	ldrb	r3, [r7, #3]
 8003868:	2b02      	cmp	r3, #2
 800386a:	d014      	beq.n	8003896 <u8g2_add_vector_x+0x4e>
 800386c:	2b02      	cmp	r3, #2
 800386e:	dc19      	bgt.n	80038a4 <u8g2_add_vector_x+0x5c>
 8003870:	2b00      	cmp	r3, #0
 8003872:	d002      	beq.n	800387a <u8g2_add_vector_x+0x32>
 8003874:	2b01      	cmp	r3, #1
 8003876:	d007      	beq.n	8003888 <u8g2_add_vector_x+0x40>
 8003878:	e014      	b.n	80038a4 <u8g2_add_vector_x+0x5c>
  {
    case 0:
      dx += x;
 800387a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800387e:	b29a      	uxth	r2, r3
 8003880:	88fb      	ldrh	r3, [r7, #6]
 8003882:	4413      	add	r3, r2
 8003884:	80fb      	strh	r3, [r7, #6]
      break;
 8003886:	e014      	b.n	80038b2 <u8g2_add_vector_x+0x6a>
    case 1:
      dx -= y;
 8003888:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800388c:	b29b      	uxth	r3, r3
 800388e:	88fa      	ldrh	r2, [r7, #6]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	80fb      	strh	r3, [r7, #6]
      break;
 8003894:	e00d      	b.n	80038b2 <u8g2_add_vector_x+0x6a>
    case 2:
      dx -= x;
 8003896:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800389a:	b29b      	uxth	r3, r3
 800389c:	88fa      	ldrh	r2, [r7, #6]
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	80fb      	strh	r3, [r7, #6]
      break;
 80038a2:	e006      	b.n	80038b2 <u8g2_add_vector_x+0x6a>
    default:
      dx += y;
 80038a4:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80038a8:	b29a      	uxth	r2, r3
 80038aa:	88fb      	ldrh	r3, [r7, #6]
 80038ac:	4413      	add	r3, r2
 80038ae:	80fb      	strh	r3, [r7, #6]
      break;      
 80038b0:	bf00      	nop
  }
  return dx;
 80038b2:	88fb      	ldrh	r3, [r7, #6]
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3708      	adds	r7, #8
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bc90      	pop	{r4, r7}
 80038bc:	4770      	bx	lr

080038be <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 80038be:	b580      	push	{r7, lr}
 80038c0:	b088      	sub	sp, #32
 80038c2:	af02      	add	r7, sp, #8
 80038c4:	6078      	str	r0, [r7, #4]
 80038c6:	460b      	mov	r3, r1
 80038c8:	70fb      	strb	r3, [r7, #3]
 80038ca:	4613      	mov	r3, r2
 80038cc:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	3360      	adds	r3, #96	; 0x60
 80038d2:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 80038d4:	78fb      	ldrb	r3, [r7, #3]
 80038d6:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80038de:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80038e6:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80038ee:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 80038f0:	7bfa      	ldrb	r2, [r7, #15]
 80038f2:	7d7b      	ldrb	r3, [r7, #21]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 80038f8:	7bfb      	ldrb	r3, [r7, #15]
 80038fa:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 80038fc:	7dfa      	ldrb	r2, [r7, #23]
 80038fe:	7bfb      	ldrb	r3, [r7, #15]
 8003900:	429a      	cmp	r2, r3
 8003902:	d201      	bcs.n	8003908 <u8g2_font_decode_len+0x4a>
      current = cnt;
 8003904:	7dfb      	ldrb	r3, [r7, #23]
 8003906:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	889b      	ldrh	r3, [r3, #4]
 800390c:	81bb      	strh	r3, [r7, #12]
    y = decode->target_y;
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	88db      	ldrh	r3, [r3, #6]
 8003912:	817b      	strh	r3, [r7, #10]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8003914:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8003918:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	7c1b      	ldrb	r3, [r3, #16]
 8003920:	89b8      	ldrh	r0, [r7, #12]
 8003922:	f7ff ff91 	bl	8003848 <u8g2_add_vector_x>
 8003926:	4603      	mov	r3, r0
 8003928:	81bb      	strh	r3, [r7, #12]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 800392a:	f997 1015 	ldrsb.w	r1, [r7, #21]
 800392e:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	7c1b      	ldrb	r3, [r3, #16]
 8003936:	8978      	ldrh	r0, [r7, #10]
 8003938:	f7ff ff4b 	bl	80037d2 <u8g2_add_vector_y>
 800393c:	4603      	mov	r3, r0
 800393e:	817b      	strh	r3, [r7, #10]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 8003940:	78bb      	ldrb	r3, [r7, #2]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d010      	beq.n	8003968 <u8g2_font_decode_len+0xaa>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	7b9a      	ldrb	r2, [r3, #14]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 8003950:	7dbb      	ldrb	r3, [r7, #22]
 8003952:	b298      	uxth	r0, r3
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	7c1b      	ldrb	r3, [r3, #16]
 8003958:	897a      	ldrh	r2, [r7, #10]
 800395a:	89b9      	ldrh	r1, [r7, #12]
 800395c:	9300      	str	r3, [sp, #0]
 800395e:	4603      	mov	r3, r0
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f000 fbfe 	bl	8004162 <u8g2_DrawHVLine>
 8003966:	e013      	b.n	8003990 <u8g2_font_decode_len+0xd2>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	7b5b      	ldrb	r3, [r3, #13]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d10f      	bne.n	8003990 <u8g2_font_decode_len+0xd2>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	7bda      	ldrb	r2, [r3, #15]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 800397a:	7dbb      	ldrb	r3, [r7, #22]
 800397c:	b298      	uxth	r0, r3
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	7c1b      	ldrb	r3, [r3, #16]
 8003982:	897a      	ldrh	r2, [r7, #10]
 8003984:	89b9      	ldrh	r1, [r7, #12]
 8003986:	9300      	str	r3, [sp, #0]
 8003988:	4603      	mov	r3, r0
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f000 fbe9 	bl	8004162 <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8003990:	7dfa      	ldrb	r2, [r7, #23]
 8003992:	7bfb      	ldrb	r3, [r7, #15]
 8003994:	429a      	cmp	r2, r3
 8003996:	d309      	bcc.n	80039ac <u8g2_font_decode_len+0xee>
      break;
    cnt -= rem;
 8003998:	7dfa      	ldrb	r2, [r7, #23]
 800399a:	7bfb      	ldrb	r3, [r7, #15]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 80039a0:	2300      	movs	r3, #0
 80039a2:	757b      	strb	r3, [r7, #21]
    ly++;
 80039a4:	7d3b      	ldrb	r3, [r7, #20]
 80039a6:	3301      	adds	r3, #1
 80039a8:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 80039aa:	e79d      	b.n	80038e8 <u8g2_font_decode_len+0x2a>
      break;
 80039ac:	bf00      	nop
  }
  lx += cnt;
 80039ae:	7d7a      	ldrb	r2, [r7, #21]
 80039b0:	7dfb      	ldrb	r3, [r7, #23]
 80039b2:	4413      	add	r3, r2
 80039b4:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 80039b6:	f997 2015 	ldrsb.w	r2, [r7, #21]
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	721a      	strb	r2, [r3, #8]
  decode->y = ly;  
 80039be:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	725a      	strb	r2, [r3, #9]
}
 80039c6:	bf00      	nop
 80039c8:	3718      	adds	r7, #24
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}

080039ce <u8g2_font_setup_decode>:
  
}


static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 80039ce:	b580      	push	{r7, lr}
 80039d0:	b084      	sub	sp, #16
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	6078      	str	r0, [r7, #4]
 80039d6:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	3360      	adds	r3, #96	; 0x60
 80039dc:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	683a      	ldr	r2, [r7, #0]
 80039e2:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2200      	movs	r2, #0
 80039e8:	731a      	strb	r2, [r3, #12]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 80039f0:	4619      	mov	r1, r3
 80039f2:	68f8      	ldr	r0, [r7, #12]
 80039f4:	f7ff fe7f 	bl	80036f6 <u8g2_font_decode_get_unsigned_bits>
 80039f8:	4603      	mov	r3, r0
 80039fa:	b25a      	sxtb	r2, r3
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	729a      	strb	r2, [r3, #10]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8003a06:	4619      	mov	r1, r3
 8003a08:	68f8      	ldr	r0, [r7, #12]
 8003a0a:	f7ff fe74 	bl	80036f6 <u8g2_font_decode_get_unsigned_bits>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	b25a      	sxtb	r2, r3
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	72da      	strb	r2, [r3, #11]
  
  decode->fg_color = u8g2->draw_color;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f893 2092 	ldrb.w	r2, [r3, #146]	; 0x92
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	739a      	strb	r2, [r3, #14]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	7b9b      	ldrb	r3, [r3, #14]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	bf0c      	ite	eq
 8003a28:	2301      	moveq	r3, #1
 8003a2a:	2300      	movne	r3, #0
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	461a      	mov	r2, r3
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	73da      	strb	r2, [r3, #15]
}
 8003a34:	bf00      	nop
 8003a36:	3710      	adds	r7, #16
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b08a      	sub	sp, #40	; 0x28
 8003a40:	af02      	add	r7, sp, #8
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	3360      	adds	r3, #96	; 0x60
 8003a4a:	617b      	str	r3, [r7, #20]
    
  u8g2_font_setup_decode(u8g2, glyph_data);     /* set values in u8g2->font_decode data structure */
 8003a4c:	6839      	ldr	r1, [r7, #0]
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f7ff ffbd 	bl	80039ce <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8003a5a:	74fb      	strb	r3, [r7, #19]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8003a62:	4619      	mov	r1, r3
 8003a64:	6978      	ldr	r0, [r7, #20]
 8003a66:	f7ff fe91 	bl	800378c <u8g2_font_decode_get_signed_bits>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	74bb      	strb	r3, [r7, #18]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8003a74:	4619      	mov	r1, r3
 8003a76:	6978      	ldr	r0, [r7, #20]
 8003a78:	f7ff fe88 	bl	800378c <u8g2_font_decode_get_signed_bits>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	747b      	strb	r3, [r7, #17]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003a86:	4619      	mov	r1, r3
 8003a88:	6978      	ldr	r0, [r7, #20]
 8003a8a:	f7ff fe7f 	bl	800378c <u8g2_font_decode_get_signed_bits>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	743b      	strb	r3, [r7, #16]
  
  if ( decode->glyph_width > 0 )
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	f340 80d7 	ble.w	8003c4c <u8g2_font_decode_glyph+0x210>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	8898      	ldrh	r0, [r3, #4]
 8003aa2:	7cfa      	ldrb	r2, [r7, #19]
 8003aa4:	7c7b      	ldrb	r3, [r7, #17]
 8003aa6:	4413      	add	r3, r2
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	425b      	negs	r3, r3
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	b25a      	sxtb	r2, r3
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	7c1b      	ldrb	r3, [r3, #16]
 8003ab4:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8003ab8:	f7ff fec6 	bl	8003848 <u8g2_add_vector_x>
 8003abc:	4603      	mov	r3, r0
 8003abe:	461a      	mov	r2, r3
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	809a      	strh	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	88d8      	ldrh	r0, [r3, #6]
 8003ac8:	7cfa      	ldrb	r2, [r7, #19]
 8003aca:	7c7b      	ldrb	r3, [r7, #17]
 8003acc:	4413      	add	r3, r2
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	425b      	negs	r3, r3
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	b25a      	sxtb	r2, r3
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	7c1b      	ldrb	r3, [r3, #16]
 8003ada:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8003ade:	f7ff fe78 	bl	80037d2 <u8g2_add_vector_y>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	80da      	strh	r2, [r3, #6]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	889b      	ldrh	r3, [r3, #4]
 8003aee:	83fb      	strh	r3, [r7, #30]
      y0 = decode->target_y;
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	88db      	ldrh	r3, [r3, #6]
 8003af4:	837b      	strh	r3, [r7, #26]
      x1 = x0;
 8003af6:	8bfb      	ldrh	r3, [r7, #30]
 8003af8:	83bb      	strh	r3, [r7, #28]
      y1 = y0;
 8003afa:	8b7b      	ldrh	r3, [r7, #26]
 8003afc:	833b      	strh	r3, [r7, #24]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	7c1b      	ldrb	r3, [r3, #16]
 8003b02:	2b03      	cmp	r3, #3
 8003b04:	d85a      	bhi.n	8003bbc <u8g2_font_decode_glyph+0x180>
 8003b06:	a201      	add	r2, pc, #4	; (adr r2, 8003b0c <u8g2_font_decode_glyph+0xd0>)
 8003b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b0c:	08003b1d 	.word	0x08003b1d
 8003b10:	08003b39 	.word	0x08003b39
 8003b14:	08003b61 	.word	0x08003b61
 8003b18:	08003b95 	.word	0x08003b95
      {
	case 0:
	    x1 += decode->glyph_width;
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8003b22:	b29a      	uxth	r2, r3
 8003b24:	8bbb      	ldrh	r3, [r7, #28]
 8003b26:	4413      	add	r3, r2
 8003b28:	83bb      	strh	r3, [r7, #28]
	    y1 += h;
 8003b2a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003b2e:	b29a      	uxth	r2, r3
 8003b30:	8b3b      	ldrh	r3, [r7, #24]
 8003b32:	4413      	add	r3, r2
 8003b34:	833b      	strh	r3, [r7, #24]
	    break;
 8003b36:	e041      	b.n	8003bbc <u8g2_font_decode_glyph+0x180>
	case 1:
	    x0 -= h;
 8003b38:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	8bfa      	ldrh	r2, [r7, #30]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8003b44:	8bfb      	ldrh	r3, [r7, #30]
 8003b46:	3301      	adds	r3, #1
 8003b48:	83fb      	strh	r3, [r7, #30]
	    x1++;
 8003b4a:	8bbb      	ldrh	r3, [r7, #28]
 8003b4c:	3301      	adds	r3, #1
 8003b4e:	83bb      	strh	r3, [r7, #28]
	    y1 += decode->glyph_width;
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8003b56:	b29a      	uxth	r2, r3
 8003b58:	8b3b      	ldrh	r3, [r7, #24]
 8003b5a:	4413      	add	r3, r2
 8003b5c:	833b      	strh	r3, [r7, #24]
	    break;
 8003b5e:	e02d      	b.n	8003bbc <u8g2_font_decode_glyph+0x180>
	case 2:
	    x0 -= decode->glyph_width;
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	8bfa      	ldrh	r2, [r7, #30]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8003b6e:	8bfb      	ldrh	r3, [r7, #30]
 8003b70:	3301      	adds	r3, #1
 8003b72:	83fb      	strh	r3, [r7, #30]
	    x1++;
 8003b74:	8bbb      	ldrh	r3, [r7, #28]
 8003b76:	3301      	adds	r3, #1
 8003b78:	83bb      	strh	r3, [r7, #28]
	    y0 -= h;
 8003b7a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	8b7a      	ldrh	r2, [r7, #26]
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8003b86:	8b7b      	ldrh	r3, [r7, #26]
 8003b88:	3301      	adds	r3, #1
 8003b8a:	837b      	strh	r3, [r7, #26]
	    y1++;
 8003b8c:	8b3b      	ldrh	r3, [r7, #24]
 8003b8e:	3301      	adds	r3, #1
 8003b90:	833b      	strh	r3, [r7, #24]
	    break;	  
 8003b92:	e013      	b.n	8003bbc <u8g2_font_decode_glyph+0x180>
	case 3:
	    x1 += h;
 8003b94:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003b98:	b29a      	uxth	r2, r3
 8003b9a:	8bbb      	ldrh	r3, [r7, #28]
 8003b9c:	4413      	add	r3, r2
 8003b9e:	83bb      	strh	r3, [r7, #28]
	    y0 -= decode->glyph_width;
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	8b7a      	ldrh	r2, [r7, #26]
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8003bae:	8b7b      	ldrh	r3, [r7, #26]
 8003bb0:	3301      	adds	r3, #1
 8003bb2:	837b      	strh	r3, [r7, #26]
	    y1++;
 8003bb4:	8b3b      	ldrh	r3, [r7, #24]
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	833b      	strh	r3, [r7, #24]
	    break;	  
 8003bba:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8003bbc:	8bb8      	ldrh	r0, [r7, #28]
 8003bbe:	8b7a      	ldrh	r2, [r7, #26]
 8003bc0:	8bf9      	ldrh	r1, [r7, #30]
 8003bc2:	8b3b      	ldrh	r3, [r7, #24]
 8003bc4:	9300      	str	r3, [sp, #0]
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f000 fbbb 	bl	8004344 <u8g2_IsIntersection>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d102      	bne.n	8003bda <u8g2_font_decode_glyph+0x19e>
	return d;
 8003bd4:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8003bd8:	e03a      	b.n	8003c50 <u8g2_font_decode_glyph+0x214>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	721a      	strb	r2, [r3, #8]
    decode->y = 0;
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	2200      	movs	r2, #0
 8003be4:	725a      	strb	r2, [r3, #9]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8003bec:	4619      	mov	r1, r3
 8003bee:	6978      	ldr	r0, [r7, #20]
 8003bf0:	f7ff fd81 	bl	80036f6 <u8g2_font_decode_get_unsigned_bits>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	73fb      	strb	r3, [r7, #15]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8003bfe:	4619      	mov	r1, r3
 8003c00:	6978      	ldr	r0, [r7, #20]
 8003c02:	f7ff fd78 	bl	80036f6 <u8g2_font_decode_get_unsigned_bits>
 8003c06:	4603      	mov	r3, r0
 8003c08:	73bb      	strb	r3, [r7, #14]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 8003c0a:	7bfb      	ldrb	r3, [r7, #15]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	4619      	mov	r1, r3
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f7ff fe54 	bl	80038be <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 8003c16:	7bbb      	ldrb	r3, [r7, #14]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f7ff fe4e 	bl	80038be <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8003c22:	2101      	movs	r1, #1
 8003c24:	6978      	ldr	r0, [r7, #20]
 8003c26:	f7ff fd66 	bl	80036f6 <u8g2_font_decode_get_unsigned_bits>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d1ec      	bne.n	8003c0a <u8g2_font_decode_glyph+0x1ce>

      if ( decode->y >= h )
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8003c36:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	dd00      	ble.n	8003c40 <u8g2_font_decode_glyph+0x204>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8003c3e:	e7d2      	b.n	8003be6 <u8g2_font_decode_glyph+0x1aa>
	break;
 8003c40:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	7b9a      	ldrb	r2, [r3, #14]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  }
  return d;
 8003c4c:	f997 3010 	ldrsb.w	r3, [r7, #16]
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3720      	adds	r7, #32
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}

08003c58 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b086      	sub	sp, #24
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	460b      	mov	r3, r1
 8003c62:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c68:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	3317      	adds	r3, #23
 8003c6e:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 8003c70:	887b      	ldrh	r3, [r7, #2]
 8003c72:	2bff      	cmp	r3, #255	; 0xff
 8003c74:	d82a      	bhi.n	8003ccc <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 8003c76:	887b      	ldrh	r3, [r7, #2]
 8003c78:	2b60      	cmp	r3, #96	; 0x60
 8003c7a:	d907      	bls.n	8003c8c <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003c82:	461a      	mov	r2, r3
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	4413      	add	r3, r2
 8003c88:	617b      	str	r3, [r7, #20]
 8003c8a:	e009      	b.n	8003ca0 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 8003c8c:	887b      	ldrh	r3, [r7, #2]
 8003c8e:	2b40      	cmp	r3, #64	; 0x40
 8003c90:	d906      	bls.n	8003ca0 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8003c98:	461a      	mov	r2, r3
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	4413      	add	r3, r2
 8003c9e:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	3301      	adds	r3, #1
 8003ca4:	781b      	ldrb	r3, [r3, #0]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d04e      	beq.n	8003d48 <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	781b      	ldrb	r3, [r3, #0]
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	887a      	ldrh	r2, [r7, #2]
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d102      	bne.n	8003cbc <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	3302      	adds	r3, #2
 8003cba:	e049      	b.n	8003d50 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	3301      	adds	r3, #1
 8003cc0:	781b      	ldrb	r3, [r3, #0]
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	4413      	add	r3, r2
 8003cc8:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8003cca:	e7e9      	b.n	8003ca0 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	4413      	add	r3, r2
 8003cd8:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 8003cde:	2100      	movs	r1, #0
 8003ce0:	6938      	ldr	r0, [r7, #16]
 8003ce2:	f7ff fc3f 	bl	8003564 <u8g2_font_get_word>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	461a      	mov	r2, r3
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	4413      	add	r3, r2
 8003cee:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 8003cf0:	2102      	movs	r1, #2
 8003cf2:	6938      	ldr	r0, [r7, #16]
 8003cf4:	f7ff fc36 	bl	8003564 <u8g2_font_get_word>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	3304      	adds	r3, #4
 8003d00:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 8003d02:	89fa      	ldrh	r2, [r7, #14]
 8003d04:	887b      	ldrh	r3, [r7, #2]
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d3e9      	bcc.n	8003cde <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 8003d10:	89fb      	ldrh	r3, [r7, #14]
 8003d12:	021b      	lsls	r3, r3, #8
 8003d14:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	3301      	adds	r3, #1
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	b29a      	uxth	r2, r3
 8003d1e:	89fb      	ldrh	r3, [r7, #14]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 8003d24:	89fb      	ldrh	r3, [r7, #14]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d010      	beq.n	8003d4c <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 8003d2a:	89fa      	ldrh	r2, [r7, #14]
 8003d2c:	887b      	ldrh	r3, [r7, #2]
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d102      	bne.n	8003d38 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	3303      	adds	r3, #3
 8003d36:	e00b      	b.n	8003d50 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	3302      	adds	r3, #2
 8003d3c:	781b      	ldrb	r3, [r3, #0]
 8003d3e:	461a      	mov	r2, r3
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	4413      	add	r3, r2
 8003d44:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 8003d46:	e7e0      	b.n	8003d0a <u8g2_font_get_glyph_data+0xb2>
	break;
 8003d48:	bf00      	nop
 8003d4a:	e000      	b.n	8003d4e <u8g2_font_get_glyph_data+0xf6>
	break;
 8003d4c:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 8003d4e:	2300      	movs	r3, #0
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3718      	adds	r7, #24
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b086      	sub	sp, #24
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	4608      	mov	r0, r1
 8003d62:	4611      	mov	r1, r2
 8003d64:	461a      	mov	r2, r3
 8003d66:	4603      	mov	r3, r0
 8003d68:	817b      	strh	r3, [r7, #10]
 8003d6a:	460b      	mov	r3, r1
 8003d6c:	813b      	strh	r3, [r7, #8]
 8003d6e:	4613      	mov	r3, r2
 8003d70:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t dx = 0;
 8003d72:	2300      	movs	r3, #0
 8003d74:	82fb      	strh	r3, [r7, #22]
  u8g2->font_decode.target_x = x;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	897a      	ldrh	r2, [r7, #10]
 8003d7a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  u8g2->font_decode.target_y = y;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	893a      	ldrh	r2, [r7, #8]
 8003d82:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8003d86:	88fb      	ldrh	r3, [r7, #6]
 8003d88:	4619      	mov	r1, r3
 8003d8a:	68f8      	ldr	r0, [r7, #12]
 8003d8c:	f7ff ff64 	bl	8003c58 <u8g2_font_get_glyph_data>
 8003d90:	6138      	str	r0, [r7, #16]
  if ( glyph_data != NULL )
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d005      	beq.n	8003da4 <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8003d98:	6939      	ldr	r1, [r7, #16]
 8003d9a:	68f8      	ldr	r0, [r7, #12]
 8003d9c:	f7ff fe4e 	bl	8003a3c <u8g2_font_decode_glyph>
 8003da0:	4603      	mov	r3, r0
 8003da2:	82fb      	strh	r3, [r7, #22]
  }
  return dx;
 8003da4:	8afb      	ldrh	r3, [r7, #22]
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3718      	adds	r7, #24
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
	...

08003db0 <u8g2_DrawGlyph>:
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	4608      	mov	r0, r1
 8003dba:	4611      	mov	r1, r2
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	817b      	strh	r3, [r7, #10]
 8003dc2:	460b      	mov	r3, r1
 8003dc4:	813b      	strh	r3, [r7, #8]
 8003dc6:	4613      	mov	r3, r2
 8003dc8:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003dd0:	2b03      	cmp	r3, #3
 8003dd2:	d833      	bhi.n	8003e3c <u8g2_DrawGlyph+0x8c>
 8003dd4:	a201      	add	r2, pc, #4	; (adr r2, 8003ddc <u8g2_DrawGlyph+0x2c>)
 8003dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dda:	bf00      	nop
 8003ddc:	08003ded 	.word	0x08003ded
 8003de0:	08003e01 	.word	0x08003e01
 8003de4:	08003e15 	.word	0x08003e15
 8003de8:	08003e29 	.word	0x08003e29
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003df0:	68f8      	ldr	r0, [r7, #12]
 8003df2:	4798      	blx	r3
 8003df4:	4603      	mov	r3, r0
 8003df6:	461a      	mov	r2, r3
 8003df8:	893b      	ldrh	r3, [r7, #8]
 8003dfa:	4413      	add	r3, r2
 8003dfc:	813b      	strh	r3, [r7, #8]
      break;
 8003dfe:	e01d      	b.n	8003e3c <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e04:	68f8      	ldr	r0, [r7, #12]
 8003e06:	4798      	blx	r3
 8003e08:	4603      	mov	r3, r0
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	897b      	ldrh	r3, [r7, #10]
 8003e0e:	1a9b      	subs	r3, r3, r2
 8003e10:	817b      	strh	r3, [r7, #10]
      break;
 8003e12:	e013      	b.n	8003e3c <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e18:	68f8      	ldr	r0, [r7, #12]
 8003e1a:	4798      	blx	r3
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	461a      	mov	r2, r3
 8003e20:	893b      	ldrh	r3, [r7, #8]
 8003e22:	1a9b      	subs	r3, r3, r2
 8003e24:	813b      	strh	r3, [r7, #8]
      break;
 8003e26:	e009      	b.n	8003e3c <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e2c:	68f8      	ldr	r0, [r7, #12]
 8003e2e:	4798      	blx	r3
 8003e30:	4603      	mov	r3, r0
 8003e32:	461a      	mov	r2, r3
 8003e34:	897b      	ldrh	r3, [r7, #10]
 8003e36:	4413      	add	r3, r2
 8003e38:	817b      	strh	r3, [r7, #10]
      break;
 8003e3a:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8003e3c:	88fb      	ldrh	r3, [r7, #6]
 8003e3e:	893a      	ldrh	r2, [r7, #8]
 8003e40:	8979      	ldrh	r1, [r7, #10]
 8003e42:	68f8      	ldr	r0, [r7, #12]
 8003e44:	f7ff ff88 	bl	8003d58 <u8g2_font_draw_glyph>
 8003e48:	4603      	mov	r3, r0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3710      	adds	r7, #16
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop

08003e54 <u8g2_draw_string>:
  return u8g2_font_2x_draw_glyph(u8g2, x, y, encoding);
}

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b086      	sub	sp, #24
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	60f8      	str	r0, [r7, #12]
 8003e5c:	607b      	str	r3, [r7, #4]
 8003e5e:	460b      	mov	r3, r1
 8003e60:	817b      	strh	r3, [r7, #10]
 8003e62:	4613      	mov	r3, r2
 8003e64:	813b      	strh	r3, [r7, #8]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8003e66:	68f8      	ldr	r0, [r7, #12]
 8003e68:	f000 fd37 	bl	80048da <u8x8_utf8_init>
  sum = 0;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	82fb      	strh	r3, [r7, #22]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	7812      	ldrb	r2, [r2, #0]
 8003e78:	4611      	mov	r1, r2
 8003e7a:	68f8      	ldr	r0, [r7, #12]
 8003e7c:	4798      	blx	r3
 8003e7e:	4603      	mov	r3, r0
 8003e80:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 8003e82:	8abb      	ldrh	r3, [r7, #20]
 8003e84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d038      	beq.n	8003efe <u8g2_draw_string+0xaa>
      break;
    str++;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	3301      	adds	r3, #1
 8003e90:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 8003e92:	8abb      	ldrh	r3, [r7, #20]
 8003e94:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d0e9      	beq.n	8003e70 <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8003e9c:	8abb      	ldrh	r3, [r7, #20]
 8003e9e:	893a      	ldrh	r2, [r7, #8]
 8003ea0:	8979      	ldrh	r1, [r7, #10]
 8003ea2:	68f8      	ldr	r0, [r7, #12]
 8003ea4:	f7ff ff84 	bl	8003db0 <u8g2_DrawGlyph>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	827b      	strh	r3, [r7, #18]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003eb2:	2b03      	cmp	r3, #3
 8003eb4:	d81e      	bhi.n	8003ef4 <u8g2_draw_string+0xa0>
 8003eb6:	a201      	add	r2, pc, #4	; (adr r2, 8003ebc <u8g2_draw_string+0x68>)
 8003eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ebc:	08003ecd 	.word	0x08003ecd
 8003ec0:	08003ed7 	.word	0x08003ed7
 8003ec4:	08003ee1 	.word	0x08003ee1
 8003ec8:	08003eeb 	.word	0x08003eeb
      {
	case 0:
	  x += delta;
 8003ecc:	897a      	ldrh	r2, [r7, #10]
 8003ece:	8a7b      	ldrh	r3, [r7, #18]
 8003ed0:	4413      	add	r3, r2
 8003ed2:	817b      	strh	r3, [r7, #10]
	  break;
 8003ed4:	e00e      	b.n	8003ef4 <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 8003ed6:	893a      	ldrh	r2, [r7, #8]
 8003ed8:	8a7b      	ldrh	r3, [r7, #18]
 8003eda:	4413      	add	r3, r2
 8003edc:	813b      	strh	r3, [r7, #8]
	  break;
 8003ede:	e009      	b.n	8003ef4 <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 8003ee0:	897a      	ldrh	r2, [r7, #10]
 8003ee2:	8a7b      	ldrh	r3, [r7, #18]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	817b      	strh	r3, [r7, #10]
	  break;
 8003ee8:	e004      	b.n	8003ef4 <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 8003eea:	893a      	ldrh	r2, [r7, #8]
 8003eec:	8a7b      	ldrh	r3, [r7, #18]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	813b      	strh	r3, [r7, #8]
	  break;
 8003ef2:	bf00      	nop

#else
      x += delta;
#endif

      sum += delta;    
 8003ef4:	8afa      	ldrh	r2, [r7, #22]
 8003ef6:	8a7b      	ldrh	r3, [r7, #18]
 8003ef8:	4413      	add	r3, r2
 8003efa:	82fb      	strh	r3, [r7, #22]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8003efc:	e7b8      	b.n	8003e70 <u8g2_draw_string+0x1c>
      break;
 8003efe:	bf00      	nop
    }
  }
  return sum;
 8003f00:	8afb      	ldrh	r3, [r7, #22]
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3718      	adds	r7, #24
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop

08003f0c <u8g2_DrawStr>:
  }
  return sum;
}

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	607b      	str	r3, [r7, #4]
 8003f16:	460b      	mov	r3, r1
 8003f18:	817b      	strh	r3, [r7, #10]
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	813b      	strh	r3, [r7, #8]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	4a06      	ldr	r2, [pc, #24]	; (8003f3c <u8g2_DrawStr+0x30>)
 8003f22:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8003f24:	893a      	ldrh	r2, [r7, #8]
 8003f26:	8979      	ldrh	r1, [r7, #10]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	68f8      	ldr	r0, [r7, #12]
 8003f2c:	f7ff ff92 	bl	8003e54 <u8g2_draw_string>
 8003f30:	4603      	mov	r3, r0
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3710      	adds	r7, #16
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	080048f7 	.word	0x080048f7

08003f40 <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d05d      	beq.n	800400c <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f993 2081 	ldrsb.w	r2, [r3, #129]	; 0x81
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f993 2082 	ldrsb.w	r2, [r3, #130]	; 0x82
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d04d      	beq.n	800400e <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d11c      	bne.n	8003fb6 <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f993 208e 	ldrsb.w	r2, [r3, #142]	; 0x8e
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f993 3083 	ldrsb.w	r3, [r3, #131]	; 0x83
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	da05      	bge.n	8003f98 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f993 3084 	ldrsb.w	r3, [r3, #132]	; 0x84
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	dd32      	ble.n	800400e <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f993 2084 	ldrsb.w	r2, [r3, #132]	; 0x84
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 8003fb4:	e02b      	b.n	800400e <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f993 308e 	ldrsb.w	r3, [r3, #142]	; 0x8e
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8003fcc:	440b      	add	r3, r1
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	da0d      	bge.n	8003fee <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8003fd8:	b2da      	uxtb	r2, r3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	4413      	add	r3, r2
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	b25a      	sxtb	r2, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	dd07      	ble.n	800400e <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f993 2080 	ldrsb.w	r2, [r3, #128]	; 0x80
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 800400a:	e000      	b.n	800400e <u8g2_UpdateRefHeight+0xce>
    return;
 800400c:	bf00      	nop
  }  
}
 800400e:	370c      	adds	r7, #12
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr

08004018 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  return 0;
 8004020:	2300      	movs	r3, #0
}
 8004022:	4618      	mov	r0, r3
 8004024:	370c      	adds	r7, #12
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr
	...

08004030 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	4a04      	ldr	r2, [pc, #16]	; (800404c <u8g2_SetFontPosBaseline+0x1c>)
 800403c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800403e:	bf00      	nop
 8004040:	370c      	adds	r7, #12
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr
 800404a:	bf00      	nop
 800404c:	08004019 	.word	0x08004019

08004050 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b082      	sub	sp, #8
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800405e:	683a      	ldr	r2, [r7, #0]
 8004060:	429a      	cmp	r2, r3
 8004062:	d00b      	beq.n	800407c <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	683a      	ldr	r2, [r7, #0]
 8004068:	659a      	str	r2, [r3, #88]	; 0x58
    u8g2_read_font_info(&(u8g2->font_info), font);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	3374      	adds	r3, #116	; 0x74
 800406e:	6839      	ldr	r1, [r7, #0]
 8004070:	4618      	mov	r0, r3
 8004072:	f7ff fa97 	bl	80035a4 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f7ff ff62 	bl	8003f40 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 800407c:	bf00      	nop
 800407e:	3708      	adds	r7, #8
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}

08004084 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 8004084:	b480      	push	{r7}
 8004086:	b087      	sub	sp, #28
 8004088:	af00      	add	r7, sp, #0
 800408a:	60f8      	str	r0, [r7, #12]
 800408c:	60b9      	str	r1, [r7, #8]
 800408e:	4611      	mov	r1, r2
 8004090:	461a      	mov	r2, r3
 8004092:	460b      	mov	r3, r1
 8004094:	80fb      	strh	r3, [r7, #6]
 8004096:	4613      	mov	r3, r2
 8004098:	80bb      	strh	r3, [r7, #4]
  u8g2_uint_t a = *ap;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	881b      	ldrh	r3, [r3, #0]
 800409e:	82fb      	strh	r3, [r7, #22]
  u8g2_uint_t b;
  b  = a;
 80040a0:	8afb      	ldrh	r3, [r7, #22]
 80040a2:	82bb      	strh	r3, [r7, #20]
  b += *len;
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	881a      	ldrh	r2, [r3, #0]
 80040a8:	8abb      	ldrh	r3, [r7, #20]
 80040aa:	4413      	add	r3, r2
 80040ac:	82bb      	strh	r3, [r7, #20]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 80040ae:	8afa      	ldrh	r2, [r7, #22]
 80040b0:	8abb      	ldrh	r3, [r7, #20]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d90b      	bls.n	80040ce <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 80040b6:	8afa      	ldrh	r2, [r7, #22]
 80040b8:	88bb      	ldrh	r3, [r7, #4]
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d205      	bcs.n	80040ca <u8g2_clip_intersection2+0x46>
    {
      b = d;
 80040be:	88bb      	ldrh	r3, [r7, #4]
 80040c0:	82bb      	strh	r3, [r7, #20]
      b--;
 80040c2:	8abb      	ldrh	r3, [r7, #20]
 80040c4:	3b01      	subs	r3, #1
 80040c6:	82bb      	strh	r3, [r7, #20]
 80040c8:	e001      	b.n	80040ce <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 80040ca:	88fb      	ldrh	r3, [r7, #6]
 80040cc:	82fb      	strh	r3, [r7, #22]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 80040ce:	8afa      	ldrh	r2, [r7, #22]
 80040d0:	88bb      	ldrh	r3, [r7, #4]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d301      	bcc.n	80040da <u8g2_clip_intersection2+0x56>
    return 0;
 80040d6:	2300      	movs	r3, #0
 80040d8:	e01c      	b.n	8004114 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 80040da:	8aba      	ldrh	r2, [r7, #20]
 80040dc:	88fb      	ldrh	r3, [r7, #6]
 80040de:	429a      	cmp	r2, r3
 80040e0:	d801      	bhi.n	80040e6 <u8g2_clip_intersection2+0x62>
    return 0;
 80040e2:	2300      	movs	r3, #0
 80040e4:	e016      	b.n	8004114 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 80040e6:	8afa      	ldrh	r2, [r7, #22]
 80040e8:	88fb      	ldrh	r3, [r7, #6]
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d201      	bcs.n	80040f2 <u8g2_clip_intersection2+0x6e>
    a = c;
 80040ee:	88fb      	ldrh	r3, [r7, #6]
 80040f0:	82fb      	strh	r3, [r7, #22]
  if ( b > d )
 80040f2:	8aba      	ldrh	r2, [r7, #20]
 80040f4:	88bb      	ldrh	r3, [r7, #4]
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d901      	bls.n	80040fe <u8g2_clip_intersection2+0x7a>
    b = d;
 80040fa:	88bb      	ldrh	r3, [r7, #4]
 80040fc:	82bb      	strh	r3, [r7, #20]
  
  *ap = a;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	8afa      	ldrh	r2, [r7, #22]
 8004102:	801a      	strh	r2, [r3, #0]
  b -= a;
 8004104:	8aba      	ldrh	r2, [r7, #20]
 8004106:	8afb      	ldrh	r3, [r7, #22]
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	82bb      	strh	r3, [r7, #20]
  *len = b;
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	8aba      	ldrh	r2, [r7, #20]
 8004110:	801a      	strh	r2, [r3, #0]
  return 1;
 8004112:	2301      	movs	r3, #1
}
 8004114:	4618      	mov	r0, r3
 8004116:	371c      	adds	r7, #28
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8004120:	b590      	push	{r4, r7, lr}
 8004122:	b087      	sub	sp, #28
 8004124:	af02      	add	r7, sp, #8
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	4608      	mov	r0, r1
 800412a:	4611      	mov	r1, r2
 800412c:	461a      	mov	r2, r3
 800412e:	4603      	mov	r3, r0
 8004130:	817b      	strh	r3, [r7, #10]
 8004132:	460b      	mov	r3, r1
 8004134:	813b      	strh	r3, [r7, #8]
 8004136:	4613      	mov	r3, r2
 8004138:	80fb      	strh	r3, [r7, #6]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800413e:	893a      	ldrh	r2, [r7, #8]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	813b      	strh	r3, [r7, #8]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8004148:	88f8      	ldrh	r0, [r7, #6]
 800414a:	893a      	ldrh	r2, [r7, #8]
 800414c:	8979      	ldrh	r1, [r7, #10]
 800414e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004152:	9300      	str	r3, [sp, #0]
 8004154:	4603      	mov	r3, r0
 8004156:	68f8      	ldr	r0, [r7, #12]
 8004158:	47a0      	blx	r4
}
 800415a:	bf00      	nop
 800415c:	3714      	adds	r7, #20
 800415e:	46bd      	mov	sp, r7
 8004160:	bd90      	pop	{r4, r7, pc}

08004162 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8004162:	b590      	push	{r4, r7, lr}
 8004164:	b087      	sub	sp, #28
 8004166:	af02      	add	r7, sp, #8
 8004168:	60f8      	str	r0, [r7, #12]
 800416a:	4608      	mov	r0, r1
 800416c:	4611      	mov	r1, r2
 800416e:	461a      	mov	r2, r3
 8004170:	4603      	mov	r3, r0
 8004172:	817b      	strh	r3, [r7, #10]
 8004174:	460b      	mov	r3, r1
 8004176:	813b      	strh	r3, [r7, #8]
 8004178:	4613      	mov	r3, r2
 800417a:	80fb      	strh	r3, [r7, #6]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8004182:	2b00      	cmp	r3, #0
 8004184:	d075      	beq.n	8004272 <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 8004186:	88fb      	ldrh	r3, [r7, #6]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d072      	beq.n	8004272 <u8g2_DrawHVLine+0x110>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 800418c:	88fb      	ldrh	r3, [r7, #6]
 800418e:	2b01      	cmp	r3, #1
 8004190:	d91a      	bls.n	80041c8 <u8g2_DrawHVLine+0x66>
      {
	if ( dir == 2 )
 8004192:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004196:	2b02      	cmp	r3, #2
 8004198:	d109      	bne.n	80041ae <u8g2_DrawHVLine+0x4c>
	{
	  x -= len;
 800419a:	897a      	ldrh	r2, [r7, #10]
 800419c:	88fb      	ldrh	r3, [r7, #6]
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	817b      	strh	r3, [r7, #10]
	  x++;
 80041a4:	897b      	ldrh	r3, [r7, #10]
 80041a6:	3301      	adds	r3, #1
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	817b      	strh	r3, [r7, #10]
 80041ac:	e00c      	b.n	80041c8 <u8g2_DrawHVLine+0x66>
	}
	else if ( dir == 3 )
 80041ae:	f897 3020 	ldrb.w	r3, [r7, #32]
 80041b2:	2b03      	cmp	r3, #3
 80041b4:	d108      	bne.n	80041c8 <u8g2_DrawHVLine+0x66>
	{
	  y -= len;
 80041b6:	893a      	ldrh	r2, [r7, #8]
 80041b8:	88fb      	ldrh	r3, [r7, #6]
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	b29b      	uxth	r3, r3
 80041be:	813b      	strh	r3, [r7, #8]
	  y++;
 80041c0:	893b      	ldrh	r3, [r7, #8]
 80041c2:	3301      	adds	r3, #1
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	813b      	strh	r3, [r7, #8]
	}
      }
      dir &= 1;  
 80041c8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80041cc:	f003 0301 	and.w	r3, r3, #1
 80041d0:	f887 3020 	strb.w	r3, [r7, #32]
      
      /* clip against the user window */
      if ( dir == 0 )
 80041d4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d11a      	bne.n	8004212 <u8g2_DrawHVLine+0xb0>
      {
	if ( y < u8g2->user_y0 )
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 80041e2:	893b      	ldrh	r3, [r7, #8]
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d83b      	bhi.n	8004260 <u8g2_DrawHVLine+0xfe>
	  return;
	if ( y >= u8g2->user_y1 )
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 80041ee:	893b      	ldrh	r3, [r7, #8]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d937      	bls.n	8004264 <u8g2_DrawHVLine+0x102>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8004200:	1db9      	adds	r1, r7, #6
 8004202:	f107 000a 	add.w	r0, r7, #10
 8004206:	f7ff ff3d 	bl	8004084 <u8g2_clip_intersection2>
 800420a:	4603      	mov	r3, r0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d11a      	bne.n	8004246 <u8g2_DrawHVLine+0xe4>
	  return;
 8004210:	e02f      	b.n	8004272 <u8g2_DrawHVLine+0x110>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8004218:	897b      	ldrh	r3, [r7, #10]
 800421a:	429a      	cmp	r2, r3
 800421c:	d824      	bhi.n	8004268 <u8g2_DrawHVLine+0x106>
	  return;
	if ( x >= u8g2->user_x1 )
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8004224:	897b      	ldrh	r3, [r7, #10]
 8004226:	429a      	cmp	r2, r3
 8004228:	d920      	bls.n	800426c <u8g2_DrawHVLine+0x10a>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8004236:	1db9      	adds	r1, r7, #6
 8004238:	f107 0008 	add.w	r0, r7, #8
 800423c:	f7ff ff22 	bl	8004084 <u8g2_clip_intersection2>
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d014      	beq.n	8004270 <u8g2_DrawHVLine+0x10e>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800424a:	689c      	ldr	r4, [r3, #8]
 800424c:	8979      	ldrh	r1, [r7, #10]
 800424e:	893a      	ldrh	r2, [r7, #8]
 8004250:	88f8      	ldrh	r0, [r7, #6]
 8004252:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004256:	9300      	str	r3, [sp, #0]
 8004258:	4603      	mov	r3, r0
 800425a:	68f8      	ldr	r0, [r7, #12]
 800425c:	47a0      	blx	r4
 800425e:	e008      	b.n	8004272 <u8g2_DrawHVLine+0x110>
	  return;
 8004260:	bf00      	nop
 8004262:	e006      	b.n	8004272 <u8g2_DrawHVLine+0x110>
	  return;
 8004264:	bf00      	nop
 8004266:	e004      	b.n	8004272 <u8g2_DrawHVLine+0x110>
	  return;
 8004268:	bf00      	nop
 800426a:	e002      	b.n	8004272 <u8g2_DrawHVLine+0x110>
	  return;
 800426c:	bf00      	nop
 800426e:	e000      	b.n	8004272 <u8g2_DrawHVLine+0x110>
	  return;
 8004270:	bf00      	nop
    }
}
 8004272:	3714      	adds	r7, #20
 8004274:	46bd      	mov	sp, r7
 8004276:	bd90      	pop	{r4, r7, pc}

08004278 <u8g2_DrawPixel>:
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
}

void u8g2_DrawPixel(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af02      	add	r7, sp, #8
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	460b      	mov	r3, r1
 8004282:	807b      	strh	r3, [r7, #2]
 8004284:	4613      	mov	r3, r2
 8004286:	803b      	strh	r3, [r7, #0]
#ifdef U8G2_WITH_INTERSECTION
  if ( y < u8g2->user_y0 )
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800428e:	883a      	ldrh	r2, [r7, #0]
 8004290:	429a      	cmp	r2, r3
 8004292:	d31a      	bcc.n	80042ca <u8g2_DrawPixel+0x52>
    return;
  if ( y >= u8g2->user_y1 )
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800429a:	883a      	ldrh	r2, [r7, #0]
 800429c:	429a      	cmp	r2, r3
 800429e:	d216      	bcs.n	80042ce <u8g2_DrawPixel+0x56>
    return;
  if ( x < u8g2->user_x0 )
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80042a6:	887a      	ldrh	r2, [r7, #2]
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d312      	bcc.n	80042d2 <u8g2_DrawPixel+0x5a>
    return;
  if ( x >= u8g2->user_x1 )
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80042b2:	887a      	ldrh	r2, [r7, #2]
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d20e      	bcs.n	80042d6 <u8g2_DrawPixel+0x5e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 80042b8:	883a      	ldrh	r2, [r7, #0]
 80042ba:	8879      	ldrh	r1, [r7, #2]
 80042bc:	2300      	movs	r3, #0
 80042be:	9300      	str	r3, [sp, #0]
 80042c0:	2301      	movs	r3, #1
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f7ff ff4d 	bl	8004162 <u8g2_DrawHVLine>
 80042c8:	e006      	b.n	80042d8 <u8g2_DrawPixel+0x60>
    return;
 80042ca:	bf00      	nop
 80042cc:	e004      	b.n	80042d8 <u8g2_DrawPixel+0x60>
    return;
 80042ce:	bf00      	nop
 80042d0:	e002      	b.n	80042d8 <u8g2_DrawPixel+0x60>
    return;
 80042d2:	bf00      	nop
 80042d4:	e000      	b.n	80042d8 <u8g2_DrawPixel+0x60>
    return;
 80042d6:	bf00      	nop
}
 80042d8:	3708      	adds	r7, #8
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}

080042de <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 80042de:	b490      	push	{r4, r7}
 80042e0:	b082      	sub	sp, #8
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	4604      	mov	r4, r0
 80042e6:	4608      	mov	r0, r1
 80042e8:	4611      	mov	r1, r2
 80042ea:	461a      	mov	r2, r3
 80042ec:	4623      	mov	r3, r4
 80042ee:	80fb      	strh	r3, [r7, #6]
 80042f0:	4603      	mov	r3, r0
 80042f2:	80bb      	strh	r3, [r7, #4]
 80042f4:	460b      	mov	r3, r1
 80042f6:	807b      	strh	r3, [r7, #2]
 80042f8:	4613      	mov	r3, r2
 80042fa:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 80042fc:	887a      	ldrh	r2, [r7, #2]
 80042fe:	88bb      	ldrh	r3, [r7, #4]
 8004300:	429a      	cmp	r2, r3
 8004302:	d20d      	bcs.n	8004320 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8004304:	883a      	ldrh	r2, [r7, #0]
 8004306:	88fb      	ldrh	r3, [r7, #6]
 8004308:	429a      	cmp	r2, r3
 800430a:	d901      	bls.n	8004310 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 800430c:	2301      	movs	r3, #1
 800430e:	e014      	b.n	800433a <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8004310:	887a      	ldrh	r2, [r7, #2]
 8004312:	883b      	ldrh	r3, [r7, #0]
 8004314:	429a      	cmp	r2, r3
 8004316:	d901      	bls.n	800431c <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8004318:	2301      	movs	r3, #1
 800431a:	e00e      	b.n	800433a <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 800431c:	2300      	movs	r3, #0
 800431e:	e00c      	b.n	800433a <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8004320:	883a      	ldrh	r2, [r7, #0]
 8004322:	88fb      	ldrh	r3, [r7, #6]
 8004324:	429a      	cmp	r2, r3
 8004326:	d907      	bls.n	8004338 <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8004328:	887a      	ldrh	r2, [r7, #2]
 800432a:	883b      	ldrh	r3, [r7, #0]
 800432c:	429a      	cmp	r2, r3
 800432e:	d901      	bls.n	8004334 <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 8004330:	2301      	movs	r3, #1
 8004332:	e002      	b.n	800433a <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8004334:	2300      	movs	r3, #0
 8004336:	e000      	b.n	800433a <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8004338:	2300      	movs	r3, #0
    }
  }
}
 800433a:	4618      	mov	r0, r3
 800433c:	3708      	adds	r7, #8
 800433e:	46bd      	mov	sp, r7
 8004340:	bc90      	pop	{r4, r7}
 8004342:	4770      	bx	lr

08004344 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b084      	sub	sp, #16
 8004348:	af00      	add	r7, sp, #0
 800434a:	60f8      	str	r0, [r7, #12]
 800434c:	4608      	mov	r0, r1
 800434e:	4611      	mov	r1, r2
 8004350:	461a      	mov	r2, r3
 8004352:	4603      	mov	r3, r0
 8004354:	817b      	strh	r3, [r7, #10]
 8004356:	460b      	mov	r3, r1
 8004358:	813b      	strh	r3, [r7, #8]
 800435a:	4613      	mov	r3, r2
 800435c:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	f8b3 004c 	ldrh.w	r0, [r3, #76]	; 0x4c
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f8b3 104e 	ldrh.w	r1, [r3, #78]	; 0x4e
 800436a:	8b3b      	ldrh	r3, [r7, #24]
 800436c:	893a      	ldrh	r2, [r7, #8]
 800436e:	f7ff ffb6 	bl	80042de <u8g2_is_intersection_decision_tree>
 8004372:	4603      	mov	r3, r0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d101      	bne.n	800437c <u8g2_IsIntersection+0x38>
    return 0; 
 8004378:	2300      	movs	r3, #0
 800437a:	e00a      	b.n	8004392 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f8b3 0048 	ldrh.w	r0, [r3, #72]	; 0x48
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
 8004388:	88fb      	ldrh	r3, [r7, #6]
 800438a:	897a      	ldrh	r2, [r7, #10]
 800438c:	f7ff ffa7 	bl	80042de <u8g2_is_intersection_decision_tree>
 8004390:	4603      	mov	r3, r0
}
 8004392:	4618      	mov	r0, r3
 8004394:	3710      	adds	r7, #16
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}

0800439a <u8g2_DrawLine>:

#include "u8g2.h"


void u8g2_DrawLine(u8g2_t *u8g2, u8g2_uint_t x1, u8g2_uint_t y1, u8g2_uint_t x2, u8g2_uint_t y2)
{
 800439a:	b580      	push	{r7, lr}
 800439c:	b088      	sub	sp, #32
 800439e:	af00      	add	r7, sp, #0
 80043a0:	60f8      	str	r0, [r7, #12]
 80043a2:	4608      	mov	r0, r1
 80043a4:	4611      	mov	r1, r2
 80043a6:	461a      	mov	r2, r3
 80043a8:	4603      	mov	r3, r0
 80043aa:	817b      	strh	r3, [r7, #10]
 80043ac:	460b      	mov	r3, r1
 80043ae:	813b      	strh	r3, [r7, #8]
 80043b0:	4613      	mov	r3, r2
 80043b2:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t x,y;
  u8g2_uint_t dx, dy;
  u8g2_int_t err;
  u8g2_int_t ystep;

  uint8_t swapxy = 0;
 80043b4:	2300      	movs	r3, #0
 80043b6:	74fb      	strb	r3, [r7, #19]
  
  /* no intersection check at the moment, should be added... */

  if ( x1 > x2 ) dx = x1-x2; else dx = x2-x1;
 80043b8:	897a      	ldrh	r2, [r7, #10]
 80043ba:	88fb      	ldrh	r3, [r7, #6]
 80043bc:	429a      	cmp	r2, r3
 80043be:	d904      	bls.n	80043ca <u8g2_DrawLine+0x30>
 80043c0:	897a      	ldrh	r2, [r7, #10]
 80043c2:	88fb      	ldrh	r3, [r7, #6]
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	837b      	strh	r3, [r7, #26]
 80043c8:	e003      	b.n	80043d2 <u8g2_DrawLine+0x38>
 80043ca:	88fa      	ldrh	r2, [r7, #6]
 80043cc:	897b      	ldrh	r3, [r7, #10]
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	837b      	strh	r3, [r7, #26]
  if ( y1 > y2 ) dy = y1-y2; else dy = y2-y1;
 80043d2:	893a      	ldrh	r2, [r7, #8]
 80043d4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d904      	bls.n	80043e4 <u8g2_DrawLine+0x4a>
 80043da:	893a      	ldrh	r2, [r7, #8]
 80043dc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80043de:	1ad3      	subs	r3, r2, r3
 80043e0:	833b      	strh	r3, [r7, #24]
 80043e2:	e003      	b.n	80043ec <u8g2_DrawLine+0x52>
 80043e4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80043e6:	893b      	ldrh	r3, [r7, #8]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	833b      	strh	r3, [r7, #24]

  if ( dy > dx ) 
 80043ec:	8b3a      	ldrh	r2, [r7, #24]
 80043ee:	8b7b      	ldrh	r3, [r7, #26]
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d913      	bls.n	800441c <u8g2_DrawLine+0x82>
  {
    swapxy = 1;
 80043f4:	2301      	movs	r3, #1
 80043f6:	74fb      	strb	r3, [r7, #19]
    tmp = dx; dx =dy; dy = tmp;
 80043f8:	8b7b      	ldrh	r3, [r7, #26]
 80043fa:	823b      	strh	r3, [r7, #16]
 80043fc:	8b3b      	ldrh	r3, [r7, #24]
 80043fe:	837b      	strh	r3, [r7, #26]
 8004400:	8a3b      	ldrh	r3, [r7, #16]
 8004402:	833b      	strh	r3, [r7, #24]
    tmp = x1; x1 =y1; y1 = tmp;
 8004404:	897b      	ldrh	r3, [r7, #10]
 8004406:	823b      	strh	r3, [r7, #16]
 8004408:	893b      	ldrh	r3, [r7, #8]
 800440a:	817b      	strh	r3, [r7, #10]
 800440c:	8a3b      	ldrh	r3, [r7, #16]
 800440e:	813b      	strh	r3, [r7, #8]
    tmp = x2; x2 =y2; y2 = tmp;
 8004410:	88fb      	ldrh	r3, [r7, #6]
 8004412:	823b      	strh	r3, [r7, #16]
 8004414:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004416:	80fb      	strh	r3, [r7, #6]
 8004418:	8a3b      	ldrh	r3, [r7, #16]
 800441a:	853b      	strh	r3, [r7, #40]	; 0x28
  }
  if ( x1 > x2 ) 
 800441c:	897a      	ldrh	r2, [r7, #10]
 800441e:	88fb      	ldrh	r3, [r7, #6]
 8004420:	429a      	cmp	r2, r3
 8004422:	d90b      	bls.n	800443c <u8g2_DrawLine+0xa2>
  {
    tmp = x1; x1 =x2; x2 = tmp;
 8004424:	897b      	ldrh	r3, [r7, #10]
 8004426:	823b      	strh	r3, [r7, #16]
 8004428:	88fb      	ldrh	r3, [r7, #6]
 800442a:	817b      	strh	r3, [r7, #10]
 800442c:	8a3b      	ldrh	r3, [r7, #16]
 800442e:	80fb      	strh	r3, [r7, #6]
    tmp = y1; y1 =y2; y2 = tmp;
 8004430:	893b      	ldrh	r3, [r7, #8]
 8004432:	823b      	strh	r3, [r7, #16]
 8004434:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004436:	813b      	strh	r3, [r7, #8]
 8004438:	8a3b      	ldrh	r3, [r7, #16]
 800443a:	853b      	strh	r3, [r7, #40]	; 0x28
  }
  err = dx >> 1;
 800443c:	8b7b      	ldrh	r3, [r7, #26]
 800443e:	085b      	lsrs	r3, r3, #1
 8004440:	b29b      	uxth	r3, r3
 8004442:	82fb      	strh	r3, [r7, #22]
  if ( y2 > y1 ) ystep = 1; else ystep = -1;
 8004444:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004446:	893b      	ldrh	r3, [r7, #8]
 8004448:	429a      	cmp	r2, r3
 800444a:	d902      	bls.n	8004452 <u8g2_DrawLine+0xb8>
 800444c:	2301      	movs	r3, #1
 800444e:	82bb      	strh	r3, [r7, #20]
 8004450:	e002      	b.n	8004458 <u8g2_DrawLine+0xbe>
 8004452:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004456:	82bb      	strh	r3, [r7, #20]
  y = y1;
 8004458:	893b      	ldrh	r3, [r7, #8]
 800445a:	83bb      	strh	r3, [r7, #28]

#ifndef  U8G2_16BIT
  if ( x2 == 255 )
    x2--;
#else
  if ( x2 == 0xffff )
 800445c:	88fb      	ldrh	r3, [r7, #6]
 800445e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004462:	4293      	cmp	r3, r2
 8004464:	d102      	bne.n	800446c <u8g2_DrawLine+0xd2>
    x2--;
 8004466:	88fb      	ldrh	r3, [r7, #6]
 8004468:	3b01      	subs	r3, #1
 800446a:	80fb      	strh	r3, [r7, #6]
#endif

  for( x = x1; x <= x2; x++ )
 800446c:	897b      	ldrh	r3, [r7, #10]
 800446e:	83fb      	strh	r3, [r7, #30]
 8004470:	e024      	b.n	80044bc <u8g2_DrawLine+0x122>
  {
    if ( swapxy == 0 ) 
 8004472:	7cfb      	ldrb	r3, [r7, #19]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d106      	bne.n	8004486 <u8g2_DrawLine+0xec>
      u8g2_DrawPixel(u8g2, x, y); 
 8004478:	8bba      	ldrh	r2, [r7, #28]
 800447a:	8bfb      	ldrh	r3, [r7, #30]
 800447c:	4619      	mov	r1, r3
 800447e:	68f8      	ldr	r0, [r7, #12]
 8004480:	f7ff fefa 	bl	8004278 <u8g2_DrawPixel>
 8004484:	e005      	b.n	8004492 <u8g2_DrawLine+0xf8>
    else 
      u8g2_DrawPixel(u8g2, y, x); 
 8004486:	8bfa      	ldrh	r2, [r7, #30]
 8004488:	8bbb      	ldrh	r3, [r7, #28]
 800448a:	4619      	mov	r1, r3
 800448c:	68f8      	ldr	r0, [r7, #12]
 800448e:	f7ff fef3 	bl	8004278 <u8g2_DrawPixel>
    err -= (u8g2_uint_t)dy;
 8004492:	8afa      	ldrh	r2, [r7, #22]
 8004494:	8b3b      	ldrh	r3, [r7, #24]
 8004496:	1ad3      	subs	r3, r2, r3
 8004498:	b29b      	uxth	r3, r3
 800449a:	82fb      	strh	r3, [r7, #22]
    if ( err < 0 ) 
 800449c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	da08      	bge.n	80044b6 <u8g2_DrawLine+0x11c>
    {
      y += (u8g2_uint_t)ystep;
 80044a4:	8aba      	ldrh	r2, [r7, #20]
 80044a6:	8bbb      	ldrh	r3, [r7, #28]
 80044a8:	4413      	add	r3, r2
 80044aa:	83bb      	strh	r3, [r7, #28]
      err += (u8g2_uint_t)dx;
 80044ac:	8afa      	ldrh	r2, [r7, #22]
 80044ae:	8b7b      	ldrh	r3, [r7, #26]
 80044b0:	4413      	add	r3, r2
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	82fb      	strh	r3, [r7, #22]
  for( x = x1; x <= x2; x++ )
 80044b6:	8bfb      	ldrh	r3, [r7, #30]
 80044b8:	3301      	adds	r3, #1
 80044ba:	83fb      	strh	r3, [r7, #30]
 80044bc:	8bfa      	ldrh	r2, [r7, #30]
 80044be:	88fb      	ldrh	r3, [r7, #6]
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d9d6      	bls.n	8004472 <u8g2_DrawLine+0xd8>
    }
  }
}
 80044c4:	bf00      	nop
 80044c6:	bf00      	nop
 80044c8:	3720      	adds	r7, #32
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}

080044ce <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80044ce:	b480      	push	{r7}
 80044d0:	b089      	sub	sp, #36	; 0x24
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	60f8      	str	r0, [r7, #12]
 80044d6:	4608      	mov	r0, r1
 80044d8:	4611      	mov	r1, r2
 80044da:	461a      	mov	r2, r3
 80044dc:	4603      	mov	r3, r0
 80044de:	817b      	strh	r3, [r7, #10]
 80044e0:	460b      	mov	r3, r1
 80044e2:	813b      	strh	r3, [r7, #8]
 80044e4:	4613      	mov	r3, r2
 80044e6:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 80044e8:	893b      	ldrh	r3, [r7, #8]
 80044ea:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 80044ec:	7efb      	ldrb	r3, [r7, #27]
 80044ee:	f003 0307 	and.w	r3, r3, #7
 80044f2:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 80044f4:	2301      	movs	r3, #1
 80044f6:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 80044f8:	7e3a      	ldrb	r2, [r7, #24]
 80044fa:	7efb      	ldrb	r3, [r7, #27]
 80044fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004500:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 8004502:	2300      	movs	r3, #0
 8004504:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 8004506:	2300      	movs	r3, #0
 8004508:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8004510:	2b01      	cmp	r3, #1
 8004512:	d801      	bhi.n	8004518 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 8004514:	7e3b      	ldrb	r3, [r7, #24]
 8004516:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 800451e:	2b01      	cmp	r3, #1
 8004520:	d001      	beq.n	8004526 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 8004522:	7e3b      	ldrb	r3, [r7, #24]
 8004524:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8004526:	893b      	ldrh	r3, [r7, #8]
 8004528:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 800452a:	8afb      	ldrh	r3, [r7, #22]
 800452c:	f023 0307 	bic.w	r3, r3, #7
 8004530:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	7c1b      	ldrb	r3, [r3, #16]
 8004538:	b29b      	uxth	r3, r3
 800453a:	8afa      	ldrh	r2, [r7, #22]
 800453c:	fb12 f303 	smulbb	r3, r2, r3
 8004540:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004546:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 8004548:	8afb      	ldrh	r3, [r7, #22]
 800454a:	69fa      	ldr	r2, [r7, #28]
 800454c:	4413      	add	r3, r2
 800454e:	61fb      	str	r3, [r7, #28]
  ptr += x;
 8004550:	897b      	ldrh	r3, [r7, #10]
 8004552:	69fa      	ldr	r2, [r7, #28]
 8004554:	4413      	add	r3, r2
 8004556:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 8004558:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800455c:	2b00      	cmp	r3, #0
 800455e:	d117      	bne.n	8004590 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	781a      	ldrb	r2, [r3, #0]
 8004564:	7ebb      	ldrb	r3, [r7, #26]
 8004566:	4313      	orrs	r3, r2
 8004568:	b2da      	uxtb	r2, r3
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	781a      	ldrb	r2, [r3, #0]
 8004572:	7e7b      	ldrb	r3, [r7, #25]
 8004574:	4053      	eors	r3, r2
 8004576:	b2da      	uxtb	r2, r3
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	701a      	strb	r2, [r3, #0]
	ptr++;
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	3301      	adds	r3, #1
 8004580:	61fb      	str	r3, [r7, #28]
	len--;
 8004582:	88fb      	ldrh	r3, [r7, #6]
 8004584:	3b01      	subs	r3, #1
 8004586:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 8004588:	88fb      	ldrh	r3, [r7, #6]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d1e8      	bne.n	8004560 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 800458e:	e038      	b.n	8004602 <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	781a      	ldrb	r2, [r3, #0]
 8004594:	7ebb      	ldrb	r3, [r7, #26]
 8004596:	4313      	orrs	r3, r2
 8004598:	b2da      	uxtb	r2, r3
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 800459e:	69fb      	ldr	r3, [r7, #28]
 80045a0:	781a      	ldrb	r2, [r3, #0]
 80045a2:	7e7b      	ldrb	r3, [r7, #25]
 80045a4:	4053      	eors	r3, r2
 80045a6:	b2da      	uxtb	r2, r3
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 80045ac:	7efb      	ldrb	r3, [r7, #27]
 80045ae:	3301      	adds	r3, #1
 80045b0:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 80045b2:	7efb      	ldrb	r3, [r7, #27]
 80045b4:	f003 0307 	and.w	r3, r3, #7
 80045b8:	76fb      	strb	r3, [r7, #27]
      len--;
 80045ba:	88fb      	ldrh	r3, [r7, #6]
 80045bc:	3b01      	subs	r3, #1
 80045be:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 80045c0:	7efb      	ldrb	r3, [r7, #27]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d114      	bne.n	80045f0 <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80045ca:	461a      	mov	r2, r3
 80045cc:	69fb      	ldr	r3, [r7, #28]
 80045ce:	4413      	add	r3, r2
 80045d0:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d801      	bhi.n	80045e0 <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 80045dc:	2301      	movs	r3, #1
 80045de:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d008      	beq.n	80045fc <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 80045ea:	2301      	movs	r3, #1
 80045ec:	767b      	strb	r3, [r7, #25]
 80045ee:	e005      	b.n	80045fc <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 80045f0:	7ebb      	ldrb	r3, [r7, #26]
 80045f2:	005b      	lsls	r3, r3, #1
 80045f4:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 80045f6:	7e7b      	ldrb	r3, [r7, #25]
 80045f8:	005b      	lsls	r3, r3, #1
 80045fa:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 80045fc:	88fb      	ldrh	r3, [r7, #6]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d1c6      	bne.n	8004590 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 8004602:	bf00      	nop
 8004604:	3724      	adds	r7, #36	; 0x24
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr

0800460e <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 800460e:	b580      	push	{r7, lr}
 8004610:	b082      	sub	sp, #8
 8004612:	af00      	add	r7, sp, #0
 8004614:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2200      	movs	r2, #0
 800461a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  u8g2->clip_y0 = 0;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800462c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004636:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  
  u8g2->cb->update_page_win(u8g2);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	4798      	blx	r3
}
 8004644:	bf00      	nop
 8004646:	3708      	adds	r7, #8
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b084      	sub	sp, #16
 8004650:	af00      	add	r7, sp, #0
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	60b9      	str	r1, [r7, #8]
 8004656:	603b      	str	r3, [r7, #0]
 8004658:	4613      	mov	r3, r2
 800465a:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2200      	movs	r2, #0
 8004660:	659a      	str	r2, [r3, #88]	; 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	683a      	ldr	r2, [r7, #0]
 8004666:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	68ba      	ldr	r2, [r7, #8]
 800466c:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	79fa      	ldrb	r2, [r7, #7]
 8004672:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  u8g2->tile_curr_row = 0;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2200      	movs	r2, #0
 800467a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2200      	movs	r2, #0
 8004682:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
  u8g2->bitmap_transparency = 0;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2200      	movs	r2, #0
 800468a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  
  u8g2->font_height_mode = 0; /* issue 2046 */
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2200      	movs	r2, #0
 8004692:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
  u8g2->draw_color = 1;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2201      	movs	r2, #1
 800469a:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  u8g2->is_auto_page_clear = 1;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2201      	movs	r2, #1
 80046a2:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
  
  u8g2->cb = u8g2_cb;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	69ba      	ldr	r2, [r7, #24]
 80046aa:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	68f8      	ldr	r0, [r7, #12]
 80046b4:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 80046b6:	68f8      	ldr	r0, [r7, #12]
 80046b8:	f7ff ffa9 	bl	800460e <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 80046bc:	68f8      	ldr	r0, [r7, #12]
 80046be:	f7ff fcb7 	bl	8004030 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
#endif
}
 80046ca:	bf00      	nop
 80046cc:	3710      	adds	r7, #16
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}

080046d2 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 80046d2:	b480      	push	{r7}
 80046d4:	b085      	sub	sp, #20
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80046e6:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 80046e8:	89fb      	ldrh	r3, [r7, #14]
 80046ea:	00db      	lsls	r3, r3, #3
 80046ec:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	89fa      	ldrh	r2, [r7, #14]
 80046f2:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  t = display_info->tile_width;
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	7c1b      	ldrb	r3, [r3, #16]
 80046f8:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 80046fa:	89fb      	ldrh	r3, [r7, #14]
 80046fc:	00db      	lsls	r3, r3, #3
 80046fe:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	89fa      	ldrh	r2, [r7, #14]
 8004704:	875a      	strh	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800470c:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 800470e:	89fb      	ldrh	r3, [r7, #14]
 8004710:	00db      	lsls	r3, r3, #3
 8004712:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	89fa      	ldrh	r2, [r7, #14]
 8004718:	87da      	strh	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_buf_height;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004720:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 8004722:	89fb      	ldrh	r3, [r7, #14]
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 800472a:	4413      	add	r3, r2
 800472c:	68ba      	ldr	r2, [r7, #8]
 800472e:	7c52      	ldrb	r2, [r2, #17]
 8004730:	4293      	cmp	r3, r2
 8004732:	dd08      	ble.n	8004746 <u8g2_update_dimension_common+0x74>
    t = display_info->tile_height - u8g2->tile_curr_row;
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	7c5b      	ldrb	r3, [r3, #17]
 8004738:	b29a      	uxth	r2, r3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004740:	b29b      	uxth	r3, r3
 8004742:	1ad3      	subs	r3, r2, r3
 8004744:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8004746:	89fb      	ldrh	r3, [r7, #14]
 8004748:	00db      	lsls	r3, r3, #3
 800474a:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  u8g2->buf_y1 += t;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8004768:	89fb      	ldrh	r3, [r7, #14]
 800476a:	4413      	add	r3, r2
 800476c:	b29a      	uxth	r2, r3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	8a9a      	ldrh	r2, [r3, #20]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  u8g2->height = display_info->pixel_height;
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	8ada      	ldrh	r2, [r3, #22]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 8004788:	bf00      	nop
 800478a:	3714      	adds	r7, #20
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af02      	add	r7, sp, #8
 800479a:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f8b3 0052 	ldrh.w	r0, [r3, #82]	; 0x52
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80047b4:	9300      	str	r3, [sp, #0]
 80047b6:	4603      	mov	r3, r0
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f7ff fdc3 	bl	8004344 <u8g2_IsIntersection>
 80047be:	4603      	mov	r3, r0
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d104      	bne.n	80047ce <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 80047cc:	e03b      	b.n	8004846 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2201      	movs	r2, #1
 80047d2:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d205      	bcs.n	80047f2 <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80047fe:	429a      	cmp	r2, r3
 8004800:	d905      	bls.n	800480e <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800481a:	429a      	cmp	r2, r3
 800481c:	d205      	bcs.n	800482a <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004836:	429a      	cmp	r2, r3
 8004838:	d905      	bls.n	8004846 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
}
 8004846:	bf00      	nop
 8004848:	3708      	adds	r7, #8
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}

0800484e <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 800484e:	b580      	push	{r7, lr}
 8004850:	b082      	sub	sp, #8
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f7ff ff3b 	bl	80046d2 <u8g2_update_dimension_common>
}
 800485c:	bf00      	nop
 800485e:	3708      	adds	r7, #8
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}

08004864 <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b082      	sub	sp, #8
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  
  u8g2->user_y0 = u8g2->buf_y0;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  u8g2->user_y1 = u8g2->buf_y1;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f7ff ff7b 	bl	8004794 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 800489e:	bf00      	nop
 80048a0:	3708      	adds	r7, #8
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}

080048a6 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80048a6:	b580      	push	{r7, lr}
 80048a8:	b086      	sub	sp, #24
 80048aa:	af02      	add	r7, sp, #8
 80048ac:	60f8      	str	r0, [r7, #12]
 80048ae:	4608      	mov	r0, r1
 80048b0:	4611      	mov	r1, r2
 80048b2:	461a      	mov	r2, r3
 80048b4:	4603      	mov	r3, r0
 80048b6:	817b      	strh	r3, [r7, #10]
 80048b8:	460b      	mov	r3, r1
 80048ba:	813b      	strh	r3, [r7, #8]
 80048bc:	4613      	mov	r3, r2
 80048be:	80fb      	strh	r3, [r7, #6]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 80048c0:	88f8      	ldrh	r0, [r7, #6]
 80048c2:	893a      	ldrh	r2, [r7, #8]
 80048c4:	8979      	ldrh	r1, [r7, #10]
 80048c6:	7e3b      	ldrb	r3, [r7, #24]
 80048c8:	9300      	str	r3, [sp, #0]
 80048ca:	4603      	mov	r3, r0
 80048cc:	68f8      	ldr	r0, [r7, #12]
 80048ce:	f7ff fc27 	bl	8004120 <u8g2_draw_hv_line_2dir>
}
 80048d2:	bf00      	nop
 80048d4:	3710      	adds	r7, #16
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}

080048da <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 80048da:	b480      	push	{r7}
 80048dc:	b083      	sub	sp, #12
 80048de:	af00      	add	r7, sp, #0
 80048e0:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 80048ea:	bf00      	nop
 80048ec:	370c      	adds	r7, #12
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr

080048f6 <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 80048f6:	b480      	push	{r7}
 80048f8:	b083      	sub	sp, #12
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	6078      	str	r0, [r7, #4]
 80048fe:	460b      	mov	r3, r1
 8004900:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8004902:	78fb      	ldrb	r3, [r7, #3]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d002      	beq.n	800490e <u8x8_ascii_next+0x18>
 8004908:	78fb      	ldrb	r3, [r7, #3]
 800490a:	2b0a      	cmp	r3, #10
 800490c:	d102      	bne.n	8004914 <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 800490e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004912:	e001      	b.n	8004918 <u8x8_ascii_next+0x22>
  return b;
 8004914:	78fb      	ldrb	r3, [r7, #3]
 8004916:	b29b      	uxth	r3, r3
}
 8004918:	4618      	mov	r0, r3
 800491a:	370c      	adds	r7, #12
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr

08004924 <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 8004924:	b590      	push	{r4, r7, lr}
 8004926:	b083      	sub	sp, #12
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	460b      	mov	r3, r1
 800492e:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	691c      	ldr	r4, [r3, #16]
 8004934:	78fa      	ldrb	r2, [r7, #3]
 8004936:	2300      	movs	r3, #0
 8004938:	2120      	movs	r1, #32
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	47a0      	blx	r4
 800493e:	4603      	mov	r3, r0
}
 8004940:	4618      	mov	r0, r3
 8004942:	370c      	adds	r7, #12
 8004944:	46bd      	mov	sp, r7
 8004946:	bd90      	pop	{r4, r7, pc}

08004948 <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8004948:	b590      	push	{r4, r7, lr}
 800494a:	b085      	sub	sp, #20
 800494c:	af00      	add	r7, sp, #0
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	460b      	mov	r3, r1
 8004952:	607a      	str	r2, [r7, #4]
 8004954:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	691c      	ldr	r4, [r3, #16]
 800495a:	7afa      	ldrb	r2, [r7, #11]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2117      	movs	r1, #23
 8004960:	68f8      	ldr	r0, [r7, #12]
 8004962:	47a0      	blx	r4
 8004964:	4603      	mov	r3, r0
}
 8004966:	4618      	mov	r0, r3
 8004968:	3714      	adds	r7, #20
 800496a:	46bd      	mov	sp, r7
 800496c:	bd90      	pop	{r4, r7, pc}

0800496e <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 800496e:	b580      	push	{r7, lr}
 8004970:	b082      	sub	sp, #8
 8004972:	af00      	add	r7, sp, #0
 8004974:	6078      	str	r0, [r7, #4]
 8004976:	460b      	mov	r3, r1
 8004978:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 800497a:	1cfb      	adds	r3, r7, #3
 800497c:	461a      	mov	r2, r3
 800497e:	2101      	movs	r1, #1
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f7ff ffe1 	bl	8004948 <u8x8_byte_SendBytes>
 8004986:	4603      	mov	r3, r0
}
 8004988:	4618      	mov	r0, r3
 800498a:	3708      	adds	r7, #8
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}

08004990 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8004990:	b590      	push	{r4, r7, lr}
 8004992:	b083      	sub	sp, #12
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	460b      	mov	r3, r1
 800499a:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	68dc      	ldr	r4, [r3, #12]
 80049a0:	78fa      	ldrb	r2, [r7, #3]
 80049a2:	2300      	movs	r3, #0
 80049a4:	2115      	movs	r1, #21
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	47a0      	blx	r4
 80049aa:	4603      	mov	r3, r0
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	370c      	adds	r7, #12
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd90      	pop	{r4, r7, pc}

080049b4 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 80049b4:	b590      	push	{r4, r7, lr}
 80049b6:	b083      	sub	sp, #12
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	460b      	mov	r3, r1
 80049be:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	68dc      	ldr	r4, [r3, #12]
 80049c4:	78fa      	ldrb	r2, [r7, #3]
 80049c6:	2300      	movs	r3, #0
 80049c8:	2116      	movs	r1, #22
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	47a0      	blx	r4
 80049ce:	4603      	mov	r3, r0
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	370c      	adds	r7, #12
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd90      	pop	{r4, r7, pc}

080049d8 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 80049d8:	b590      	push	{r4, r7, lr}
 80049da:	b085      	sub	sp, #20
 80049dc:	af00      	add	r7, sp, #0
 80049de:	60f8      	str	r0, [r7, #12]
 80049e0:	460b      	mov	r3, r1
 80049e2:	607a      	str	r2, [r7, #4]
 80049e4:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	68dc      	ldr	r4, [r3, #12]
 80049ea:	7afa      	ldrb	r2, [r7, #11]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2117      	movs	r1, #23
 80049f0:	68f8      	ldr	r0, [r7, #12]
 80049f2:	47a0      	blx	r4
 80049f4:	4603      	mov	r3, r0
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3714      	adds	r7, #20
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd90      	pop	{r4, r7, pc}

080049fe <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 80049fe:	b590      	push	{r4, r7, lr}
 8004a00:	b083      	sub	sp, #12
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	68dc      	ldr	r4, [r3, #12]
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	2118      	movs	r1, #24
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	47a0      	blx	r4
 8004a14:	4603      	mov	r3, r0
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	370c      	adds	r7, #12
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd90      	pop	{r4, r7, pc}

08004a1e <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8004a1e:	b590      	push	{r4, r7, lr}
 8004a20:	b083      	sub	sp, #12
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	68dc      	ldr	r4, [r3, #12]
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	2119      	movs	r1, #25
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	47a0      	blx	r4
 8004a34:	4603      	mov	r3, r0
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	370c      	adds	r7, #12
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd90      	pop	{r4, r7, pc}

08004a3e <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8004a3e:	b590      	push	{r4, r7, lr}
 8004a40:	b085      	sub	sp, #20
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
 8004a46:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	73fb      	strb	r3, [r7, #15]
    data++;
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	3301      	adds	r3, #1
 8004a52:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8004a54:	7bfb      	ldrb	r3, [r7, #15]
 8004a56:	2bfe      	cmp	r3, #254	; 0xfe
 8004a58:	d031      	beq.n	8004abe <u8x8_cad_SendSequence+0x80>
 8004a5a:	2bfe      	cmp	r3, #254	; 0xfe
 8004a5c:	dc3d      	bgt.n	8004ada <u8x8_cad_SendSequence+0x9c>
 8004a5e:	2b19      	cmp	r3, #25
 8004a60:	dc3b      	bgt.n	8004ada <u8x8_cad_SendSequence+0x9c>
 8004a62:	2b18      	cmp	r3, #24
 8004a64:	da23      	bge.n	8004aae <u8x8_cad_SendSequence+0x70>
 8004a66:	2b16      	cmp	r3, #22
 8004a68:	dc02      	bgt.n	8004a70 <u8x8_cad_SendSequence+0x32>
 8004a6a:	2b15      	cmp	r3, #21
 8004a6c:	da03      	bge.n	8004a76 <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8004a6e:	e034      	b.n	8004ada <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 8004a70:	2b17      	cmp	r3, #23
 8004a72:	d00e      	beq.n	8004a92 <u8x8_cad_SendSequence+0x54>
	return;
 8004a74:	e031      	b.n	8004ada <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	781b      	ldrb	r3, [r3, #0]
 8004a7a:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	68dc      	ldr	r4, [r3, #12]
 8004a80:	7bba      	ldrb	r2, [r7, #14]
 8004a82:	7bf9      	ldrb	r1, [r7, #15]
 8004a84:	2300      	movs	r3, #0
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	47a0      	blx	r4
	  data++;
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	3301      	adds	r3, #1
 8004a8e:	603b      	str	r3, [r7, #0]
	  break;
 8004a90:	e022      	b.n	8004ad8 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	781b      	ldrb	r3, [r3, #0]
 8004a96:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8004a98:	f107 030e 	add.w	r3, r7, #14
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	2101      	movs	r1, #1
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f7ff ff99 	bl	80049d8 <u8x8_cad_SendData>
	  data++;
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	3301      	adds	r3, #1
 8004aaa:	603b      	str	r3, [r7, #0]
	  break;
 8004aac:	e014      	b.n	8004ad8 <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	68dc      	ldr	r4, [r3, #12]
 8004ab2:	7bf9      	ldrb	r1, [r7, #15]
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	47a0      	blx	r4
	  break;
 8004abc:	e00c      	b.n	8004ad8 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	781b      	ldrb	r3, [r3, #0]
 8004ac2:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8004ac4:	7bbb      	ldrb	r3, [r7, #14]
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	2129      	movs	r1, #41	; 0x29
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f000 f9d5 	bl	8004e7a <u8x8_gpio_call>
	  data++;
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	3301      	adds	r3, #1
 8004ad4:	603b      	str	r3, [r7, #0]
	  break;
 8004ad6:	bf00      	nop
    cmd = *data;
 8004ad8:	e7b6      	b.n	8004a48 <u8x8_cad_SendSequence+0xa>
	return;
 8004ada:	bf00      	nop
    }
  }
}
 8004adc:	3714      	adds	r7, #20
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd90      	pop	{r4, r7, pc}
	...

08004ae4 <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8004ae4:	b590      	push	{r4, r7, lr}
 8004ae6:	b085      	sub	sp, #20
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	60f8      	str	r0, [r7, #12]
 8004aec:	607b      	str	r3, [r7, #4]
 8004aee:	460b      	mov	r3, r1
 8004af0:	72fb      	strb	r3, [r7, #11]
 8004af2:	4613      	mov	r3, r2
 8004af4:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 8004af6:	7afb      	ldrb	r3, [r7, #11]
 8004af8:	3b14      	subs	r3, #20
 8004afa:	2b05      	cmp	r3, #5
 8004afc:	d82f      	bhi.n	8004b5e <u8x8_cad_001+0x7a>
 8004afe:	a201      	add	r2, pc, #4	; (adr r2, 8004b04 <u8x8_cad_001+0x20>)
 8004b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b04:	08004b4d 	.word	0x08004b4d
 8004b08:	08004b1d 	.word	0x08004b1d
 8004b0c:	08004b31 	.word	0x08004b31
 8004b10:	08004b45 	.word	0x08004b45
 8004b14:	08004b4d 	.word	0x08004b4d
 8004b18:	08004b4d 	.word	0x08004b4d
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 8004b1c:	2100      	movs	r1, #0
 8004b1e:	68f8      	ldr	r0, [r7, #12]
 8004b20:	f7ff ff00 	bl	8004924 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8004b24:	7abb      	ldrb	r3, [r7, #10]
 8004b26:	4619      	mov	r1, r3
 8004b28:	68f8      	ldr	r0, [r7, #12]
 8004b2a:	f7ff ff20 	bl	800496e <u8x8_byte_SendByte>
      break;
 8004b2e:	e018      	b.n	8004b62 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
 8004b30:	2100      	movs	r1, #0
 8004b32:	68f8      	ldr	r0, [r7, #12]
 8004b34:	f7ff fef6 	bl	8004924 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8004b38:	7abb      	ldrb	r3, [r7, #10]
 8004b3a:	4619      	mov	r1, r3
 8004b3c:	68f8      	ldr	r0, [r7, #12]
 8004b3e:	f7ff ff16 	bl	800496e <u8x8_byte_SendByte>
      break;
 8004b42:	e00e      	b.n	8004b62 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 8004b44:	2101      	movs	r1, #1
 8004b46:	68f8      	ldr	r0, [r7, #12]
 8004b48:	f7ff feec 	bl	8004924 <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	691c      	ldr	r4, [r3, #16]
 8004b50:	7aba      	ldrb	r2, [r7, #10]
 8004b52:	7af9      	ldrb	r1, [r7, #11]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	68f8      	ldr	r0, [r7, #12]
 8004b58:	47a0      	blx	r4
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	e002      	b.n	8004b64 <u8x8_cad_001+0x80>
    default:
      return 0;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	e000      	b.n	8004b64 <u8x8_cad_001+0x80>
  }
  return 1;
 8004b62:	2301      	movs	r3, #1
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3714      	adds	r7, #20
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd90      	pop	{r4, r7, pc}

08004b6c <u8x8_d_sh1107_generic>:
  }
  return 1;
}

static uint8_t u8x8_d_sh1107_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b086      	sub	sp, #24
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	60f8      	str	r0, [r7, #12]
 8004b74:	607b      	str	r3, [r7, #4]
 8004b76:	460b      	mov	r3, r1
 8004b78:	72fb      	strb	r3, [r7, #11]
 8004b7a:	4613      	mov	r3, r2
 8004b7c:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 8004b7e:	7afb      	ldrb	r3, [r7, #11]
 8004b80:	3b0b      	subs	r3, #11
 8004b82:	2b04      	cmp	r3, #4
 8004b84:	f200 8086 	bhi.w	8004c94 <u8x8_d_sh1107_generic+0x128>
 8004b88:	a201      	add	r2, pc, #4	; (adr r2, 8004b90 <u8x8_d_sh1107_generic+0x24>)
 8004b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b8e:	bf00      	nop
 8004b90:	08004ba5 	.word	0x08004ba5
 8004b94:	08004c95 	.word	0x08004c95
 8004b98:	08004bbf 	.word	0x08004bbf
 8004b9c:	08004bf1 	.word	0x08004bf1
 8004ba0:	08004c11 	.word	0x08004c11
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_sh1107_64x128_noname_init_seq);    
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8004ba4:	7abb      	ldrb	r3, [r7, #10]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d104      	bne.n	8004bb4 <u8x8_d_sh1107_generic+0x48>
	u8x8_cad_SendSequence(u8x8, u8x8_d_sh1107_64x128_noname_powersave0_seq);
 8004baa:	493e      	ldr	r1, [pc, #248]	; (8004ca4 <u8x8_d_sh1107_generic+0x138>)
 8004bac:	68f8      	ldr	r0, [r7, #12]
 8004bae:	f7ff ff46 	bl	8004a3e <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_sh1107_64x128_noname_powersave1_seq);
      break;
 8004bb2:	e071      	b.n	8004c98 <u8x8_d_sh1107_generic+0x12c>
	u8x8_cad_SendSequence(u8x8, u8x8_d_sh1107_64x128_noname_powersave1_seq);
 8004bb4:	493c      	ldr	r1, [pc, #240]	; (8004ca8 <u8x8_d_sh1107_generic+0x13c>)
 8004bb6:	68f8      	ldr	r0, [r7, #12]
 8004bb8:	f7ff ff41 	bl	8004a3e <u8x8_cad_SendSequence>
      break;
 8004bbc:	e06c      	b.n	8004c98 <u8x8_d_sh1107_generic+0x12c>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 8004bbe:	7abb      	ldrb	r3, [r7, #10]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d10a      	bne.n	8004bda <u8x8_d_sh1107_generic+0x6e>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_sh1107_64x128_noname_flip0_seq);
 8004bc4:	4939      	ldr	r1, [pc, #228]	; (8004cac <u8x8_d_sh1107_generic+0x140>)
 8004bc6:	68f8      	ldr	r0, [r7, #12]
 8004bc8:	f7ff ff39 	bl	8004a3e <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	7c9a      	ldrb	r2, [r3, #18]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_sh1107_64x128_noname_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 8004bd8:	e05e      	b.n	8004c98 <u8x8_d_sh1107_generic+0x12c>
	u8x8_cad_SendSequence(u8x8, u8x8_d_sh1107_64x128_noname_flip1_seq);
 8004bda:	4935      	ldr	r1, [pc, #212]	; (8004cb0 <u8x8_d_sh1107_generic+0x144>)
 8004bdc:	68f8      	ldr	r0, [r7, #12]
 8004bde:	f7ff ff2e 	bl	8004a3e <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	7cda      	ldrb	r2, [r3, #19]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      break;
 8004bee:	e053      	b.n	8004c98 <u8x8_d_sh1107_generic+0x12c>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8004bf0:	68f8      	ldr	r0, [r7, #12]
 8004bf2:	f7ff ff04 	bl	80049fe <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 8004bf6:	2181      	movs	r1, #129	; 0x81
 8004bf8:	68f8      	ldr	r0, [r7, #12]
 8004bfa:	f7ff fec9 	bl	8004990 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* sh1107 has range from 0 to 255 */
 8004bfe:	7abb      	ldrb	r3, [r7, #10]
 8004c00:	4619      	mov	r1, r3
 8004c02:	68f8      	ldr	r0, [r7, #12]
 8004c04:	f7ff fed6 	bl	80049b4 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8004c08:	68f8      	ldr	r0, [r7, #12]
 8004c0a:	f7ff ff08 	bl	8004a1e <u8x8_cad_EndTransfer>
      break;
 8004c0e:	e043      	b.n	8004c98 <u8x8_d_sh1107_generic+0x12c>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 8004c10:	68f8      	ldr	r0, [r7, #12]
 8004c12:	f7ff fef4 	bl	80049fe <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	795b      	ldrb	r3, [r3, #5]
 8004c1a:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 8004c1c:	7dfb      	ldrb	r3, [r7, #23]
 8004c1e:	00db      	lsls	r3, r3, #3
 8004c20:	75fb      	strb	r3, [r7, #23]
      x += u8x8->x_offset;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8004c28:	7dfb      	ldrb	r3, [r7, #23]
 8004c2a:	4413      	add	r3, r2
 8004c2c:	75fb      	strb	r3, [r7, #23]

      //u8x8_cad_SendCmd(u8x8, 0x040 ); /* set line offset to 0 */

      // set column address
      u8x8_cad_SendCmd(u8x8, 0x010 | (x >> 4));
 8004c2e:	7dfb      	ldrb	r3, [r7, #23]
 8004c30:	091b      	lsrs	r3, r3, #4
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	f043 0310 	orr.w	r3, r3, #16
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	4619      	mov	r1, r3
 8004c3c:	68f8      	ldr	r0, [r7, #12]
 8004c3e:	f7ff fea7 	bl	8004990 <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x000 | ((x & 15))); /* probably wrong, should be SendCmd */
 8004c42:	7dfb      	ldrb	r3, [r7, #23]
 8004c44:	f003 030f 	and.w	r3, r3, #15
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	4619      	mov	r1, r3
 8004c4c:	68f8      	ldr	r0, [r7, #12]
 8004c4e:	f7ff fe9f 	bl	8004990 <u8x8_cad_SendCmd>
      
      // set page address
      u8x8_cad_SendCmd(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos)); /* probably wrong, should be SendCmd */
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	799b      	ldrb	r3, [r3, #6]
 8004c56:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	4619      	mov	r1, r3
 8004c5e:	68f8      	ldr	r0, [r7, #12]
 8004c60:	f7ff fe96 	bl	8004990 <u8x8_cad_SendCmd>
    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	791b      	ldrb	r3, [r3, #4]
 8004c68:	75bb      	strb	r3, [r7, #22]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	613b      	str	r3, [r7, #16]
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 8004c70:	7dbb      	ldrb	r3, [r7, #22]
 8004c72:	00db      	lsls	r3, r3, #3
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	693a      	ldr	r2, [r7, #16]
 8004c78:	4619      	mov	r1, r3
 8004c7a:	68f8      	ldr	r0, [r7, #12]
 8004c7c:	f7ff feac 	bl	80049d8 <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 8004c80:	7abb      	ldrb	r3, [r7, #10]
 8004c82:	3b01      	subs	r3, #1
 8004c84:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 8004c86:	7abb      	ldrb	r3, [r7, #10]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d1eb      	bne.n	8004c64 <u8x8_d_sh1107_generic+0xf8>
      
      u8x8_cad_EndTransfer(u8x8);
 8004c8c:	68f8      	ldr	r0, [r7, #12]
 8004c8e:	f7ff fec6 	bl	8004a1e <u8x8_cad_EndTransfer>
      break;
 8004c92:	e001      	b.n	8004c98 <u8x8_d_sh1107_generic+0x12c>
    default:
      return 0;
 8004c94:	2300      	movs	r3, #0
 8004c96:	e000      	b.n	8004c9a <u8x8_d_sh1107_generic+0x12e>
  }
  return 1;
 8004c98:	2301      	movs	r3, #1
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3718      	adds	r7, #24
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	080060a0 	.word	0x080060a0
 8004ca8:	080060a8 	.word	0x080060a8
 8004cac:	080060b0 	.word	0x080060b0
 8004cb0:	080060b8 	.word	0x080060b8

08004cb4 <u8x8_d_sh1107_pimoroni_128x128>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 128
};

uint8_t u8x8_d_sh1107_pimoroni_128x128(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b084      	sub	sp, #16
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	60f8      	str	r0, [r7, #12]
 8004cbc:	607b      	str	r3, [r7, #4]
 8004cbe:	460b      	mov	r3, r1
 8004cc0:	72fb      	strb	r3, [r7, #11]
 8004cc2:	4613      	mov	r3, r2
 8004cc4:	72bb      	strb	r3, [r7, #10]
    
  if ( u8x8_d_sh1107_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 8004cc6:	7aba      	ldrb	r2, [r7, #10]
 8004cc8:	7af9      	ldrb	r1, [r7, #11]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	68f8      	ldr	r0, [r7, #12]
 8004cce:	f7ff ff4d 	bl	8004b6c <u8x8_d_sh1107_generic>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d001      	beq.n	8004cdc <u8x8_d_sh1107_pimoroni_128x128+0x28>
    return 1;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e014      	b.n	8004d06 <u8x8_d_sh1107_pimoroni_128x128+0x52>
  
  switch(msg)
 8004cdc:	7afb      	ldrb	r3, [r7, #11]
 8004cde:	2b09      	cmp	r3, #9
 8004ce0:	d009      	beq.n	8004cf6 <u8x8_d_sh1107_pimoroni_128x128+0x42>
 8004ce2:	2b0a      	cmp	r3, #10
 8004ce4:	d10c      	bne.n	8004d00 <u8x8_d_sh1107_pimoroni_128x128+0x4c>
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 8004ce6:	68f8      	ldr	r0, [r7, #12]
 8004ce8:	f000 f82a 	bl	8004d40 <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_sh1107_128x128_init_seq);    
 8004cec:	4908      	ldr	r1, [pc, #32]	; (8004d10 <u8x8_d_sh1107_pimoroni_128x128+0x5c>)
 8004cee:	68f8      	ldr	r0, [r7, #12]
 8004cf0:	f7ff fea5 	bl	8004a3e <u8x8_cad_SendSequence>
      break;
 8004cf4:	e006      	b.n	8004d04 <u8x8_d_sh1107_pimoroni_128x128+0x50>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_sh1107_pimoroni_128x128_display_info);
 8004cf6:	4907      	ldr	r1, [pc, #28]	; (8004d14 <u8x8_d_sh1107_pimoroni_128x128+0x60>)
 8004cf8:	68f8      	ldr	r0, [r7, #12]
 8004cfa:	f000 f80d 	bl	8004d18 <u8x8_d_helper_display_setup_memory>
      break;
 8004cfe:	e001      	b.n	8004d04 <u8x8_d_sh1107_pimoroni_128x128+0x50>
    default:
      return 0;
 8004d00:	2300      	movs	r3, #0
 8004d02:	e000      	b.n	8004d06 <u8x8_d_sh1107_pimoroni_128x128+0x52>
  }
  return 1;
 8004d04:	2301      	movs	r3, #1
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3710      	adds	r7, #16
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	bf00      	nop
 8004d10:	080060c0 	.word	0x080060c0
 8004d14:	080060f0 	.word	0x080060f0

08004d18 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b083      	sub	sp, #12
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	683a      	ldr	r2, [r7, #0]
 8004d26:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	7c9a      	ldrb	r2, [r3, #18]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8004d34:	bf00      	nop
 8004d36:	370c      	adds	r7, #12
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr

08004d40 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8004d40:	b590      	push	{r4, r7, lr}
 8004d42:	b083      	sub	sp, #12
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	695c      	ldr	r4, [r3, #20]
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	2200      	movs	r2, #0
 8004d50:	2128      	movs	r1, #40	; 0x28
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	68dc      	ldr	r4, [r3, #12]
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	2114      	movs	r1, #20
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8004d64:	2201      	movs	r2, #1
 8004d66:	214b      	movs	r1, #75	; 0x4b
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f000 f886 	bl	8004e7a <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	791b      	ldrb	r3, [r3, #4]
 8004d74:	461a      	mov	r2, r3
 8004d76:	2129      	movs	r1, #41	; 0x29
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f000 f87e 	bl	8004e7a <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8004d7e:	2200      	movs	r2, #0
 8004d80:	214b      	movs	r1, #75	; 0x4b
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f000 f879 	bl	8004e7a <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	791b      	ldrb	r3, [r3, #4]
 8004d8e:	461a      	mov	r2, r3
 8004d90:	2129      	movs	r1, #41	; 0x29
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f000 f871 	bl	8004e7a <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8004d98:	2201      	movs	r2, #1
 8004d9a:	214b      	movs	r1, #75	; 0x4b
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f000 f86c 	bl	8004e7a <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	795b      	ldrb	r3, [r3, #5]
 8004da8:	461a      	mov	r2, r3
 8004daa:	2129      	movs	r1, #41	; 0x29
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f000 f864 	bl	8004e7a <u8x8_gpio_call>
}    
 8004db2:	bf00      	nop
 8004db4:	370c      	adds	r7, #12
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd90      	pop	{r4, r7, pc}

08004dba <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8004dba:	b590      	push	{r4, r7, lr}
 8004dbc:	b085      	sub	sp, #20
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	6078      	str	r0, [r7, #4]
 8004dc2:	4608      	mov	r0, r1
 8004dc4:	4611      	mov	r1, r2
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	4603      	mov	r3, r0
 8004dca:	70fb      	strb	r3, [r7, #3]
 8004dcc:	460b      	mov	r3, r1
 8004dce:	70bb      	strb	r3, [r7, #2]
 8004dd0:	4613      	mov	r3, r2
 8004dd2:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 8004dd4:	78fb      	ldrb	r3, [r7, #3]
 8004dd6:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 8004dd8:	78bb      	ldrb	r3, [r7, #2]
 8004dda:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 8004ddc:	787b      	ldrb	r3, [r7, #1]
 8004dde:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 8004de0:	6a3b      	ldr	r3, [r7, #32]
 8004de2:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	689c      	ldr	r4, [r3, #8]
 8004de8:	f107 0308 	add.w	r3, r7, #8
 8004dec:	2201      	movs	r2, #1
 8004dee:	210f      	movs	r1, #15
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	47a0      	blx	r4
 8004df4:	4603      	mov	r3, r0
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3714      	adds	r7, #20
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd90      	pop	{r4, r7, pc}

08004dfe <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 8004dfe:	b590      	push	{r4, r7, lr}
 8004e00:	b083      	sub	sp, #12
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	689c      	ldr	r4, [r3, #8]
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	2109      	movs	r1, #9
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	47a0      	blx	r4
}
 8004e14:	bf00      	nop
 8004e16:	370c      	adds	r7, #12
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd90      	pop	{r4, r7, pc}

08004e1c <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 8004e1c:	b590      	push	{r4, r7, lr}
 8004e1e:	b083      	sub	sp, #12
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	689c      	ldr	r4, [r3, #8]
 8004e28:	2300      	movs	r3, #0
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	210a      	movs	r1, #10
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	47a0      	blx	r4
  /* u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, 0, NULL);  */ /* It would make sense to call flip mode 0 here after U8X8_MSG_DISPLAY_INIT */
}
 8004e32:	bf00      	nop
 8004e34:	370c      	adds	r7, #12
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd90      	pop	{r4, r7, pc}

08004e3a <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 8004e3a:	b590      	push	{r4, r7, lr}
 8004e3c:	b083      	sub	sp, #12
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	6078      	str	r0, [r7, #4]
 8004e42:	460b      	mov	r3, r1
 8004e44:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	689c      	ldr	r4, [r3, #8]
 8004e4a:	78fa      	ldrb	r2, [r7, #3]
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	210b      	movs	r1, #11
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	47a0      	blx	r4
}
 8004e54:	bf00      	nop
 8004e56:	370c      	adds	r7, #12
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd90      	pop	{r4, r7, pc}

08004e5c <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 8004e5c:	b590      	push	{r4, r7, lr}
 8004e5e:	b083      	sub	sp, #12
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	689c      	ldr	r4, [r3, #8]
 8004e68:	2300      	movs	r3, #0
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	2110      	movs	r1, #16
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	47a0      	blx	r4
}
 8004e72:	bf00      	nop
 8004e74:	370c      	adds	r7, #12
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd90      	pop	{r4, r7, pc}

08004e7a <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8004e7a:	b590      	push	{r4, r7, lr}
 8004e7c:	b083      	sub	sp, #12
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	6078      	str	r0, [r7, #4]
 8004e82:	460b      	mov	r3, r1
 8004e84:	70fb      	strb	r3, [r7, #3]
 8004e86:	4613      	mov	r3, r2
 8004e88:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	695c      	ldr	r4, [r3, #20]
 8004e8e:	78ba      	ldrb	r2, [r7, #2]
 8004e90:	78f9      	ldrb	r1, [r7, #3]
 8004e92:	2300      	movs	r3, #0
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	47a0      	blx	r4
}
 8004e98:	bf00      	nop
 8004e9a:	370c      	adds	r7, #12
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd90      	pop	{r4, r7, pc}

08004ea0 <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b085      	sub	sp, #20
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	60f8      	str	r0, [r7, #12]
 8004ea8:	607b      	str	r3, [r7, #4]
 8004eaa:	460b      	mov	r3, r1
 8004eac:	72fb      	strb	r3, [r7, #11]
 8004eae:	4613      	mov	r3, r2
 8004eb0:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 8004eb2:	2300      	movs	r3, #0
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3714      	adds	r7, #20
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr

08004ec0 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b083      	sub	sp, #12
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4a11      	ldr	r2, [pc, #68]	; (8004f18 <u8x8_SetupDefaults+0x58>)
 8004ed2:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	4a10      	ldr	r2, [pc, #64]	; (8004f18 <u8x8_SetupDefaults+0x58>)
 8004ed8:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4a0e      	ldr	r2, [pc, #56]	; (8004f18 <u8x8_SetupDefaults+0x58>)
 8004ede:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	4a0d      	ldr	r2, [pc, #52]	; (8004f18 <u8x8_SetupDefaults+0x58>)
 8004ee4:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	22ff      	movs	r2, #255	; 0xff
 8004f00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	22ff      	movs	r2, #255	; 0xff
 8004f08:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8004f0c:	bf00      	nop
 8004f0e:	370c      	adds	r7, #12
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr
 8004f18:	08004ea1 	.word	0x08004ea1

08004f1c <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b084      	sub	sp, #16
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	60f8      	str	r0, [r7, #12]
 8004f24:	60b9      	str	r1, [r7, #8]
 8004f26:	607a      	str	r2, [r7, #4]
 8004f28:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 8004f2a:	68f8      	ldr	r0, [r7, #12]
 8004f2c:	f7ff ffc8 	bl	8004ec0 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	68ba      	ldr	r2, [r7, #8]
 8004f34:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	683a      	ldr	r2, [r7, #0]
 8004f40:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	69ba      	ldr	r2, [r7, #24]
 8004f46:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8004f48:	68f8      	ldr	r0, [r7, #12]
 8004f4a:	f7ff ff58 	bl	8004dfe <u8x8_SetupMemory>
}
 8004f4e:	bf00      	nop
 8004f50:	3710      	adds	r7, #16
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}

08004f56 <memset>:
 8004f56:	4402      	add	r2, r0
 8004f58:	4603      	mov	r3, r0
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d100      	bne.n	8004f60 <memset+0xa>
 8004f5e:	4770      	bx	lr
 8004f60:	f803 1b01 	strb.w	r1, [r3], #1
 8004f64:	e7f9      	b.n	8004f5a <memset+0x4>
	...

08004f68 <__libc_init_array>:
 8004f68:	b570      	push	{r4, r5, r6, lr}
 8004f6a:	4d0d      	ldr	r5, [pc, #52]	; (8004fa0 <__libc_init_array+0x38>)
 8004f6c:	4c0d      	ldr	r4, [pc, #52]	; (8004fa4 <__libc_init_array+0x3c>)
 8004f6e:	1b64      	subs	r4, r4, r5
 8004f70:	10a4      	asrs	r4, r4, #2
 8004f72:	2600      	movs	r6, #0
 8004f74:	42a6      	cmp	r6, r4
 8004f76:	d109      	bne.n	8004f8c <__libc_init_array+0x24>
 8004f78:	4d0b      	ldr	r5, [pc, #44]	; (8004fa8 <__libc_init_array+0x40>)
 8004f7a:	4c0c      	ldr	r4, [pc, #48]	; (8004fac <__libc_init_array+0x44>)
 8004f7c:	f000 f818 	bl	8004fb0 <_init>
 8004f80:	1b64      	subs	r4, r4, r5
 8004f82:	10a4      	asrs	r4, r4, #2
 8004f84:	2600      	movs	r6, #0
 8004f86:	42a6      	cmp	r6, r4
 8004f88:	d105      	bne.n	8004f96 <__libc_init_array+0x2e>
 8004f8a:	bd70      	pop	{r4, r5, r6, pc}
 8004f8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f90:	4798      	blx	r3
 8004f92:	3601      	adds	r6, #1
 8004f94:	e7ee      	b.n	8004f74 <__libc_init_array+0xc>
 8004f96:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f9a:	4798      	blx	r3
 8004f9c:	3601      	adds	r6, #1
 8004f9e:	e7f2      	b.n	8004f86 <__libc_init_array+0x1e>
 8004fa0:	08006110 	.word	0x08006110
 8004fa4:	08006110 	.word	0x08006110
 8004fa8:	08006110 	.word	0x08006110
 8004fac:	08006114 	.word	0x08006114

08004fb0 <_init>:
 8004fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fb2:	bf00      	nop
 8004fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fb6:	bc08      	pop	{r3}
 8004fb8:	469e      	mov	lr, r3
 8004fba:	4770      	bx	lr

08004fbc <_fini>:
 8004fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fbe:	bf00      	nop
 8004fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fc2:	bc08      	pop	{r3}
 8004fc4:	469e      	mov	lr, r3
 8004fc6:	4770      	bx	lr
