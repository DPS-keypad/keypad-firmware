
Screen_example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005898  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001128  08005a2c  08005a2c  00015a2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b54  08006b54  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08006b54  08006b54  00016b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b5c  08006b5c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b5c  08006b5c  00016b5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b60  08006b60  00016b60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006b64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000029c  2000000c  08006b70  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a8  08006b70  000202a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0004cda5  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003998  00000000  00000000  0006ce24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003688  00000000  00000000  000707c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002908  00000000  00000000  00073e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000182ee  00000000  00000000  00076750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e324  00000000  00000000  0008ea3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ab6a9  00000000  00000000  000acd62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000efbc  00000000  00000000  0015840c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  001673c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08005a14 	.word	0x08005a14

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08005a14 	.word	0x08005a14

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b970 	b.w	80004cc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	460d      	mov	r5, r1
 800020c:	4604      	mov	r4, r0
 800020e:	460f      	mov	r7, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4694      	mov	ip, r2
 8000218:	d965      	bls.n	80002e6 <__udivmoddi4+0xe2>
 800021a:	fab2 f382 	clz	r3, r2
 800021e:	b143      	cbz	r3, 8000232 <__udivmoddi4+0x2e>
 8000220:	fa02 fc03 	lsl.w	ip, r2, r3
 8000224:	f1c3 0220 	rsb	r2, r3, #32
 8000228:	409f      	lsls	r7, r3
 800022a:	fa20 f202 	lsr.w	r2, r0, r2
 800022e:	4317      	orrs	r7, r2
 8000230:	409c      	lsls	r4, r3
 8000232:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000236:	fa1f f58c 	uxth.w	r5, ip
 800023a:	fbb7 f1fe 	udiv	r1, r7, lr
 800023e:	0c22      	lsrs	r2, r4, #16
 8000240:	fb0e 7711 	mls	r7, lr, r1, r7
 8000244:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000248:	fb01 f005 	mul.w	r0, r1, r5
 800024c:	4290      	cmp	r0, r2
 800024e:	d90a      	bls.n	8000266 <__udivmoddi4+0x62>
 8000250:	eb1c 0202 	adds.w	r2, ip, r2
 8000254:	f101 37ff 	add.w	r7, r1, #4294967295
 8000258:	f080 811c 	bcs.w	8000494 <__udivmoddi4+0x290>
 800025c:	4290      	cmp	r0, r2
 800025e:	f240 8119 	bls.w	8000494 <__udivmoddi4+0x290>
 8000262:	3902      	subs	r1, #2
 8000264:	4462      	add	r2, ip
 8000266:	1a12      	subs	r2, r2, r0
 8000268:	b2a4      	uxth	r4, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000276:	fb00 f505 	mul.w	r5, r0, r5
 800027a:	42a5      	cmp	r5, r4
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x90>
 800027e:	eb1c 0404 	adds.w	r4, ip, r4
 8000282:	f100 32ff 	add.w	r2, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x294>
 800028a:	42a5      	cmp	r5, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x294>
 8000290:	4464      	add	r4, ip
 8000292:	3802      	subs	r0, #2
 8000294:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000298:	1b64      	subs	r4, r4, r5
 800029a:	2100      	movs	r1, #0
 800029c:	b11e      	cbz	r6, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40dc      	lsrs	r4, r3
 80002a0:	2300      	movs	r3, #0
 80002a2:	e9c6 4300 	strd	r4, r3, [r6]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d908      	bls.n	80002c0 <__udivmoddi4+0xbc>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80ed 	beq.w	800048e <__udivmoddi4+0x28a>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	d149      	bne.n	800035c <__udivmoddi4+0x158>
 80002c8:	42ab      	cmp	r3, r5
 80002ca:	d302      	bcc.n	80002d2 <__udivmoddi4+0xce>
 80002cc:	4282      	cmp	r2, r0
 80002ce:	f200 80f8 	bhi.w	80004c2 <__udivmoddi4+0x2be>
 80002d2:	1a84      	subs	r4, r0, r2
 80002d4:	eb65 0203 	sbc.w	r2, r5, r3
 80002d8:	2001      	movs	r0, #1
 80002da:	4617      	mov	r7, r2
 80002dc:	2e00      	cmp	r6, #0
 80002de:	d0e2      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	e9c6 4700 	strd	r4, r7, [r6]
 80002e4:	e7df      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xe6>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f382 	clz	r3, r2
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2101      	movs	r1, #1
 8000300:	fbb2 f5f7 	udiv	r5, r2, r7
 8000304:	fb07 2015 	mls	r0, r7, r5, r2
 8000308:	0c22      	lsrs	r2, r4, #16
 800030a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030e:	fb0e f005 	mul.w	r0, lr, r5
 8000312:	4290      	cmp	r0, r2
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x124>
 8000316:	eb1c 0202 	adds.w	r2, ip, r2
 800031a:	f105 38ff 	add.w	r8, r5, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4290      	cmp	r0, r2
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2b8>
 8000326:	4645      	mov	r5, r8
 8000328:	1a12      	subs	r2, r2, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000330:	fb07 2210 	mls	r2, r7, r0, r2
 8000334:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x14e>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 32ff 	add.w	r2, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x14c>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2c2>
 8000350:	4610      	mov	r0, r2
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035a:	e79f      	b.n	800029c <__udivmoddi4+0x98>
 800035c:	f1c1 0720 	rsb	r7, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa05 f401 	lsl.w	r4, r5, r1
 800036e:	fa20 f307 	lsr.w	r3, r0, r7
 8000372:	40fd      	lsrs	r5, r7
 8000374:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fbb5 f8f9 	udiv	r8, r5, r9
 800037e:	fa1f fe8c 	uxth.w	lr, ip
 8000382:	fb09 5518 	mls	r5, r9, r8, r5
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb08 f50e 	mul.w	r5, r8, lr
 8000390:	42a5      	cmp	r5, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	fa00 f001 	lsl.w	r0, r0, r1
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2b4>
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2b4>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4464      	add	r4, ip
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	b29d      	uxth	r5, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2ac>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2ac>
 80003da:	3b02      	subs	r3, #2
 80003dc:	4464      	add	r4, ip
 80003de:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e2:	fba3 9502 	umull	r9, r5, r3, r2
 80003e6:	eba4 040e 	sub.w	r4, r4, lr
 80003ea:	42ac      	cmp	r4, r5
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46ae      	mov	lr, r5
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x29c>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x298>
 80003f4:	b156      	cbz	r6, 800040c <__udivmoddi4+0x208>
 80003f6:	ebb0 0208 	subs.w	r2, r0, r8
 80003fa:	eb64 040e 	sbc.w	r4, r4, lr
 80003fe:	fa04 f707 	lsl.w	r7, r4, r7
 8000402:	40ca      	lsrs	r2, r1
 8000404:	40cc      	lsrs	r4, r1
 8000406:	4317      	orrs	r7, r2
 8000408:	e9c6 7400 	strd	r7, r4, [r6]
 800040c:	4618      	mov	r0, r3
 800040e:	2100      	movs	r1, #0
 8000410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000414:	f1c3 0120 	rsb	r1, r3, #32
 8000418:	fa02 fc03 	lsl.w	ip, r2, r3
 800041c:	fa20 f201 	lsr.w	r2, r0, r1
 8000420:	fa25 f101 	lsr.w	r1, r5, r1
 8000424:	409d      	lsls	r5, r3
 8000426:	432a      	orrs	r2, r5
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1510 	mls	r5, r7, r0, r1
 8000438:	0c11      	lsrs	r1, r2, #16
 800043a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043e:	fb00 f50e 	mul.w	r5, r0, lr
 8000442:	428d      	cmp	r5, r1
 8000444:	fa04 f403 	lsl.w	r4, r4, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x258>
 800044a:	eb1c 0101 	adds.w	r1, ip, r1
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000454:	428d      	cmp	r5, r1
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 8000458:	3802      	subs	r0, #2
 800045a:	4461      	add	r1, ip
 800045c:	1b49      	subs	r1, r1, r5
 800045e:	b292      	uxth	r2, r2
 8000460:	fbb1 f5f7 	udiv	r5, r1, r7
 8000464:	fb07 1115 	mls	r1, r7, r5, r1
 8000468:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800046c:	fb05 f10e 	mul.w	r1, r5, lr
 8000470:	4291      	cmp	r1, r2
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x282>
 8000474:	eb1c 0202 	adds.w	r2, ip, r2
 8000478:	f105 38ff 	add.w	r8, r5, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800047e:	4291      	cmp	r1, r2
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2a8>
 8000482:	3d02      	subs	r5, #2
 8000484:	4462      	add	r2, ip
 8000486:	1a52      	subs	r2, r2, r1
 8000488:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0xfc>
 800048e:	4631      	mov	r1, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e708      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000494:	4639      	mov	r1, r7
 8000496:	e6e6      	b.n	8000266 <__udivmoddi4+0x62>
 8000498:	4610      	mov	r0, r2
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x90>
 800049c:	4548      	cmp	r0, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a8:	3b01      	subs	r3, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004ac:	4645      	mov	r5, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x282>
 80004b0:	462b      	mov	r3, r5
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1da>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x258>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004bc:	3d02      	subs	r5, #2
 80004be:	4462      	add	r2, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x124>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e70a      	b.n	80002dc <__udivmoddi4+0xd8>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x14e>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <u8x8_stm32_gpio_and_delay>:
static void MX_USART1_UART_Init(void);
static void MX_ADC1_Init(void);
/* USER CODE BEGIN PFP */
uint8_t u8x8_stm32_gpio_and_delay(U8X8_UNUSED u8x8_t *u8x8,
U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int,
U8X8_UNUSED void *arg_ptr) {
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b084      	sub	sp, #16
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	60f8      	str	r0, [r7, #12]
 80004d8:	607b      	str	r3, [r7, #4]
 80004da:	460b      	mov	r3, r1
 80004dc:	72fb      	strb	r3, [r7, #11]
 80004de:	4613      	mov	r3, r2
 80004e0:	72bb      	strb	r3, [r7, #10]
	switch (msg) {
 80004e2:	7afb      	ldrb	r3, [r7, #11]
 80004e4:	3b28      	subs	r3, #40	; 0x28
 80004e6:	2b23      	cmp	r3, #35	; 0x23
 80004e8:	d868      	bhi.n	80005bc <u8x8_stm32_gpio_and_delay+0xec>
 80004ea:	a201      	add	r2, pc, #4	; (adr r2, 80004f0 <u8x8_stm32_gpio_and_delay+0x20>)
 80004ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004f0:	08000581 	.word	0x08000581
 80004f4:	08000589 	.word	0x08000589
 80004f8:	080005bd 	.word	0x080005bd
 80004fc:	080005bd 	.word	0x080005bd
 8000500:	080005bd 	.word	0x080005bd
 8000504:	080005bd 	.word	0x080005bd
 8000508:	080005bd 	.word	0x080005bd
 800050c:	080005bd 	.word	0x080005bd
 8000510:	080005bd 	.word	0x080005bd
 8000514:	080005bd 	.word	0x080005bd
 8000518:	080005bd 	.word	0x080005bd
 800051c:	080005bd 	.word	0x080005bd
 8000520:	080005bd 	.word	0x080005bd
 8000524:	080005bd 	.word	0x080005bd
 8000528:	080005bd 	.word	0x080005bd
 800052c:	080005bd 	.word	0x080005bd
 8000530:	080005bd 	.word	0x080005bd
 8000534:	080005bd 	.word	0x080005bd
 8000538:	080005bd 	.word	0x080005bd
 800053c:	080005bd 	.word	0x080005bd
 8000540:	080005bd 	.word	0x080005bd
 8000544:	080005bd 	.word	0x080005bd
 8000548:	080005bd 	.word	0x080005bd
 800054c:	080005bd 	.word	0x080005bd
 8000550:	080005bd 	.word	0x080005bd
 8000554:	080005bd 	.word	0x080005bd
 8000558:	080005bd 	.word	0x080005bd
 800055c:	080005bd 	.word	0x080005bd
 8000560:	080005bd 	.word	0x080005bd
 8000564:	080005bd 	.word	0x080005bd
 8000568:	080005bd 	.word	0x080005bd
 800056c:	080005bd 	.word	0x080005bd
 8000570:	080005bd 	.word	0x080005bd
 8000574:	080005a1 	.word	0x080005a1
 8000578:	08000593 	.word	0x08000593
 800057c:	080005af 	.word	0x080005af
	case U8X8_MSG_GPIO_AND_DELAY_INIT:
		HAL_Delay(1);
 8000580:	2001      	movs	r0, #1
 8000582:	f000 fd61 	bl	8001048 <HAL_Delay>
		break;
 8000586:	e019      	b.n	80005bc <u8x8_stm32_gpio_and_delay+0xec>
	case U8X8_MSG_DELAY_MILLI:
		HAL_Delay(arg_int);
 8000588:	7abb      	ldrb	r3, [r7, #10]
 800058a:	4618      	mov	r0, r3
 800058c:	f000 fd5c 	bl	8001048 <HAL_Delay>
		break;
 8000590:	e014      	b.n	80005bc <u8x8_stm32_gpio_and_delay+0xec>
	case U8X8_MSG_GPIO_DC:
		HAL_GPIO_WritePin(SPI1_DC_GPIO_Port, SPI1_DC_Pin, arg_int);
 8000592:	7abb      	ldrb	r3, [r7, #10]
 8000594:	461a      	mov	r2, r3
 8000596:	2140      	movs	r1, #64	; 0x40
 8000598:	480b      	ldr	r0, [pc, #44]	; (80005c8 <u8x8_stm32_gpio_and_delay+0xf8>)
 800059a:	f001 fc4f 	bl	8001e3c <HAL_GPIO_WritePin>
		break;
 800059e:	e00d      	b.n	80005bc <u8x8_stm32_gpio_and_delay+0xec>
	case U8X8_MSG_GPIO_CS:
		HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, arg_int);
 80005a0:	7abb      	ldrb	r3, [r7, #10]
 80005a2:	461a      	mov	r2, r3
 80005a4:	2110      	movs	r1, #16
 80005a6:	4808      	ldr	r0, [pc, #32]	; (80005c8 <u8x8_stm32_gpio_and_delay+0xf8>)
 80005a8:	f001 fc48 	bl	8001e3c <HAL_GPIO_WritePin>
		break;
 80005ac:	e006      	b.n	80005bc <u8x8_stm32_gpio_and_delay+0xec>
	case U8X8_MSG_GPIO_RESET:
		HAL_GPIO_WritePin(SPI1_RESET_GPIO_Port, SPI1_RESET_Pin, arg_int);
 80005ae:	7abb      	ldrb	r3, [r7, #10]
 80005b0:	461a      	mov	r2, r3
 80005b2:	2108      	movs	r1, #8
 80005b4:	4804      	ldr	r0, [pc, #16]	; (80005c8 <u8x8_stm32_gpio_and_delay+0xf8>)
 80005b6:	f001 fc41 	bl	8001e3c <HAL_GPIO_WritePin>
		break;
 80005ba:	bf00      	nop
	}
	return 1;
 80005bc:	2301      	movs	r3, #1
}
 80005be:	4618      	mov	r0, r3
 80005c0:	3710      	adds	r7, #16
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	40020000 	.word	0x40020000

080005cc <u8x8_byte_4wire_hw_spi>:

uint8_t u8x8_byte_4wire_hw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int,
		void *arg_ptr) {
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	60f8      	str	r0, [r7, #12]
 80005d4:	607b      	str	r3, [r7, #4]
 80005d6:	460b      	mov	r3, r1
 80005d8:	72fb      	strb	r3, [r7, #11]
 80005da:	4613      	mov	r3, r2
 80005dc:	72bb      	strb	r3, [r7, #10]
	switch (msg) {
 80005de:	7afb      	ldrb	r3, [r7, #11]
 80005e0:	3b14      	subs	r3, #20
 80005e2:	2b0c      	cmp	r3, #12
 80005e4:	d83e      	bhi.n	8000664 <u8x8_byte_4wire_hw_spi+0x98>
 80005e6:	a201      	add	r2, pc, #4	; (adr r2, 80005ec <u8x8_byte_4wire_hw_spi+0x20>)
 80005e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005ec:	08000669 	.word	0x08000669
 80005f0:	08000665 	.word	0x08000665
 80005f4:	08000665 	.word	0x08000665
 80005f8:	08000621 	.word	0x08000621
 80005fc:	08000641 	.word	0x08000641
 8000600:	08000653 	.word	0x08000653
 8000604:	08000665 	.word	0x08000665
 8000608:	08000665 	.word	0x08000665
 800060c:	08000665 	.word	0x08000665
 8000610:	08000665 	.word	0x08000665
 8000614:	08000665 	.word	0x08000665
 8000618:	08000665 	.word	0x08000665
 800061c:	08000633 	.word	0x08000633
	case U8X8_MSG_BYTE_SEND:
		HAL_SPI_Transmit(&hspi1, (uint8_t*) arg_ptr, arg_int, 10000);
 8000620:	7abb      	ldrb	r3, [r7, #10]
 8000622:	b29a      	uxth	r2, r3
 8000624:	f242 7310 	movw	r3, #10000	; 0x2710
 8000628:	6879      	ldr	r1, [r7, #4]
 800062a:	4812      	ldr	r0, [pc, #72]	; (8000674 <u8x8_byte_4wire_hw_spi+0xa8>)
 800062c:	f002 f901 	bl	8002832 <HAL_SPI_Transmit>
		break;
 8000630:	e01b      	b.n	800066a <u8x8_byte_4wire_hw_spi+0x9e>
	case U8X8_MSG_BYTE_INIT:
		break;
	case U8X8_MSG_BYTE_SET_DC:
		u8x8_gpio_SetDC(u8x8, arg_int);
 8000632:	7abb      	ldrb	r3, [r7, #10]
 8000634:	461a      	mov	r2, r3
 8000636:	214a      	movs	r1, #74	; 0x4a
 8000638:	68f8      	ldr	r0, [r7, #12]
 800063a:	f005 f950 	bl	80058de <u8x8_gpio_call>
		break;
 800063e:	e014      	b.n	800066a <u8x8_byte_4wire_hw_spi+0x9e>
	case U8X8_MSG_BYTE_START_TRANSFER:
		u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_enable_level);
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	461a      	mov	r2, r3
 8000648:	2149      	movs	r1, #73	; 0x49
 800064a:	68f8      	ldr	r0, [r7, #12]
 800064c:	f005 f947 	bl	80058de <u8x8_gpio_call>
		break;
 8000650:	e00b      	b.n	800066a <u8x8_byte_4wire_hw_spi+0x9e>
	case U8X8_MSG_BYTE_END_TRANSFER:
		u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	785b      	ldrb	r3, [r3, #1]
 8000658:	461a      	mov	r2, r3
 800065a:	2149      	movs	r1, #73	; 0x49
 800065c:	68f8      	ldr	r0, [r7, #12]
 800065e:	f005 f93e 	bl	80058de <u8x8_gpio_call>
		break;
 8000662:	e002      	b.n	800066a <u8x8_byte_4wire_hw_spi+0x9e>
	default:
		return 0;
 8000664:	2300      	movs	r3, #0
 8000666:	e001      	b.n	800066c <u8x8_byte_4wire_hw_spi+0xa0>
		break;
 8000668:	bf00      	nop
	}
	return 1;
 800066a:	2301      	movs	r3, #1
}
 800066c:	4618      	mov	r0, r3
 800066e:	3710      	adds	r7, #16
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	20000070 	.word	0x20000070

08000678 <ADC_read>:
  u8g2_FirstPage(&u8g2);
  do {
  } while( u8g2_NextPage(&u8g2) );
}

void ADC_read(void){
 8000678:	b580      	push	{r7, lr}
 800067a:	b086      	sub	sp, #24
 800067c:	af00      	add	r7, sp, #0
  HAL_ADC_Start(&hadc1); // Start ADC Conversion
 800067e:	4861      	ldr	r0, [pc, #388]	; (8000804 <ADC_read+0x18c>)
 8000680:	f000 fd4a 	bl	8001118 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, 1); // Poll ADC1 Peripheral & TimeOut = 1mSec
 8000684:	2101      	movs	r1, #1
 8000686:	485f      	ldr	r0, [pc, #380]	; (8000804 <ADC_read+0x18c>)
 8000688:	f000 fdfa 	bl	8001280 <HAL_ADC_PollForConversion>
      int sum1 = 0;
 800068c:	2300      	movs	r3, #0
 800068e:	617b      	str	r3, [r7, #20]
      int sum2 = 0;
 8000690:	2300      	movs	r3, #0
 8000692:	613b      	str	r3, [r7, #16]
  for (int i = 0; i < 10; i++){
 8000694:	2300      	movs	r3, #0
 8000696:	60fb      	str	r3, [r7, #12]
 8000698:	e024      	b.n	80006e4 <ADC_read+0x6c>
    pot1[i] = HAL_ADC_GetValue(&hadc1); // Read ADC Conversion Result
 800069a:	485a      	ldr	r0, [pc, #360]	; (8000804 <ADC_read+0x18c>)
 800069c:	f000 fe7b 	bl	8001396 <HAL_ADC_GetValue>
 80006a0:	4603      	mov	r3, r0
 80006a2:	b299      	uxth	r1, r3
 80006a4:	4a58      	ldr	r2, [pc, #352]	; (8000808 <ADC_read+0x190>)
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    pot2[i] = HAL_ADC_GetValue(&hadc1); // Read ADC Conversion Result
 80006ac:	4855      	ldr	r0, [pc, #340]	; (8000804 <ADC_read+0x18c>)
 80006ae:	f000 fe72 	bl	8001396 <HAL_ADC_GetValue>
 80006b2:	4603      	mov	r3, r0
 80006b4:	b299      	uxth	r1, r3
 80006b6:	4a55      	ldr	r2, [pc, #340]	; (800080c <ADC_read+0x194>)
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    sum1 += pot1[i];
 80006be:	4a52      	ldr	r2, [pc, #328]	; (8000808 <ADC_read+0x190>)
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006c6:	461a      	mov	r2, r3
 80006c8:	697b      	ldr	r3, [r7, #20]
 80006ca:	4413      	add	r3, r2
 80006cc:	617b      	str	r3, [r7, #20]
    sum2 += pot2[i];
 80006ce:	4a4f      	ldr	r2, [pc, #316]	; (800080c <ADC_read+0x194>)
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006d6:	461a      	mov	r2, r3
 80006d8:	693b      	ldr	r3, [r7, #16]
 80006da:	4413      	add	r3, r2
 80006dc:	613b      	str	r3, [r7, #16]
  for (int i = 0; i < 10; i++){
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	3301      	adds	r3, #1
 80006e2:	60fb      	str	r3, [r7, #12]
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	2b09      	cmp	r3, #9
 80006e8:	ddd7      	ble.n	800069a <ADC_read+0x22>
  }

  // Calculate the mean values
  pot1[0] = sum1 / 10;
 80006ea:	697b      	ldr	r3, [r7, #20]
 80006ec:	4a48      	ldr	r2, [pc, #288]	; (8000810 <ADC_read+0x198>)
 80006ee:	fb82 1203 	smull	r1, r2, r2, r3
 80006f2:	1092      	asrs	r2, r2, #2
 80006f4:	17db      	asrs	r3, r3, #31
 80006f6:	1ad3      	subs	r3, r2, r3
 80006f8:	b29a      	uxth	r2, r3
 80006fa:	4b43      	ldr	r3, [pc, #268]	; (8000808 <ADC_read+0x190>)
 80006fc:	801a      	strh	r2, [r3, #0]
  pot2[0] = sum2 / 10;
 80006fe:	693b      	ldr	r3, [r7, #16]
 8000700:	4a43      	ldr	r2, [pc, #268]	; (8000810 <ADC_read+0x198>)
 8000702:	fb82 1203 	smull	r1, r2, r2, r3
 8000706:	1092      	asrs	r2, r2, #2
 8000708:	17db      	asrs	r3, r3, #31
 800070a:	1ad3      	subs	r3, r2, r3
 800070c:	b29a      	uxth	r2, r3
 800070e:	4b3f      	ldr	r3, [pc, #252]	; (800080c <ADC_read+0x194>)
 8000710:	801a      	strh	r2, [r3, #0]

  // Convert ADC value to 0-100 range
  float converted_result1 = (pot1[0] * 100) / 64;
 8000712:	4b3d      	ldr	r3, [pc, #244]	; (8000808 <ADC_read+0x190>)
 8000714:	881b      	ldrh	r3, [r3, #0]
 8000716:	461a      	mov	r2, r3
 8000718:	2364      	movs	r3, #100	; 0x64
 800071a:	fb02 f303 	mul.w	r3, r2, r3
 800071e:	2b00      	cmp	r3, #0
 8000720:	da00      	bge.n	8000724 <ADC_read+0xac>
 8000722:	333f      	adds	r3, #63	; 0x3f
 8000724:	119b      	asrs	r3, r3, #6
 8000726:	ee07 3a90 	vmov	s15, r3
 800072a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800072e:	edc7 7a02 	vstr	s15, [r7, #8]
  float converted_result2 = (pot2[0] * 100) / 64;
 8000732:	4b36      	ldr	r3, [pc, #216]	; (800080c <ADC_read+0x194>)
 8000734:	881b      	ldrh	r3, [r3, #0]
 8000736:	461a      	mov	r2, r3
 8000738:	2364      	movs	r3, #100	; 0x64
 800073a:	fb02 f303 	mul.w	r3, r2, r3
 800073e:	2b00      	cmp	r3, #0
 8000740:	da00      	bge.n	8000744 <ADC_read+0xcc>
 8000742:	333f      	adds	r3, #63	; 0x3f
 8000744:	119b      	asrs	r3, r3, #6
 8000746:	ee07 3a90 	vmov	s15, r3
 800074a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800074e:	edc7 7a01 	vstr	s15, [r7, #4]

  display_values1 [0] = (int)converted_result1 / 10 + 48;
 8000752:	edd7 7a02 	vldr	s15, [r7, #8]
 8000756:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800075a:	ee17 1a90 	vmov	r1, s15
 800075e:	4b2c      	ldr	r3, [pc, #176]	; (8000810 <ADC_read+0x198>)
 8000760:	fb83 2301 	smull	r2, r3, r3, r1
 8000764:	109a      	asrs	r2, r3, #2
 8000766:	17cb      	asrs	r3, r1, #31
 8000768:	1ad3      	subs	r3, r2, r3
 800076a:	b2db      	uxtb	r3, r3
 800076c:	3330      	adds	r3, #48	; 0x30
 800076e:	b2da      	uxtb	r2, r3
 8000770:	4b28      	ldr	r3, [pc, #160]	; (8000814 <ADC_read+0x19c>)
 8000772:	701a      	strb	r2, [r3, #0]
  display_values1 [1] = (int)converted_result1 % 10 + 48;
 8000774:	edd7 7a02 	vldr	s15, [r7, #8]
 8000778:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800077c:	ee17 1a90 	vmov	r1, s15
 8000780:	4b23      	ldr	r3, [pc, #140]	; (8000810 <ADC_read+0x198>)
 8000782:	fb83 2301 	smull	r2, r3, r3, r1
 8000786:	109a      	asrs	r2, r3, #2
 8000788:	17cb      	asrs	r3, r1, #31
 800078a:	1ad2      	subs	r2, r2, r3
 800078c:	4613      	mov	r3, r2
 800078e:	009b      	lsls	r3, r3, #2
 8000790:	4413      	add	r3, r2
 8000792:	005b      	lsls	r3, r3, #1
 8000794:	1aca      	subs	r2, r1, r3
 8000796:	b2d3      	uxtb	r3, r2
 8000798:	3330      	adds	r3, #48	; 0x30
 800079a:	b2da      	uxtb	r2, r3
 800079c:	4b1d      	ldr	r3, [pc, #116]	; (8000814 <ADC_read+0x19c>)
 800079e:	705a      	strb	r2, [r3, #1]
  display_values1 [2] = '\0';
 80007a0:	4b1c      	ldr	r3, [pc, #112]	; (8000814 <ADC_read+0x19c>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	709a      	strb	r2, [r3, #2]

  display_values2 [0] = (int)converted_result2 / 10 + 48;
 80007a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80007aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80007ae:	ee17 1a90 	vmov	r1, s15
 80007b2:	4b17      	ldr	r3, [pc, #92]	; (8000810 <ADC_read+0x198>)
 80007b4:	fb83 2301 	smull	r2, r3, r3, r1
 80007b8:	109a      	asrs	r2, r3, #2
 80007ba:	17cb      	asrs	r3, r1, #31
 80007bc:	1ad3      	subs	r3, r2, r3
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	3330      	adds	r3, #48	; 0x30
 80007c2:	b2da      	uxtb	r2, r3
 80007c4:	4b14      	ldr	r3, [pc, #80]	; (8000818 <ADC_read+0x1a0>)
 80007c6:	701a      	strb	r2, [r3, #0]
  display_values2 [1] = (int)converted_result2 % 10 + 48;
 80007c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80007cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80007d0:	ee17 1a90 	vmov	r1, s15
 80007d4:	4b0e      	ldr	r3, [pc, #56]	; (8000810 <ADC_read+0x198>)
 80007d6:	fb83 2301 	smull	r2, r3, r3, r1
 80007da:	109a      	asrs	r2, r3, #2
 80007dc:	17cb      	asrs	r3, r1, #31
 80007de:	1ad2      	subs	r2, r2, r3
 80007e0:	4613      	mov	r3, r2
 80007e2:	009b      	lsls	r3, r3, #2
 80007e4:	4413      	add	r3, r2
 80007e6:	005b      	lsls	r3, r3, #1
 80007e8:	1aca      	subs	r2, r1, r3
 80007ea:	b2d3      	uxtb	r3, r2
 80007ec:	3330      	adds	r3, #48	; 0x30
 80007ee:	b2da      	uxtb	r2, r3
 80007f0:	4b09      	ldr	r3, [pc, #36]	; (8000818 <ADC_read+0x1a0>)
 80007f2:	705a      	strb	r2, [r3, #1]
  display_values2 [2] = '\0';
 80007f4:	4b08      	ldr	r3, [pc, #32]	; (8000818 <ADC_read+0x1a0>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	709a      	strb	r2, [r3, #2]
}
 80007fa:	bf00      	nop
 80007fc:	3718      	adds	r7, #24
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	20000028 	.word	0x20000028
 8000808:	200001ac 	.word	0x200001ac
 800080c:	200001d4 	.word	0x200001d4
 8000810:	66666667 	.word	0x66666667
 8000814:	200001a4 	.word	0x200001a4
 8000818:	200001a8 	.word	0x200001a8

0800081c <HAL_UART_RxCpltCallback>:

uint16_t RX_DATA[20];

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) 
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(&huart1, RX_DATA, 20); 
 8000824:	2214      	movs	r2, #20
 8000826:	4904      	ldr	r1, [pc, #16]	; (8000838 <HAL_UART_RxCpltCallback+0x1c>)
 8000828:	4804      	ldr	r0, [pc, #16]	; (800083c <HAL_UART_RxCpltCallback+0x20>)
 800082a:	f002 fa71 	bl	8002d10 <HAL_UART_Receive_IT>
}
 800082e:	bf00      	nop
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	200001fc 	.word	0x200001fc
 800083c:	200000c8 	.word	0x200000c8

08000840 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000846:	f000 fb8d 	bl	8000f64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800084a:	f000 f8bb 	bl	80009c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800084e:	f000 f9dd 	bl	8000c0c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000852:	f000 f97b 	bl	8000b4c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000856:	f000 f9af 	bl	8000bb8 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 800085a:	f000 f913 	bl	8000a84 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT (&huart1, RX_DATA , 20);
 800085e:	2214      	movs	r2, #20
 8000860:	4945      	ldr	r1, [pc, #276]	; (8000978 <main+0x138>)
 8000862:	4846      	ldr	r0, [pc, #280]	; (800097c <main+0x13c>)
 8000864:	f002 fa54 	bl	8002d10 <HAL_UART_Receive_IT>

  u8g2_Setup_sh1107_pimoroni_128x128_1(&u8g2, U8G2_R0, u8x8_byte_4wire_hw_spi,
 8000868:	4b45      	ldr	r3, [pc, #276]	; (8000980 <main+0x140>)
 800086a:	4a46      	ldr	r2, [pc, #280]	; (8000984 <main+0x144>)
 800086c:	4946      	ldr	r1, [pc, #280]	; (8000988 <main+0x148>)
 800086e:	4847      	ldr	r0, [pc, #284]	; (800098c <main+0x14c>)
 8000870:	f003 fb70 	bl	8003f54 <u8g2_Setup_sh1107_pimoroni_128x128_1>
      u8x8_stm32_gpio_and_delay);
  u8g2_InitDisplay(&u8g2);
 8000874:	4845      	ldr	r0, [pc, #276]	; (800098c <main+0x14c>)
 8000876:	f005 f803 	bl	8005880 <u8x8_InitDisplay>
  u8g2_SetPowerSave(&u8g2, 0);
 800087a:	2100      	movs	r1, #0
 800087c:	4843      	ldr	r0, [pc, #268]	; (800098c <main+0x14c>)
 800087e:	f005 f80e 	bl	800589e <u8x8_SetPowerSave>

    // take the first 2 values from potentiometers and convert them to string

  

    u8g2_FirstPage(&u8g2);
 8000882:	4842      	ldr	r0, [pc, #264]	; (800098c <main+0x14c>)
 8000884:	f003 f9f3 	bl	8003c6e <u8g2_FirstPage>
		
    do {
		u8g2_SetFont(&u8g2, u8g2_font_ncenB14_tr);
 8000888:	4941      	ldr	r1, [pc, #260]	; (8000990 <main+0x150>)
 800088a:	4840      	ldr	r0, [pc, #256]	; (800098c <main+0x14c>)
 800088c:	f004 f912 	bl	8004ab4 <u8g2_SetFont>
    u8g2_DrawStr(&u8g2, 50, 18, "00:00");
 8000890:	4b40      	ldr	r3, [pc, #256]	; (8000994 <main+0x154>)
 8000892:	2212      	movs	r2, #18
 8000894:	2132      	movs	r1, #50	; 0x32
 8000896:	483d      	ldr	r0, [pc, #244]	; (800098c <main+0x14c>)
 8000898:	f004 f86a 	bl	8004970 <u8g2_DrawStr>
    u8g2_DrawLine(&u8g2, 0, 20, 128, 20);
 800089c:	2314      	movs	r3, #20
 800089e:	9300      	str	r3, [sp, #0]
 80008a0:	2380      	movs	r3, #128	; 0x80
 80008a2:	2214      	movs	r2, #20
 80008a4:	2100      	movs	r1, #0
 80008a6:	4839      	ldr	r0, [pc, #228]	; (800098c <main+0x14c>)
 80008a8:	f004 faa9 	bl	8004dfe <u8g2_DrawLine>
    u8g2_DrawLine(&u8g2, 20, 0, 20, 20);
 80008ac:	2314      	movs	r3, #20
 80008ae:	9300      	str	r3, [sp, #0]
 80008b0:	2314      	movs	r3, #20
 80008b2:	2200      	movs	r2, #0
 80008b4:	2114      	movs	r1, #20
 80008b6:	4835      	ldr	r0, [pc, #212]	; (800098c <main+0x14c>)
 80008b8:	f004 faa1 	bl	8004dfe <u8g2_DrawLine>
    u8g2_DrawCircle(&u8g2,10, 10, 7, U8G2_DRAW_ALL);
 80008bc:	230f      	movs	r3, #15
 80008be:	9300      	str	r3, [sp, #0]
 80008c0:	2307      	movs	r3, #7
 80008c2:	220a      	movs	r2, #10
 80008c4:	210a      	movs	r1, #10
 80008c6:	4831      	ldr	r0, [pc, #196]	; (800098c <main+0x14c>)
 80008c8:	f003 fafb 	bl	8003ec2 <u8g2_DrawCircle>
    u8g2_SetFont(&u8g2, u8g2_font_t0_12b_tf);
 80008cc:	4932      	ldr	r1, [pc, #200]	; (8000998 <main+0x158>)
 80008ce:	482f      	ldr	r0, [pc, #188]	; (800098c <main+0x14c>)
 80008d0:	f004 f8f0 	bl	8004ab4 <u8g2_SetFont>
    u8g2_DrawStr(&u8g2, 20, 55, "Listening to:");
 80008d4:	4b31      	ldr	r3, [pc, #196]	; (800099c <main+0x15c>)
 80008d6:	2237      	movs	r2, #55	; 0x37
 80008d8:	2114      	movs	r1, #20
 80008da:	482c      	ldr	r0, [pc, #176]	; (800098c <main+0x14c>)
 80008dc:	f004 f848 	bl	8004970 <u8g2_DrawStr>
    u8g2_DrawStr(&u8g2, 2, 70, "Upside Down");
 80008e0:	4b2f      	ldr	r3, [pc, #188]	; (80009a0 <main+0x160>)
 80008e2:	2246      	movs	r2, #70	; 0x46
 80008e4:	2102      	movs	r1, #2
 80008e6:	4829      	ldr	r0, [pc, #164]	; (800098c <main+0x14c>)
 80008e8:	f004 f842 	bl	8004970 <u8g2_DrawStr>
    u8g2_DrawStr(&u8g2, 50, 80, "by");
 80008ec:	4b2d      	ldr	r3, [pc, #180]	; (80009a4 <main+0x164>)
 80008ee:	2250      	movs	r2, #80	; 0x50
 80008f0:	2132      	movs	r1, #50	; 0x32
 80008f2:	4826      	ldr	r0, [pc, #152]	; (800098c <main+0x14c>)
 80008f4:	f004 f83c 	bl	8004970 <u8g2_DrawStr>
    u8g2_DrawStr(&u8g2, 2, 90, "Mezzosangue");
 80008f8:	4b2b      	ldr	r3, [pc, #172]	; (80009a8 <main+0x168>)
 80008fa:	225a      	movs	r2, #90	; 0x5a
 80008fc:	2102      	movs	r1, #2
 80008fe:	4823      	ldr	r0, [pc, #140]	; (800098c <main+0x14c>)
 8000900:	f004 f836 	bl	8004970 <u8g2_DrawStr>
    u8g2_DrawLine(&u8g2, 0, 108, 128, 108);
 8000904:	236c      	movs	r3, #108	; 0x6c
 8000906:	9300      	str	r3, [sp, #0]
 8000908:	2380      	movs	r3, #128	; 0x80
 800090a:	226c      	movs	r2, #108	; 0x6c
 800090c:	2100      	movs	r1, #0
 800090e:	481f      	ldr	r0, [pc, #124]	; (800098c <main+0x14c>)
 8000910:	f004 fa75 	bl	8004dfe <u8g2_DrawLine>
    u8g2_DrawStr(&u8g2, 2, 122, "1-");
 8000914:	4b25      	ldr	r3, [pc, #148]	; (80009ac <main+0x16c>)
 8000916:	227a      	movs	r2, #122	; 0x7a
 8000918:	2102      	movs	r1, #2
 800091a:	481c      	ldr	r0, [pc, #112]	; (800098c <main+0x14c>)
 800091c:	f004 f828 	bl	8004970 <u8g2_DrawStr>
    ADC_read();
 8000920:	f7ff feaa 	bl	8000678 <ADC_read>
    u8g2_DrawStr(&u8g2, 14, 122, display_values1);
 8000924:	4b22      	ldr	r3, [pc, #136]	; (80009b0 <main+0x170>)
 8000926:	227a      	movs	r2, #122	; 0x7a
 8000928:	210e      	movs	r1, #14
 800092a:	4818      	ldr	r0, [pc, #96]	; (800098c <main+0x14c>)
 800092c:	f004 f820 	bl	8004970 <u8g2_DrawStr>
    u8g2_DrawStr(&u8g2, 54, 122, "2-");
 8000930:	4b20      	ldr	r3, [pc, #128]	; (80009b4 <main+0x174>)
 8000932:	227a      	movs	r2, #122	; 0x7a
 8000934:	2136      	movs	r1, #54	; 0x36
 8000936:	4815      	ldr	r0, [pc, #84]	; (800098c <main+0x14c>)
 8000938:	f004 f81a 	bl	8004970 <u8g2_DrawStr>
    ADC_read();
 800093c:	f7ff fe9c 	bl	8000678 <ADC_read>
    u8g2_DrawStr(&u8g2, 66, 122, display_values2);
 8000940:	4b1d      	ldr	r3, [pc, #116]	; (80009b8 <main+0x178>)
 8000942:	227a      	movs	r2, #122	; 0x7a
 8000944:	2142      	movs	r1, #66	; 0x42
 8000946:	4811      	ldr	r0, [pc, #68]	; (800098c <main+0x14c>)
 8000948:	f004 f812 	bl	8004970 <u8g2_DrawStr>
    u8g2_DrawStr(&u8g2, 102, 122, "3-");
 800094c:	4b1b      	ldr	r3, [pc, #108]	; (80009bc <main+0x17c>)
 800094e:	227a      	movs	r2, #122	; 0x7a
 8000950:	2166      	movs	r1, #102	; 0x66
 8000952:	480e      	ldr	r0, [pc, #56]	; (800098c <main+0x14c>)
 8000954:	f004 f80c 	bl	8004970 <u8g2_DrawStr>
    u8g2_DrawStr(&u8g2, 114, 122, "74");
 8000958:	4b19      	ldr	r3, [pc, #100]	; (80009c0 <main+0x180>)
 800095a:	227a      	movs	r2, #122	; 0x7a
 800095c:	2172      	movs	r1, #114	; 0x72
 800095e:	480b      	ldr	r0, [pc, #44]	; (800098c <main+0x14c>)
 8000960:	f004 f806 	bl	8004970 <u8g2_DrawStr>
    // clear the string
		} while (u8g2_NextPage(&u8g2));
 8000964:	4809      	ldr	r0, [pc, #36]	; (800098c <main+0x14c>)
 8000966:	f003 f996 	bl	8003c96 <u8g2_NextPage>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d18b      	bne.n	8000888 <main+0x48>

    HAL_Delay(100);
 8000970:	2064      	movs	r0, #100	; 0x64
 8000972:	f000 fb69 	bl	8001048 <HAL_Delay>
    u8g2_FirstPage(&u8g2);
 8000976:	e784      	b.n	8000882 <main+0x42>
 8000978:	200001fc 	.word	0x200001fc
 800097c:	200000c8 	.word	0x200000c8
 8000980:	080004d1 	.word	0x080004d1
 8000984:	080005cd 	.word	0x080005cd
 8000988:	08006ae0 	.word	0x08006ae0
 800098c:	20000110 	.word	0x20000110
 8000990:	080062b8 	.word	0x080062b8
 8000994:	08005a2c 	.word	0x08005a2c
 8000998:	08005a88 	.word	0x08005a88
 800099c:	08005a34 	.word	0x08005a34
 80009a0:	08005a44 	.word	0x08005a44
 80009a4:	08005a50 	.word	0x08005a50
 80009a8:	08005a54 	.word	0x08005a54
 80009ac:	08005a60 	.word	0x08005a60
 80009b0:	200001a4 	.word	0x200001a4
 80009b4:	08005a64 	.word	0x08005a64
 80009b8:	200001a8 	.word	0x200001a8
 80009bc:	08005a68 	.word	0x08005a68
 80009c0:	08005a6c 	.word	0x08005a6c

080009c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b094      	sub	sp, #80	; 0x50
 80009c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ca:	f107 0320 	add.w	r3, r7, #32
 80009ce:	2230      	movs	r2, #48	; 0x30
 80009d0:	2100      	movs	r1, #0
 80009d2:	4618      	mov	r0, r3
 80009d4:	f004 fff1 	bl	80059ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009d8:	f107 030c 	add.w	r3, r7, #12
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	605a      	str	r2, [r3, #4]
 80009e2:	609a      	str	r2, [r3, #8]
 80009e4:	60da      	str	r2, [r3, #12]
 80009e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e8:	2300      	movs	r3, #0
 80009ea:	60bb      	str	r3, [r7, #8]
 80009ec:	4b23      	ldr	r3, [pc, #140]	; (8000a7c <SystemClock_Config+0xb8>)
 80009ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f0:	4a22      	ldr	r2, [pc, #136]	; (8000a7c <SystemClock_Config+0xb8>)
 80009f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f6:	6413      	str	r3, [r2, #64]	; 0x40
 80009f8:	4b20      	ldr	r3, [pc, #128]	; (8000a7c <SystemClock_Config+0xb8>)
 80009fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a00:	60bb      	str	r3, [r7, #8]
 8000a02:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000a04:	2300      	movs	r3, #0
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	4b1d      	ldr	r3, [pc, #116]	; (8000a80 <SystemClock_Config+0xbc>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a10:	4a1b      	ldr	r2, [pc, #108]	; (8000a80 <SystemClock_Config+0xbc>)
 8000a12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a16:	6013      	str	r3, [r2, #0]
 8000a18:	4b19      	ldr	r3, [pc, #100]	; (8000a80 <SystemClock_Config+0xbc>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a20:	607b      	str	r3, [r7, #4]
 8000a22:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a24:	2302      	movs	r3, #2
 8000a26:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a28:	2301      	movs	r3, #1
 8000a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a2c:	2310      	movs	r3, #16
 8000a2e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a30:	2300      	movs	r3, #0
 8000a32:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a34:	f107 0320 	add.w	r3, r7, #32
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f001 fa19 	bl	8001e70 <HAL_RCC_OscConfig>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000a44:	f000 f914 	bl	8000c70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a48:	230f      	movs	r3, #15
 8000a4a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a50:	2300      	movs	r3, #0
 8000a52:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a54:	2300      	movs	r3, #0
 8000a56:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a5c:	f107 030c 	add.w	r3, r7, #12
 8000a60:	2100      	movs	r1, #0
 8000a62:	4618      	mov	r0, r3
 8000a64:	f001 fc7c 	bl	8002360 <HAL_RCC_ClockConfig>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000a6e:	f000 f8ff 	bl	8000c70 <Error_Handler>
  }
}
 8000a72:	bf00      	nop
 8000a74:	3750      	adds	r7, #80	; 0x50
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40023800 	.word	0x40023800
 8000a80:	40007000 	.word	0x40007000

08000a84 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a8a:	463b      	mov	r3, r7
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	605a      	str	r2, [r3, #4]
 8000a92:	609a      	str	r2, [r3, #8]
 8000a94:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000a96:	4b2a      	ldr	r3, [pc, #168]	; (8000b40 <MX_ADC1_Init+0xbc>)
 8000a98:	4a2a      	ldr	r2, [pc, #168]	; (8000b44 <MX_ADC1_Init+0xc0>)
 8000a9a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000a9c:	4b28      	ldr	r3, [pc, #160]	; (8000b40 <MX_ADC1_Init+0xbc>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_6B;
 8000aa2:	4b27      	ldr	r3, [pc, #156]	; (8000b40 <MX_ADC1_Init+0xbc>)
 8000aa4:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 8000aa8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000aaa:	4b25      	ldr	r3, [pc, #148]	; (8000b40 <MX_ADC1_Init+0xbc>)
 8000aac:	2201      	movs	r2, #1
 8000aae:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ab0:	4b23      	ldr	r3, [pc, #140]	; (8000b40 <MX_ADC1_Init+0xbc>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8000ab6:	4b22      	ldr	r3, [pc, #136]	; (8000b40 <MX_ADC1_Init+0xbc>)
 8000ab8:	2201      	movs	r2, #1
 8000aba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8000abe:	4b20      	ldr	r3, [pc, #128]	; (8000b40 <MX_ADC1_Init+0xbc>)
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ac4:	4b1e      	ldr	r3, [pc, #120]	; (8000b40 <MX_ADC1_Init+0xbc>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000aca:	4b1d      	ldr	r3, [pc, #116]	; (8000b40 <MX_ADC1_Init+0xbc>)
 8000acc:	4a1e      	ldr	r2, [pc, #120]	; (8000b48 <MX_ADC1_Init+0xc4>)
 8000ace:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ad0:	4b1b      	ldr	r3, [pc, #108]	; (8000b40 <MX_ADC1_Init+0xbc>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000ad6:	4b1a      	ldr	r3, [pc, #104]	; (8000b40 <MX_ADC1_Init+0xbc>)
 8000ad8:	2202      	movs	r2, #2
 8000ada:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000adc:	4b18      	ldr	r3, [pc, #96]	; (8000b40 <MX_ADC1_Init+0xbc>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ae4:	4b16      	ldr	r3, [pc, #88]	; (8000b40 <MX_ADC1_Init+0xbc>)
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000aea:	4815      	ldr	r0, [pc, #84]	; (8000b40 <MX_ADC1_Init+0xbc>)
 8000aec:	f000 fad0 	bl	8001090 <HAL_ADC_Init>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_ADC1_Init+0x76>
  {
    Error_Handler();
 8000af6:	f000 f8bb 	bl	8000c70 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000afa:	2300      	movs	r3, #0
 8000afc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000afe:	2301      	movs	r3, #1
 8000b00:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000b02:	2301      	movs	r3, #1
 8000b04:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b06:	463b      	mov	r3, r7
 8000b08:	4619      	mov	r1, r3
 8000b0a:	480d      	ldr	r0, [pc, #52]	; (8000b40 <MX_ADC1_Init+0xbc>)
 8000b0c:	f000 fc50 	bl	80013b0 <HAL_ADC_ConfigChannel>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8000b16:	f000 f8ab 	bl	8000c70 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b22:	463b      	mov	r3, r7
 8000b24:	4619      	mov	r1, r3
 8000b26:	4806      	ldr	r0, [pc, #24]	; (8000b40 <MX_ADC1_Init+0xbc>)
 8000b28:	f000 fc42 	bl	80013b0 <HAL_ADC_ConfigChannel>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000b32:	f000 f89d 	bl	8000c70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b36:	bf00      	nop
 8000b38:	3710      	adds	r7, #16
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	20000028 	.word	0x20000028
 8000b44:	40012000 	.word	0x40012000
 8000b48:	0f000001 	.word	0x0f000001

08000b4c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b50:	4b17      	ldr	r3, [pc, #92]	; (8000bb0 <MX_SPI1_Init+0x64>)
 8000b52:	4a18      	ldr	r2, [pc, #96]	; (8000bb4 <MX_SPI1_Init+0x68>)
 8000b54:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b56:	4b16      	ldr	r3, [pc, #88]	; (8000bb0 <MX_SPI1_Init+0x64>)
 8000b58:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b5c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b5e:	4b14      	ldr	r3, [pc, #80]	; (8000bb0 <MX_SPI1_Init+0x64>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b64:	4b12      	ldr	r3, [pc, #72]	; (8000bb0 <MX_SPI1_Init+0x64>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b6a:	4b11      	ldr	r3, [pc, #68]	; (8000bb0 <MX_SPI1_Init+0x64>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b70:	4b0f      	ldr	r3, [pc, #60]	; (8000bb0 <MX_SPI1_Init+0x64>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b76:	4b0e      	ldr	r3, [pc, #56]	; (8000bb0 <MX_SPI1_Init+0x64>)
 8000b78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b7c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b7e:	4b0c      	ldr	r3, [pc, #48]	; (8000bb0 <MX_SPI1_Init+0x64>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b84:	4b0a      	ldr	r3, [pc, #40]	; (8000bb0 <MX_SPI1_Init+0x64>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b8a:	4b09      	ldr	r3, [pc, #36]	; (8000bb0 <MX_SPI1_Init+0x64>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b90:	4b07      	ldr	r3, [pc, #28]	; (8000bb0 <MX_SPI1_Init+0x64>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b96:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <MX_SPI1_Init+0x64>)
 8000b98:	220a      	movs	r2, #10
 8000b9a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b9c:	4804      	ldr	r0, [pc, #16]	; (8000bb0 <MX_SPI1_Init+0x64>)
 8000b9e:	f001 fdbf 	bl	8002720 <HAL_SPI_Init>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000ba8:	f000 f862 	bl	8000c70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000bac:	bf00      	nop
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	20000070 	.word	0x20000070
 8000bb4:	40013000 	.word	0x40013000

08000bb8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bbc:	4b11      	ldr	r3, [pc, #68]	; (8000c04 <MX_USART1_UART_Init+0x4c>)
 8000bbe:	4a12      	ldr	r2, [pc, #72]	; (8000c08 <MX_USART1_UART_Init+0x50>)
 8000bc0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bc2:	4b10      	ldr	r3, [pc, #64]	; (8000c04 <MX_USART1_UART_Init+0x4c>)
 8000bc4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bc8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bca:	4b0e      	ldr	r3, [pc, #56]	; (8000c04 <MX_USART1_UART_Init+0x4c>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bd0:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <MX_USART1_UART_Init+0x4c>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bd6:	4b0b      	ldr	r3, [pc, #44]	; (8000c04 <MX_USART1_UART_Init+0x4c>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bdc:	4b09      	ldr	r3, [pc, #36]	; (8000c04 <MX_USART1_UART_Init+0x4c>)
 8000bde:	220c      	movs	r2, #12
 8000be0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000be2:	4b08      	ldr	r3, [pc, #32]	; (8000c04 <MX_USART1_UART_Init+0x4c>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000be8:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <MX_USART1_UART_Init+0x4c>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bee:	4805      	ldr	r0, [pc, #20]	; (8000c04 <MX_USART1_UART_Init+0x4c>)
 8000bf0:	f002 f83e 	bl	8002c70 <HAL_UART_Init>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000bfa:	f000 f839 	bl	8000c70 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	200000c8 	.word	0x200000c8
 8000c08:	40011000 	.word	0x40011000

08000c0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b086      	sub	sp, #24
 8000c10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c12:	1d3b      	adds	r3, r7, #4
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	605a      	str	r2, [r3, #4]
 8000c1a:	609a      	str	r2, [r3, #8]
 8000c1c:	60da      	str	r2, [r3, #12]
 8000c1e:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c20:	2300      	movs	r3, #0
 8000c22:	603b      	str	r3, [r7, #0]
 8000c24:	4b10      	ldr	r3, [pc, #64]	; (8000c68 <MX_GPIO_Init+0x5c>)
 8000c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c28:	4a0f      	ldr	r2, [pc, #60]	; (8000c68 <MX_GPIO_Init+0x5c>)
 8000c2a:	f043 0301 	orr.w	r3, r3, #1
 8000c2e:	6313      	str	r3, [r2, #48]	; 0x30
 8000c30:	4b0d      	ldr	r3, [pc, #52]	; (8000c68 <MX_GPIO_Init+0x5c>)
 8000c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c34:	f003 0301 	and.w	r3, r3, #1
 8000c38:	603b      	str	r3, [r7, #0]
 8000c3a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_RESET_Pin|SPI1_CS_Pin|SPI1_DC_Pin, GPIO_PIN_RESET);
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	2158      	movs	r1, #88	; 0x58
 8000c40:	480a      	ldr	r0, [pc, #40]	; (8000c6c <MX_GPIO_Init+0x60>)
 8000c42:	f001 f8fb 	bl	8001e3c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI1_RESET_Pin SPI1_CS_Pin SPI1_DC_Pin */
  GPIO_InitStruct.Pin = SPI1_RESET_Pin|SPI1_CS_Pin|SPI1_DC_Pin;
 8000c46:	2358      	movs	r3, #88	; 0x58
 8000c48:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c52:	2300      	movs	r3, #0
 8000c54:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c56:	1d3b      	adds	r3, r7, #4
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4804      	ldr	r0, [pc, #16]	; (8000c6c <MX_GPIO_Init+0x60>)
 8000c5c:	f000 ff6a 	bl	8001b34 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c60:	bf00      	nop
 8000c62:	3718      	adds	r7, #24
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	40023800 	.word	0x40023800
 8000c6c:	40020000 	.word	0x40020000

08000c70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c74:	b672      	cpsid	i
}
 8000c76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c78:	e7fe      	b.n	8000c78 <Error_Handler+0x8>
	...

08000c7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	607b      	str	r3, [r7, #4]
 8000c86:	4b10      	ldr	r3, [pc, #64]	; (8000cc8 <HAL_MspInit+0x4c>)
 8000c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8a:	4a0f      	ldr	r2, [pc, #60]	; (8000cc8 <HAL_MspInit+0x4c>)
 8000c8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c90:	6453      	str	r3, [r2, #68]	; 0x44
 8000c92:	4b0d      	ldr	r3, [pc, #52]	; (8000cc8 <HAL_MspInit+0x4c>)
 8000c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c9a:	607b      	str	r3, [r7, #4]
 8000c9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	603b      	str	r3, [r7, #0]
 8000ca2:	4b09      	ldr	r3, [pc, #36]	; (8000cc8 <HAL_MspInit+0x4c>)
 8000ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca6:	4a08      	ldr	r2, [pc, #32]	; (8000cc8 <HAL_MspInit+0x4c>)
 8000ca8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cac:	6413      	str	r3, [r2, #64]	; 0x40
 8000cae:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <HAL_MspInit+0x4c>)
 8000cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cb6:	603b      	str	r3, [r7, #0]
 8000cb8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	370c      	adds	r7, #12
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	40023800 	.word	0x40023800

08000ccc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b08a      	sub	sp, #40	; 0x28
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd4:	f107 0314 	add.w	r3, r7, #20
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	609a      	str	r2, [r3, #8]
 8000ce0:	60da      	str	r2, [r3, #12]
 8000ce2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a17      	ldr	r2, [pc, #92]	; (8000d48 <HAL_ADC_MspInit+0x7c>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d127      	bne.n	8000d3e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	613b      	str	r3, [r7, #16]
 8000cf2:	4b16      	ldr	r3, [pc, #88]	; (8000d4c <HAL_ADC_MspInit+0x80>)
 8000cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf6:	4a15      	ldr	r2, [pc, #84]	; (8000d4c <HAL_ADC_MspInit+0x80>)
 8000cf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cfc:	6453      	str	r3, [r2, #68]	; 0x44
 8000cfe:	4b13      	ldr	r3, [pc, #76]	; (8000d4c <HAL_ADC_MspInit+0x80>)
 8000d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d06:	613b      	str	r3, [r7, #16]
 8000d08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	60fb      	str	r3, [r7, #12]
 8000d0e:	4b0f      	ldr	r3, [pc, #60]	; (8000d4c <HAL_ADC_MspInit+0x80>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	4a0e      	ldr	r2, [pc, #56]	; (8000d4c <HAL_ADC_MspInit+0x80>)
 8000d14:	f043 0301 	orr.w	r3, r3, #1
 8000d18:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <HAL_ADC_MspInit+0x80>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	f003 0301 	and.w	r3, r3, #1
 8000d22:	60fb      	str	r3, [r7, #12]
 8000d24:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d26:	2303      	movs	r3, #3
 8000d28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d2a:	2303      	movs	r3, #3
 8000d2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d32:	f107 0314 	add.w	r3, r7, #20
 8000d36:	4619      	mov	r1, r3
 8000d38:	4805      	ldr	r0, [pc, #20]	; (8000d50 <HAL_ADC_MspInit+0x84>)
 8000d3a:	f000 fefb 	bl	8001b34 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d3e:	bf00      	nop
 8000d40:	3728      	adds	r7, #40	; 0x28
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40012000 	.word	0x40012000
 8000d4c:	40023800 	.word	0x40023800
 8000d50:	40020000 	.word	0x40020000

08000d54 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08a      	sub	sp, #40	; 0x28
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5c:	f107 0314 	add.w	r3, r7, #20
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]
 8000d6a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a19      	ldr	r2, [pc, #100]	; (8000dd8 <HAL_SPI_MspInit+0x84>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d12b      	bne.n	8000dce <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	613b      	str	r3, [r7, #16]
 8000d7a:	4b18      	ldr	r3, [pc, #96]	; (8000ddc <HAL_SPI_MspInit+0x88>)
 8000d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d7e:	4a17      	ldr	r2, [pc, #92]	; (8000ddc <HAL_SPI_MspInit+0x88>)
 8000d80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d84:	6453      	str	r3, [r2, #68]	; 0x44
 8000d86:	4b15      	ldr	r3, [pc, #84]	; (8000ddc <HAL_SPI_MspInit+0x88>)
 8000d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d8e:	613b      	str	r3, [r7, #16]
 8000d90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	60fb      	str	r3, [r7, #12]
 8000d96:	4b11      	ldr	r3, [pc, #68]	; (8000ddc <HAL_SPI_MspInit+0x88>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	4a10      	ldr	r2, [pc, #64]	; (8000ddc <HAL_SPI_MspInit+0x88>)
 8000d9c:	f043 0301 	orr.w	r3, r3, #1
 8000da0:	6313      	str	r3, [r2, #48]	; 0x30
 8000da2:	4b0e      	ldr	r3, [pc, #56]	; (8000ddc <HAL_SPI_MspInit+0x88>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	f003 0301 	and.w	r3, r3, #1
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000dae:	23a0      	movs	r3, #160	; 0xa0
 8000db0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db2:	2302      	movs	r3, #2
 8000db4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dba:	2303      	movs	r3, #3
 8000dbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000dbe:	2305      	movs	r3, #5
 8000dc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc2:	f107 0314 	add.w	r3, r7, #20
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4805      	ldr	r0, [pc, #20]	; (8000de0 <HAL_SPI_MspInit+0x8c>)
 8000dca:	f000 feb3 	bl	8001b34 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000dce:	bf00      	nop
 8000dd0:	3728      	adds	r7, #40	; 0x28
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40013000 	.word	0x40013000
 8000ddc:	40023800 	.word	0x40023800
 8000de0:	40020000 	.word	0x40020000

08000de4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b08a      	sub	sp, #40	; 0x28
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dec:	f107 0314 	add.w	r3, r7, #20
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	609a      	str	r2, [r3, #8]
 8000df8:	60da      	str	r2, [r3, #12]
 8000dfa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a1d      	ldr	r2, [pc, #116]	; (8000e78 <HAL_UART_MspInit+0x94>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d134      	bne.n	8000e70 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	613b      	str	r3, [r7, #16]
 8000e0a:	4b1c      	ldr	r3, [pc, #112]	; (8000e7c <HAL_UART_MspInit+0x98>)
 8000e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0e:	4a1b      	ldr	r2, [pc, #108]	; (8000e7c <HAL_UART_MspInit+0x98>)
 8000e10:	f043 0310 	orr.w	r3, r3, #16
 8000e14:	6453      	str	r3, [r2, #68]	; 0x44
 8000e16:	4b19      	ldr	r3, [pc, #100]	; (8000e7c <HAL_UART_MspInit+0x98>)
 8000e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e1a:	f003 0310 	and.w	r3, r3, #16
 8000e1e:	613b      	str	r3, [r7, #16]
 8000e20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	60fb      	str	r3, [r7, #12]
 8000e26:	4b15      	ldr	r3, [pc, #84]	; (8000e7c <HAL_UART_MspInit+0x98>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	4a14      	ldr	r2, [pc, #80]	; (8000e7c <HAL_UART_MspInit+0x98>)
 8000e2c:	f043 0301 	orr.w	r3, r3, #1
 8000e30:	6313      	str	r3, [r2, #48]	; 0x30
 8000e32:	4b12      	ldr	r3, [pc, #72]	; (8000e7c <HAL_UART_MspInit+0x98>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	f003 0301 	and.w	r3, r3, #1
 8000e3a:	60fb      	str	r3, [r7, #12]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000e3e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000e42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e44:	2302      	movs	r3, #2
 8000e46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e4c:	2303      	movs	r3, #3
 8000e4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e50:	2307      	movs	r3, #7
 8000e52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e54:	f107 0314 	add.w	r3, r7, #20
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4809      	ldr	r0, [pc, #36]	; (8000e80 <HAL_UART_MspInit+0x9c>)
 8000e5c:	f000 fe6a 	bl	8001b34 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000e60:	2200      	movs	r2, #0
 8000e62:	2100      	movs	r1, #0
 8000e64:	2025      	movs	r0, #37	; 0x25
 8000e66:	f000 fd9c 	bl	80019a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e6a:	2025      	movs	r0, #37	; 0x25
 8000e6c:	f000 fdb5 	bl	80019da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000e70:	bf00      	nop
 8000e72:	3728      	adds	r7, #40	; 0x28
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	40011000 	.word	0x40011000
 8000e7c:	40023800 	.word	0x40023800
 8000e80:	40020000 	.word	0x40020000

08000e84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e88:	e7fe      	b.n	8000e88 <NMI_Handler+0x4>

08000e8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e8e:	e7fe      	b.n	8000e8e <HardFault_Handler+0x4>

08000e90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e94:	e7fe      	b.n	8000e94 <MemManage_Handler+0x4>

08000e96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e96:	b480      	push	{r7}
 8000e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e9a:	e7fe      	b.n	8000e9a <BusFault_Handler+0x4>

08000e9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ea0:	e7fe      	b.n	8000ea0 <UsageFault_Handler+0x4>

08000ea2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ea6:	bf00      	nop
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr

08000eb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eb4:	bf00      	nop
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr

08000ebe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ed0:	f000 f89a 	bl	8001008 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ed4:	bf00      	nop
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000edc:	4802      	ldr	r0, [pc, #8]	; (8000ee8 <USART1_IRQHandler+0x10>)
 8000ede:	f001 ff3d 	bl	8002d5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	200000c8 	.word	0x200000c8

08000eec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ef0:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <SystemInit+0x20>)
 8000ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ef6:	4a05      	ldr	r2, [pc, #20]	; (8000f0c <SystemInit+0x20>)
 8000ef8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000efc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	e000ed00 	.word	0xe000ed00

08000f10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f48 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000f14:	f7ff ffea 	bl	8000eec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f18:	480c      	ldr	r0, [pc, #48]	; (8000f4c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f1a:	490d      	ldr	r1, [pc, #52]	; (8000f50 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f1c:	4a0d      	ldr	r2, [pc, #52]	; (8000f54 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f20:	e002      	b.n	8000f28 <LoopCopyDataInit>

08000f22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f26:	3304      	adds	r3, #4

08000f28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f2c:	d3f9      	bcc.n	8000f22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f2e:	4a0a      	ldr	r2, [pc, #40]	; (8000f58 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f30:	4c0a      	ldr	r4, [pc, #40]	; (8000f5c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f34:	e001      	b.n	8000f3a <LoopFillZerobss>

08000f36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f38:	3204      	adds	r2, #4

08000f3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f3c:	d3fb      	bcc.n	8000f36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f3e:	f004 fd45 	bl	80059cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f42:	f7ff fc7d 	bl	8000840 <main>
  bx  lr    
 8000f46:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f48:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000f4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f50:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f54:	08006b64 	.word	0x08006b64
  ldr r2, =_sbss
 8000f58:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f5c:	200002a8 	.word	0x200002a8

08000f60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f60:	e7fe      	b.n	8000f60 <ADC_IRQHandler>
	...

08000f64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f68:	4b0e      	ldr	r3, [pc, #56]	; (8000fa4 <HAL_Init+0x40>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a0d      	ldr	r2, [pc, #52]	; (8000fa4 <HAL_Init+0x40>)
 8000f6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f74:	4b0b      	ldr	r3, [pc, #44]	; (8000fa4 <HAL_Init+0x40>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a0a      	ldr	r2, [pc, #40]	; (8000fa4 <HAL_Init+0x40>)
 8000f7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f80:	4b08      	ldr	r3, [pc, #32]	; (8000fa4 <HAL_Init+0x40>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a07      	ldr	r2, [pc, #28]	; (8000fa4 <HAL_Init+0x40>)
 8000f86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f8c:	2003      	movs	r0, #3
 8000f8e:	f000 fcfd 	bl	800198c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f92:	200f      	movs	r0, #15
 8000f94:	f000 f808 	bl	8000fa8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f98:	f7ff fe70 	bl	8000c7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f9c:	2300      	movs	r3, #0
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	40023c00 	.word	0x40023c00

08000fa8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fb0:	4b12      	ldr	r3, [pc, #72]	; (8000ffc <HAL_InitTick+0x54>)
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	4b12      	ldr	r3, [pc, #72]	; (8001000 <HAL_InitTick+0x58>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	4619      	mov	r1, r3
 8000fba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f000 fd15 	bl	80019f6 <HAL_SYSTICK_Config>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e00e      	b.n	8000ff4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2b0f      	cmp	r3, #15
 8000fda:	d80a      	bhi.n	8000ff2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fdc:	2200      	movs	r2, #0
 8000fde:	6879      	ldr	r1, [r7, #4]
 8000fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe4:	f000 fcdd 	bl	80019a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fe8:	4a06      	ldr	r2, [pc, #24]	; (8001004 <HAL_InitTick+0x5c>)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	e000      	b.n	8000ff4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	20000000 	.word	0x20000000
 8001000:	20000008 	.word	0x20000008
 8001004:	20000004 	.word	0x20000004

08001008 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800100c:	4b06      	ldr	r3, [pc, #24]	; (8001028 <HAL_IncTick+0x20>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	461a      	mov	r2, r3
 8001012:	4b06      	ldr	r3, [pc, #24]	; (800102c <HAL_IncTick+0x24>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4413      	add	r3, r2
 8001018:	4a04      	ldr	r2, [pc, #16]	; (800102c <HAL_IncTick+0x24>)
 800101a:	6013      	str	r3, [r2, #0]
}
 800101c:	bf00      	nop
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	20000008 	.word	0x20000008
 800102c:	20000224 	.word	0x20000224

08001030 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  return uwTick;
 8001034:	4b03      	ldr	r3, [pc, #12]	; (8001044 <HAL_GetTick+0x14>)
 8001036:	681b      	ldr	r3, [r3, #0]
}
 8001038:	4618      	mov	r0, r3
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	20000224 	.word	0x20000224

08001048 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001050:	f7ff ffee 	bl	8001030 <HAL_GetTick>
 8001054:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001060:	d005      	beq.n	800106e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001062:	4b0a      	ldr	r3, [pc, #40]	; (800108c <HAL_Delay+0x44>)
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	461a      	mov	r2, r3
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	4413      	add	r3, r2
 800106c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800106e:	bf00      	nop
 8001070:	f7ff ffde 	bl	8001030 <HAL_GetTick>
 8001074:	4602      	mov	r2, r0
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	68fa      	ldr	r2, [r7, #12]
 800107c:	429a      	cmp	r2, r3
 800107e:	d8f7      	bhi.n	8001070 <HAL_Delay+0x28>
  {
  }
}
 8001080:	bf00      	nop
 8001082:	bf00      	nop
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	20000008 	.word	0x20000008

08001090 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001098:	2300      	movs	r3, #0
 800109a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d101      	bne.n	80010a6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
 80010a4:	e033      	b.n	800110e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d109      	bne.n	80010c2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f7ff fe0c 	bl	8000ccc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2200      	movs	r2, #0
 80010b8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2200      	movs	r2, #0
 80010be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c6:	f003 0310 	and.w	r3, r3, #16
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d118      	bne.n	8001100 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010d6:	f023 0302 	bic.w	r3, r3, #2
 80010da:	f043 0202 	orr.w	r2, r3, #2
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f000 fa86 	bl	80015f4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2200      	movs	r2, #0
 80010ec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f2:	f023 0303 	bic.w	r3, r3, #3
 80010f6:	f043 0201 	orr.w	r2, r3, #1
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	641a      	str	r2, [r3, #64]	; 0x40
 80010fe:	e001      	b.n	8001104 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001100:	2301      	movs	r3, #1
 8001102:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2200      	movs	r2, #0
 8001108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800110c:	7bfb      	ldrb	r3, [r7, #15]
}
 800110e:	4618      	mov	r0, r3
 8001110:	3710      	adds	r7, #16
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
	...

08001118 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001118:	b480      	push	{r7}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001120:	2300      	movs	r3, #0
 8001122:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800112a:	2b01      	cmp	r3, #1
 800112c:	d101      	bne.n	8001132 <HAL_ADC_Start+0x1a>
 800112e:	2302      	movs	r3, #2
 8001130:	e097      	b.n	8001262 <HAL_ADC_Start+0x14a>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2201      	movs	r2, #1
 8001136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	f003 0301 	and.w	r3, r3, #1
 8001144:	2b01      	cmp	r3, #1
 8001146:	d018      	beq.n	800117a <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	689a      	ldr	r2, [r3, #8]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f042 0201 	orr.w	r2, r2, #1
 8001156:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001158:	4b45      	ldr	r3, [pc, #276]	; (8001270 <HAL_ADC_Start+0x158>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a45      	ldr	r2, [pc, #276]	; (8001274 <HAL_ADC_Start+0x15c>)
 800115e:	fba2 2303 	umull	r2, r3, r2, r3
 8001162:	0c9a      	lsrs	r2, r3, #18
 8001164:	4613      	mov	r3, r2
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	4413      	add	r3, r2
 800116a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800116c:	e002      	b.n	8001174 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	3b01      	subs	r3, #1
 8001172:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d1f9      	bne.n	800116e <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	f003 0301 	and.w	r3, r3, #1
 8001184:	2b01      	cmp	r3, #1
 8001186:	d15f      	bne.n	8001248 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001190:	f023 0301 	bic.w	r3, r3, #1
 8001194:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d007      	beq.n	80011ba <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ae:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80011b2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80011c6:	d106      	bne.n	80011d6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011cc:	f023 0206 	bic.w	r2, r3, #6
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	645a      	str	r2, [r3, #68]	; 0x44
 80011d4:	e002      	b.n	80011dc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2200      	movs	r2, #0
 80011da:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2200      	movs	r2, #0
 80011e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011e4:	4b24      	ldr	r3, [pc, #144]	; (8001278 <HAL_ADC_Start+0x160>)
 80011e6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80011f0:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f003 031f 	and.w	r3, r3, #31
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d10f      	bne.n	800121e <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001208:	2b00      	cmp	r3, #0
 800120a:	d129      	bne.n	8001260 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	689a      	ldr	r2, [r3, #8]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	e020      	b.n	8001260 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a16      	ldr	r2, [pc, #88]	; (800127c <HAL_ADC_Start+0x164>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d11b      	bne.n	8001260 <HAL_ADC_Start+0x148>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001232:	2b00      	cmp	r3, #0
 8001234:	d114      	bne.n	8001260 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	689a      	ldr	r2, [r3, #8]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001244:	609a      	str	r2, [r3, #8]
 8001246:	e00b      	b.n	8001260 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124c:	f043 0210 	orr.w	r2, r3, #16
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001258:	f043 0201 	orr.w	r2, r3, #1
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001260:	2300      	movs	r3, #0
}
 8001262:	4618      	mov	r0, r3
 8001264:	3714      	adds	r7, #20
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	20000000 	.word	0x20000000
 8001274:	431bde83 	.word	0x431bde83
 8001278:	40012300 	.word	0x40012300
 800127c:	40012000 	.word	0x40012000

08001280 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800128a:	2300      	movs	r3, #0
 800128c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001298:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800129c:	d113      	bne.n	80012c6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80012a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012ac:	d10b      	bne.n	80012c6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b2:	f043 0220 	orr.w	r2, r3, #32
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2200      	movs	r2, #0
 80012be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e063      	b.n	800138e <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80012c6:	f7ff feb3 	bl	8001030 <HAL_GetTick>
 80012ca:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80012cc:	e021      	b.n	8001312 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012d4:	d01d      	beq.n	8001312 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d007      	beq.n	80012ec <HAL_ADC_PollForConversion+0x6c>
 80012dc:	f7ff fea8 	bl	8001030 <HAL_GetTick>
 80012e0:	4602      	mov	r2, r0
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	683a      	ldr	r2, [r7, #0]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d212      	bcs.n	8001312 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f003 0302 	and.w	r3, r3, #2
 80012f6:	2b02      	cmp	r3, #2
 80012f8:	d00b      	beq.n	8001312 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fe:	f043 0204 	orr.w	r2, r3, #4
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2200      	movs	r2, #0
 800130a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 800130e:	2303      	movs	r3, #3
 8001310:	e03d      	b.n	800138e <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f003 0302 	and.w	r3, r3, #2
 800131c:	2b02      	cmp	r3, #2
 800131e:	d1d6      	bne.n	80012ce <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f06f 0212 	mvn.w	r2, #18
 8001328:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001340:	2b00      	cmp	r3, #0
 8001342:	d123      	bne.n	800138c <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001348:	2b00      	cmp	r3, #0
 800134a:	d11f      	bne.n	800138c <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001352:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001356:	2b00      	cmp	r3, #0
 8001358:	d006      	beq.n	8001368 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001364:	2b00      	cmp	r3, #0
 8001366:	d111      	bne.n	800138c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	641a      	str	r2, [r3, #64]	; 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001378:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800137c:	2b00      	cmp	r3, #0
 800137e:	d105      	bne.n	800138c <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001384:	f043 0201 	orr.w	r2, r3, #1
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 800138c:	2300      	movs	r3, #0
}
 800138e:	4618      	mov	r0, r3
 8001390:	3710      	adds	r7, #16
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001396:	b480      	push	{r7}
 8001398:	b083      	sub	sp, #12
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80013ba:	2300      	movs	r3, #0
 80013bc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d101      	bne.n	80013cc <HAL_ADC_ConfigChannel+0x1c>
 80013c8:	2302      	movs	r3, #2
 80013ca:	e105      	b.n	80015d8 <HAL_ADC_ConfigChannel+0x228>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2201      	movs	r2, #1
 80013d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2b09      	cmp	r3, #9
 80013da:	d925      	bls.n	8001428 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	68d9      	ldr	r1, [r3, #12]
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	461a      	mov	r2, r3
 80013ea:	4613      	mov	r3, r2
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	4413      	add	r3, r2
 80013f0:	3b1e      	subs	r3, #30
 80013f2:	2207      	movs	r2, #7
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	43da      	mvns	r2, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	400a      	ands	r2, r1
 8001400:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	68d9      	ldr	r1, [r3, #12]
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	689a      	ldr	r2, [r3, #8]
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	b29b      	uxth	r3, r3
 8001412:	4618      	mov	r0, r3
 8001414:	4603      	mov	r3, r0
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	4403      	add	r3, r0
 800141a:	3b1e      	subs	r3, #30
 800141c:	409a      	lsls	r2, r3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	430a      	orrs	r2, r1
 8001424:	60da      	str	r2, [r3, #12]
 8001426:	e022      	b.n	800146e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	6919      	ldr	r1, [r3, #16]
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	b29b      	uxth	r3, r3
 8001434:	461a      	mov	r2, r3
 8001436:	4613      	mov	r3, r2
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	4413      	add	r3, r2
 800143c:	2207      	movs	r2, #7
 800143e:	fa02 f303 	lsl.w	r3, r2, r3
 8001442:	43da      	mvns	r2, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	400a      	ands	r2, r1
 800144a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	6919      	ldr	r1, [r3, #16]
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	689a      	ldr	r2, [r3, #8]
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	b29b      	uxth	r3, r3
 800145c:	4618      	mov	r0, r3
 800145e:	4603      	mov	r3, r0
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	4403      	add	r3, r0
 8001464:	409a      	lsls	r2, r3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	430a      	orrs	r2, r1
 800146c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	2b06      	cmp	r3, #6
 8001474:	d824      	bhi.n	80014c0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685a      	ldr	r2, [r3, #4]
 8001480:	4613      	mov	r3, r2
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	4413      	add	r3, r2
 8001486:	3b05      	subs	r3, #5
 8001488:	221f      	movs	r2, #31
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	43da      	mvns	r2, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	400a      	ands	r2, r1
 8001496:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	4618      	mov	r0, r3
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685a      	ldr	r2, [r3, #4]
 80014aa:	4613      	mov	r3, r2
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	4413      	add	r3, r2
 80014b0:	3b05      	subs	r3, #5
 80014b2:	fa00 f203 	lsl.w	r2, r0, r3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	430a      	orrs	r2, r1
 80014bc:	635a      	str	r2, [r3, #52]	; 0x34
 80014be:	e04c      	b.n	800155a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	2b0c      	cmp	r3, #12
 80014c6:	d824      	bhi.n	8001512 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685a      	ldr	r2, [r3, #4]
 80014d2:	4613      	mov	r3, r2
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	4413      	add	r3, r2
 80014d8:	3b23      	subs	r3, #35	; 0x23
 80014da:	221f      	movs	r2, #31
 80014dc:	fa02 f303 	lsl.w	r3, r2, r3
 80014e0:	43da      	mvns	r2, r3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	400a      	ands	r2, r1
 80014e8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	4618      	mov	r0, r3
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685a      	ldr	r2, [r3, #4]
 80014fc:	4613      	mov	r3, r2
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	4413      	add	r3, r2
 8001502:	3b23      	subs	r3, #35	; 0x23
 8001504:	fa00 f203 	lsl.w	r2, r0, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	430a      	orrs	r2, r1
 800150e:	631a      	str	r2, [r3, #48]	; 0x30
 8001510:	e023      	b.n	800155a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685a      	ldr	r2, [r3, #4]
 800151c:	4613      	mov	r3, r2
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	4413      	add	r3, r2
 8001522:	3b41      	subs	r3, #65	; 0x41
 8001524:	221f      	movs	r2, #31
 8001526:	fa02 f303 	lsl.w	r3, r2, r3
 800152a:	43da      	mvns	r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	400a      	ands	r2, r1
 8001532:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	b29b      	uxth	r3, r3
 8001540:	4618      	mov	r0, r3
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685a      	ldr	r2, [r3, #4]
 8001546:	4613      	mov	r3, r2
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	4413      	add	r3, r2
 800154c:	3b41      	subs	r3, #65	; 0x41
 800154e:	fa00 f203 	lsl.w	r2, r0, r3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	430a      	orrs	r2, r1
 8001558:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800155a:	4b22      	ldr	r3, [pc, #136]	; (80015e4 <HAL_ADC_ConfigChannel+0x234>)
 800155c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a21      	ldr	r2, [pc, #132]	; (80015e8 <HAL_ADC_ConfigChannel+0x238>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d109      	bne.n	800157c <HAL_ADC_ConfigChannel+0x1cc>
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2b12      	cmp	r3, #18
 800156e:	d105      	bne.n	800157c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a19      	ldr	r2, [pc, #100]	; (80015e8 <HAL_ADC_ConfigChannel+0x238>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d123      	bne.n	80015ce <HAL_ADC_ConfigChannel+0x21e>
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	2b10      	cmp	r3, #16
 800158c:	d003      	beq.n	8001596 <HAL_ADC_ConfigChannel+0x1e6>
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	2b11      	cmp	r3, #17
 8001594:	d11b      	bne.n	80015ce <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	2b10      	cmp	r3, #16
 80015a8:	d111      	bne.n	80015ce <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80015aa:	4b10      	ldr	r3, [pc, #64]	; (80015ec <HAL_ADC_ConfigChannel+0x23c>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a10      	ldr	r2, [pc, #64]	; (80015f0 <HAL_ADC_ConfigChannel+0x240>)
 80015b0:	fba2 2303 	umull	r2, r3, r2, r3
 80015b4:	0c9a      	lsrs	r2, r3, #18
 80015b6:	4613      	mov	r3, r2
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	4413      	add	r3, r2
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80015c0:	e002      	b.n	80015c8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	3b01      	subs	r3, #1
 80015c6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d1f9      	bne.n	80015c2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2200      	movs	r2, #0
 80015d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 80015d6:	2300      	movs	r3, #0
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3714      	adds	r7, #20
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	40012300 	.word	0x40012300
 80015e8:	40012000 	.word	0x40012000
 80015ec:	20000000 	.word	0x20000000
 80015f0:	431bde83 	.word	0x431bde83

080015f4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b085      	sub	sp, #20
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015fc:	4b79      	ldr	r3, [pc, #484]	; (80017e4 <ADC_Init+0x1f0>)
 80015fe:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	685a      	ldr	r2, [r3, #4]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	431a      	orrs	r2, r3
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	685a      	ldr	r2, [r3, #4]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001628:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	6859      	ldr	r1, [r3, #4]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	691b      	ldr	r3, [r3, #16]
 8001634:	021a      	lsls	r2, r3, #8
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	430a      	orrs	r2, r1
 800163c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	685a      	ldr	r2, [r3, #4]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800164c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	6859      	ldr	r1, [r3, #4]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	689a      	ldr	r2, [r3, #8]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	430a      	orrs	r2, r1
 800165e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	689a      	ldr	r2, [r3, #8]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800166e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	6899      	ldr	r1, [r3, #8]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	68da      	ldr	r2, [r3, #12]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	430a      	orrs	r2, r1
 8001680:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001686:	4a58      	ldr	r2, [pc, #352]	; (80017e8 <ADC_Init+0x1f4>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d022      	beq.n	80016d2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	689a      	ldr	r2, [r3, #8]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800169a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	6899      	ldr	r1, [r3, #8]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	430a      	orrs	r2, r1
 80016ac:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	689a      	ldr	r2, [r3, #8]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	6899      	ldr	r1, [r3, #8]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	430a      	orrs	r2, r1
 80016ce:	609a      	str	r2, [r3, #8]
 80016d0:	e00f      	b.n	80016f2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	689a      	ldr	r2, [r3, #8]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	689a      	ldr	r2, [r3, #8]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016f0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	689a      	ldr	r2, [r3, #8]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f022 0202 	bic.w	r2, r2, #2
 8001700:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	6899      	ldr	r1, [r3, #8]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	7e1b      	ldrb	r3, [r3, #24]
 800170c:	005a      	lsls	r2, r3, #1
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	430a      	orrs	r2, r1
 8001714:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	f893 3020 	ldrb.w	r3, [r3, #32]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d01b      	beq.n	8001758 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	685a      	ldr	r2, [r3, #4]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800172e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	685a      	ldr	r2, [r3, #4]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800173e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	6859      	ldr	r1, [r3, #4]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174a:	3b01      	subs	r3, #1
 800174c:	035a      	lsls	r2, r3, #13
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	430a      	orrs	r2, r1
 8001754:	605a      	str	r2, [r3, #4]
 8001756:	e007      	b.n	8001768 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	685a      	ldr	r2, [r3, #4]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001766:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001776:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	69db      	ldr	r3, [r3, #28]
 8001782:	3b01      	subs	r3, #1
 8001784:	051a      	lsls	r2, r3, #20
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	430a      	orrs	r2, r1
 800178c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	689a      	ldr	r2, [r3, #8]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800179c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	6899      	ldr	r1, [r3, #8]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80017aa:	025a      	lsls	r2, r3, #9
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	430a      	orrs	r2, r1
 80017b2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	689a      	ldr	r2, [r3, #8]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	6899      	ldr	r1, [r3, #8]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	695b      	ldr	r3, [r3, #20]
 80017ce:	029a      	lsls	r2, r3, #10
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	430a      	orrs	r2, r1
 80017d6:	609a      	str	r2, [r3, #8]
}
 80017d8:	bf00      	nop
 80017da:	3714      	adds	r7, #20
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr
 80017e4:	40012300 	.word	0x40012300
 80017e8:	0f000001 	.word	0x0f000001

080017ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b085      	sub	sp, #20
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	f003 0307 	and.w	r3, r3, #7
 80017fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017fc:	4b0c      	ldr	r3, [pc, #48]	; (8001830 <__NVIC_SetPriorityGrouping+0x44>)
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001802:	68ba      	ldr	r2, [r7, #8]
 8001804:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001808:	4013      	ands	r3, r2
 800180a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001814:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001818:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800181c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800181e:	4a04      	ldr	r2, [pc, #16]	; (8001830 <__NVIC_SetPriorityGrouping+0x44>)
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	60d3      	str	r3, [r2, #12]
}
 8001824:	bf00      	nop
 8001826:	3714      	adds	r7, #20
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	e000ed00 	.word	0xe000ed00

08001834 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001838:	4b04      	ldr	r3, [pc, #16]	; (800184c <__NVIC_GetPriorityGrouping+0x18>)
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	0a1b      	lsrs	r3, r3, #8
 800183e:	f003 0307 	and.w	r3, r3, #7
}
 8001842:	4618      	mov	r0, r3
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	e000ed00 	.word	0xe000ed00

08001850 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	4603      	mov	r3, r0
 8001858:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800185a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185e:	2b00      	cmp	r3, #0
 8001860:	db0b      	blt.n	800187a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001862:	79fb      	ldrb	r3, [r7, #7]
 8001864:	f003 021f 	and.w	r2, r3, #31
 8001868:	4907      	ldr	r1, [pc, #28]	; (8001888 <__NVIC_EnableIRQ+0x38>)
 800186a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186e:	095b      	lsrs	r3, r3, #5
 8001870:	2001      	movs	r0, #1
 8001872:	fa00 f202 	lsl.w	r2, r0, r2
 8001876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800187a:	bf00      	nop
 800187c:	370c      	adds	r7, #12
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	e000e100 	.word	0xe000e100

0800188c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	4603      	mov	r3, r0
 8001894:	6039      	str	r1, [r7, #0]
 8001896:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189c:	2b00      	cmp	r3, #0
 800189e:	db0a      	blt.n	80018b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	b2da      	uxtb	r2, r3
 80018a4:	490c      	ldr	r1, [pc, #48]	; (80018d8 <__NVIC_SetPriority+0x4c>)
 80018a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018aa:	0112      	lsls	r2, r2, #4
 80018ac:	b2d2      	uxtb	r2, r2
 80018ae:	440b      	add	r3, r1
 80018b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018b4:	e00a      	b.n	80018cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	b2da      	uxtb	r2, r3
 80018ba:	4908      	ldr	r1, [pc, #32]	; (80018dc <__NVIC_SetPriority+0x50>)
 80018bc:	79fb      	ldrb	r3, [r7, #7]
 80018be:	f003 030f 	and.w	r3, r3, #15
 80018c2:	3b04      	subs	r3, #4
 80018c4:	0112      	lsls	r2, r2, #4
 80018c6:	b2d2      	uxtb	r2, r2
 80018c8:	440b      	add	r3, r1
 80018ca:	761a      	strb	r2, [r3, #24]
}
 80018cc:	bf00      	nop
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	e000e100 	.word	0xe000e100
 80018dc:	e000ed00 	.word	0xe000ed00

080018e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b089      	sub	sp, #36	; 0x24
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	60b9      	str	r1, [r7, #8]
 80018ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	f003 0307 	and.w	r3, r3, #7
 80018f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	f1c3 0307 	rsb	r3, r3, #7
 80018fa:	2b04      	cmp	r3, #4
 80018fc:	bf28      	it	cs
 80018fe:	2304      	movcs	r3, #4
 8001900:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	3304      	adds	r3, #4
 8001906:	2b06      	cmp	r3, #6
 8001908:	d902      	bls.n	8001910 <NVIC_EncodePriority+0x30>
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	3b03      	subs	r3, #3
 800190e:	e000      	b.n	8001912 <NVIC_EncodePriority+0x32>
 8001910:	2300      	movs	r3, #0
 8001912:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001914:	f04f 32ff 	mov.w	r2, #4294967295
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	43da      	mvns	r2, r3
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	401a      	ands	r2, r3
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001928:	f04f 31ff 	mov.w	r1, #4294967295
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	fa01 f303 	lsl.w	r3, r1, r3
 8001932:	43d9      	mvns	r1, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001938:	4313      	orrs	r3, r2
         );
}
 800193a:	4618      	mov	r0, r3
 800193c:	3724      	adds	r7, #36	; 0x24
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
	...

08001948 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	3b01      	subs	r3, #1
 8001954:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001958:	d301      	bcc.n	800195e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800195a:	2301      	movs	r3, #1
 800195c:	e00f      	b.n	800197e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800195e:	4a0a      	ldr	r2, [pc, #40]	; (8001988 <SysTick_Config+0x40>)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	3b01      	subs	r3, #1
 8001964:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001966:	210f      	movs	r1, #15
 8001968:	f04f 30ff 	mov.w	r0, #4294967295
 800196c:	f7ff ff8e 	bl	800188c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001970:	4b05      	ldr	r3, [pc, #20]	; (8001988 <SysTick_Config+0x40>)
 8001972:	2200      	movs	r2, #0
 8001974:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001976:	4b04      	ldr	r3, [pc, #16]	; (8001988 <SysTick_Config+0x40>)
 8001978:	2207      	movs	r2, #7
 800197a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	e000e010 	.word	0xe000e010

0800198c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f7ff ff29 	bl	80017ec <__NVIC_SetPriorityGrouping>
}
 800199a:	bf00      	nop
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b086      	sub	sp, #24
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	4603      	mov	r3, r0
 80019aa:	60b9      	str	r1, [r7, #8]
 80019ac:	607a      	str	r2, [r7, #4]
 80019ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019b0:	2300      	movs	r3, #0
 80019b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019b4:	f7ff ff3e 	bl	8001834 <__NVIC_GetPriorityGrouping>
 80019b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	68b9      	ldr	r1, [r7, #8]
 80019be:	6978      	ldr	r0, [r7, #20]
 80019c0:	f7ff ff8e 	bl	80018e0 <NVIC_EncodePriority>
 80019c4:	4602      	mov	r2, r0
 80019c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ca:	4611      	mov	r1, r2
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7ff ff5d 	bl	800188c <__NVIC_SetPriority>
}
 80019d2:	bf00      	nop
 80019d4:	3718      	adds	r7, #24
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}

080019da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019da:	b580      	push	{r7, lr}
 80019dc:	b082      	sub	sp, #8
 80019de:	af00      	add	r7, sp, #0
 80019e0:	4603      	mov	r3, r0
 80019e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff ff31 	bl	8001850 <__NVIC_EnableIRQ>
}
 80019ee:	bf00      	nop
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b082      	sub	sp, #8
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f7ff ffa2 	bl	8001948 <SysTick_Config>
 8001a04:	4603      	mov	r3, r0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b084      	sub	sp, #16
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a1a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001a1c:	f7ff fb08 	bl	8001030 <HAL_GetTick>
 8001a20:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d008      	beq.n	8001a40 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2280      	movs	r2, #128	; 0x80
 8001a32:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2200      	movs	r2, #0
 8001a38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e052      	b.n	8001ae6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f022 0216 	bic.w	r2, r2, #22
 8001a4e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	695a      	ldr	r2, [r3, #20]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a5e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d103      	bne.n	8001a70 <HAL_DMA_Abort+0x62>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d007      	beq.n	8001a80 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f022 0208 	bic.w	r2, r2, #8
 8001a7e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f022 0201 	bic.w	r2, r2, #1
 8001a8e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a90:	e013      	b.n	8001aba <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a92:	f7ff facd 	bl	8001030 <HAL_GetTick>
 8001a96:	4602      	mov	r2, r0
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	2b05      	cmp	r3, #5
 8001a9e:	d90c      	bls.n	8001aba <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2220      	movs	r2, #32
 8001aa4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2203      	movs	r2, #3
 8001aaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e015      	b.n	8001ae6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0301 	and.w	r3, r3, #1
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d1e4      	bne.n	8001a92 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001acc:	223f      	movs	r2, #63	; 0x3f
 8001ace:	409a      	lsls	r2, r3
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3710      	adds	r7, #16
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001aee:	b480      	push	{r7}
 8001af0:	b083      	sub	sp, #12
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d004      	beq.n	8001b0c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2280      	movs	r2, #128	; 0x80
 8001b06:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e00c      	b.n	8001b26 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2205      	movs	r2, #5
 8001b10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f022 0201 	bic.w	r2, r2, #1
 8001b22:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
	...

08001b34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b089      	sub	sp, #36	; 0x24
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b42:	2300      	movs	r3, #0
 8001b44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b46:	2300      	movs	r3, #0
 8001b48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	61fb      	str	r3, [r7, #28]
 8001b4e:	e159      	b.n	8001e04 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b50:	2201      	movs	r2, #1
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	697a      	ldr	r2, [r7, #20]
 8001b60:	4013      	ands	r3, r2
 8001b62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b64:	693a      	ldr	r2, [r7, #16]
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	f040 8148 	bne.w	8001dfe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f003 0303 	and.w	r3, r3, #3
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d005      	beq.n	8001b86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d130      	bne.n	8001be8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	2203      	movs	r2, #3
 8001b92:	fa02 f303 	lsl.w	r3, r2, r3
 8001b96:	43db      	mvns	r3, r3
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	68da      	ldr	r2, [r3, #12]
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	005b      	lsls	r3, r3, #1
 8001ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	69ba      	ldr	r2, [r7, #24]
 8001bb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	091b      	lsrs	r3, r3, #4
 8001bd2:	f003 0201 	and.w	r2, r3, #1
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f003 0303 	and.w	r3, r3, #3
 8001bf0:	2b03      	cmp	r3, #3
 8001bf2:	d017      	beq.n	8001c24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	2203      	movs	r2, #3
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	43db      	mvns	r3, r3
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	689a      	ldr	r2, [r3, #8]
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f003 0303 	and.w	r3, r3, #3
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d123      	bne.n	8001c78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	08da      	lsrs	r2, r3, #3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	3208      	adds	r2, #8
 8001c38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	f003 0307 	and.w	r3, r3, #7
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	220f      	movs	r2, #15
 8001c48:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	69ba      	ldr	r2, [r7, #24]
 8001c50:	4013      	ands	r3, r2
 8001c52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	691a      	ldr	r2, [r3, #16]
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	f003 0307 	and.w	r3, r3, #7
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	08da      	lsrs	r2, r3, #3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	3208      	adds	r2, #8
 8001c72:	69b9      	ldr	r1, [r7, #24]
 8001c74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	2203      	movs	r2, #3
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	43db      	mvns	r3, r3
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f003 0203 	and.w	r2, r3, #3
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	f000 80a2 	beq.w	8001dfe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cba:	2300      	movs	r3, #0
 8001cbc:	60fb      	str	r3, [r7, #12]
 8001cbe:	4b57      	ldr	r3, [pc, #348]	; (8001e1c <HAL_GPIO_Init+0x2e8>)
 8001cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc2:	4a56      	ldr	r2, [pc, #344]	; (8001e1c <HAL_GPIO_Init+0x2e8>)
 8001cc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cc8:	6453      	str	r3, [r2, #68]	; 0x44
 8001cca:	4b54      	ldr	r3, [pc, #336]	; (8001e1c <HAL_GPIO_Init+0x2e8>)
 8001ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cd2:	60fb      	str	r3, [r7, #12]
 8001cd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cd6:	4a52      	ldr	r2, [pc, #328]	; (8001e20 <HAL_GPIO_Init+0x2ec>)
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	089b      	lsrs	r3, r3, #2
 8001cdc:	3302      	adds	r3, #2
 8001cde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	f003 0303 	and.w	r3, r3, #3
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	220f      	movs	r2, #15
 8001cee:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf2:	43db      	mvns	r3, r3
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a49      	ldr	r2, [pc, #292]	; (8001e24 <HAL_GPIO_Init+0x2f0>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d019      	beq.n	8001d36 <HAL_GPIO_Init+0x202>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a48      	ldr	r2, [pc, #288]	; (8001e28 <HAL_GPIO_Init+0x2f4>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d013      	beq.n	8001d32 <HAL_GPIO_Init+0x1fe>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a47      	ldr	r2, [pc, #284]	; (8001e2c <HAL_GPIO_Init+0x2f8>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d00d      	beq.n	8001d2e <HAL_GPIO_Init+0x1fa>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a46      	ldr	r2, [pc, #280]	; (8001e30 <HAL_GPIO_Init+0x2fc>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d007      	beq.n	8001d2a <HAL_GPIO_Init+0x1f6>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a45      	ldr	r2, [pc, #276]	; (8001e34 <HAL_GPIO_Init+0x300>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d101      	bne.n	8001d26 <HAL_GPIO_Init+0x1f2>
 8001d22:	2304      	movs	r3, #4
 8001d24:	e008      	b.n	8001d38 <HAL_GPIO_Init+0x204>
 8001d26:	2307      	movs	r3, #7
 8001d28:	e006      	b.n	8001d38 <HAL_GPIO_Init+0x204>
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e004      	b.n	8001d38 <HAL_GPIO_Init+0x204>
 8001d2e:	2302      	movs	r3, #2
 8001d30:	e002      	b.n	8001d38 <HAL_GPIO_Init+0x204>
 8001d32:	2301      	movs	r3, #1
 8001d34:	e000      	b.n	8001d38 <HAL_GPIO_Init+0x204>
 8001d36:	2300      	movs	r3, #0
 8001d38:	69fa      	ldr	r2, [r7, #28]
 8001d3a:	f002 0203 	and.w	r2, r2, #3
 8001d3e:	0092      	lsls	r2, r2, #2
 8001d40:	4093      	lsls	r3, r2
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d48:	4935      	ldr	r1, [pc, #212]	; (8001e20 <HAL_GPIO_Init+0x2ec>)
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	089b      	lsrs	r3, r3, #2
 8001d4e:	3302      	adds	r3, #2
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d56:	4b38      	ldr	r3, [pc, #224]	; (8001e38 <HAL_GPIO_Init+0x304>)
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	43db      	mvns	r3, r3
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	4013      	ands	r3, r2
 8001d64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d003      	beq.n	8001d7a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d7a:	4a2f      	ldr	r2, [pc, #188]	; (8001e38 <HAL_GPIO_Init+0x304>)
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d80:	4b2d      	ldr	r3, [pc, #180]	; (8001e38 <HAL_GPIO_Init+0x304>)
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	43db      	mvns	r3, r3
 8001d8a:	69ba      	ldr	r2, [r7, #24]
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d003      	beq.n	8001da4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001da4:	4a24      	ldr	r2, [pc, #144]	; (8001e38 <HAL_GPIO_Init+0x304>)
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001daa:	4b23      	ldr	r3, [pc, #140]	; (8001e38 <HAL_GPIO_Init+0x304>)
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	43db      	mvns	r3, r3
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	4013      	ands	r3, r2
 8001db8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d003      	beq.n	8001dce <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001dc6:	69ba      	ldr	r2, [r7, #24]
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001dce:	4a1a      	ldr	r2, [pc, #104]	; (8001e38 <HAL_GPIO_Init+0x304>)
 8001dd0:	69bb      	ldr	r3, [r7, #24]
 8001dd2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dd4:	4b18      	ldr	r3, [pc, #96]	; (8001e38 <HAL_GPIO_Init+0x304>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	43db      	mvns	r3, r3
 8001dde:	69ba      	ldr	r2, [r7, #24]
 8001de0:	4013      	ands	r3, r2
 8001de2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d003      	beq.n	8001df8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001df8:	4a0f      	ldr	r2, [pc, #60]	; (8001e38 <HAL_GPIO_Init+0x304>)
 8001dfa:	69bb      	ldr	r3, [r7, #24]
 8001dfc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	3301      	adds	r3, #1
 8001e02:	61fb      	str	r3, [r7, #28]
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	2b0f      	cmp	r3, #15
 8001e08:	f67f aea2 	bls.w	8001b50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e0c:	bf00      	nop
 8001e0e:	bf00      	nop
 8001e10:	3724      	adds	r7, #36	; 0x24
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	40023800 	.word	0x40023800
 8001e20:	40013800 	.word	0x40013800
 8001e24:	40020000 	.word	0x40020000
 8001e28:	40020400 	.word	0x40020400
 8001e2c:	40020800 	.word	0x40020800
 8001e30:	40020c00 	.word	0x40020c00
 8001e34:	40021000 	.word	0x40021000
 8001e38:	40013c00 	.word	0x40013c00

08001e3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	460b      	mov	r3, r1
 8001e46:	807b      	strh	r3, [r7, #2]
 8001e48:	4613      	mov	r3, r2
 8001e4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e4c:	787b      	ldrb	r3, [r7, #1]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d003      	beq.n	8001e5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e52:	887a      	ldrh	r2, [r7, #2]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e58:	e003      	b.n	8001e62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e5a:	887b      	ldrh	r3, [r7, #2]
 8001e5c:	041a      	lsls	r2, r3, #16
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	619a      	str	r2, [r3, #24]
}
 8001e62:	bf00      	nop
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
	...

08001e70 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b086      	sub	sp, #24
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d101      	bne.n	8001e82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e267      	b.n	8002352 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d075      	beq.n	8001f7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e8e:	4b88      	ldr	r3, [pc, #544]	; (80020b0 <HAL_RCC_OscConfig+0x240>)
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	f003 030c 	and.w	r3, r3, #12
 8001e96:	2b04      	cmp	r3, #4
 8001e98:	d00c      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e9a:	4b85      	ldr	r3, [pc, #532]	; (80020b0 <HAL_RCC_OscConfig+0x240>)
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ea2:	2b08      	cmp	r3, #8
 8001ea4:	d112      	bne.n	8001ecc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ea6:	4b82      	ldr	r3, [pc, #520]	; (80020b0 <HAL_RCC_OscConfig+0x240>)
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001eb2:	d10b      	bne.n	8001ecc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eb4:	4b7e      	ldr	r3, [pc, #504]	; (80020b0 <HAL_RCC_OscConfig+0x240>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d05b      	beq.n	8001f78 <HAL_RCC_OscConfig+0x108>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d157      	bne.n	8001f78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e242      	b.n	8002352 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ed4:	d106      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x74>
 8001ed6:	4b76      	ldr	r3, [pc, #472]	; (80020b0 <HAL_RCC_OscConfig+0x240>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a75      	ldr	r2, [pc, #468]	; (80020b0 <HAL_RCC_OscConfig+0x240>)
 8001edc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ee0:	6013      	str	r3, [r2, #0]
 8001ee2:	e01d      	b.n	8001f20 <HAL_RCC_OscConfig+0xb0>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001eec:	d10c      	bne.n	8001f08 <HAL_RCC_OscConfig+0x98>
 8001eee:	4b70      	ldr	r3, [pc, #448]	; (80020b0 <HAL_RCC_OscConfig+0x240>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a6f      	ldr	r2, [pc, #444]	; (80020b0 <HAL_RCC_OscConfig+0x240>)
 8001ef4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ef8:	6013      	str	r3, [r2, #0]
 8001efa:	4b6d      	ldr	r3, [pc, #436]	; (80020b0 <HAL_RCC_OscConfig+0x240>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a6c      	ldr	r2, [pc, #432]	; (80020b0 <HAL_RCC_OscConfig+0x240>)
 8001f00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f04:	6013      	str	r3, [r2, #0]
 8001f06:	e00b      	b.n	8001f20 <HAL_RCC_OscConfig+0xb0>
 8001f08:	4b69      	ldr	r3, [pc, #420]	; (80020b0 <HAL_RCC_OscConfig+0x240>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a68      	ldr	r2, [pc, #416]	; (80020b0 <HAL_RCC_OscConfig+0x240>)
 8001f0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f12:	6013      	str	r3, [r2, #0]
 8001f14:	4b66      	ldr	r3, [pc, #408]	; (80020b0 <HAL_RCC_OscConfig+0x240>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a65      	ldr	r2, [pc, #404]	; (80020b0 <HAL_RCC_OscConfig+0x240>)
 8001f1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d013      	beq.n	8001f50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f28:	f7ff f882 	bl	8001030 <HAL_GetTick>
 8001f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f2e:	e008      	b.n	8001f42 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f30:	f7ff f87e 	bl	8001030 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	2b64      	cmp	r3, #100	; 0x64
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e207      	b.n	8002352 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f42:	4b5b      	ldr	r3, [pc, #364]	; (80020b0 <HAL_RCC_OscConfig+0x240>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d0f0      	beq.n	8001f30 <HAL_RCC_OscConfig+0xc0>
 8001f4e:	e014      	b.n	8001f7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f50:	f7ff f86e 	bl	8001030 <HAL_GetTick>
 8001f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f56:	e008      	b.n	8001f6a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f58:	f7ff f86a 	bl	8001030 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b64      	cmp	r3, #100	; 0x64
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e1f3      	b.n	8002352 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f6a:	4b51      	ldr	r3, [pc, #324]	; (80020b0 <HAL_RCC_OscConfig+0x240>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d1f0      	bne.n	8001f58 <HAL_RCC_OscConfig+0xe8>
 8001f76:	e000      	b.n	8001f7a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d063      	beq.n	800204e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f86:	4b4a      	ldr	r3, [pc, #296]	; (80020b0 <HAL_RCC_OscConfig+0x240>)
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	f003 030c 	and.w	r3, r3, #12
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d00b      	beq.n	8001faa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f92:	4b47      	ldr	r3, [pc, #284]	; (80020b0 <HAL_RCC_OscConfig+0x240>)
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f9a:	2b08      	cmp	r3, #8
 8001f9c:	d11c      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f9e:	4b44      	ldr	r3, [pc, #272]	; (80020b0 <HAL_RCC_OscConfig+0x240>)
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d116      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001faa:	4b41      	ldr	r3, [pc, #260]	; (80020b0 <HAL_RCC_OscConfig+0x240>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0302 	and.w	r3, r3, #2
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d005      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x152>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d001      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e1c7      	b.n	8002352 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fc2:	4b3b      	ldr	r3, [pc, #236]	; (80020b0 <HAL_RCC_OscConfig+0x240>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	00db      	lsls	r3, r3, #3
 8001fd0:	4937      	ldr	r1, [pc, #220]	; (80020b0 <HAL_RCC_OscConfig+0x240>)
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fd6:	e03a      	b.n	800204e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d020      	beq.n	8002022 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fe0:	4b34      	ldr	r3, [pc, #208]	; (80020b4 <HAL_RCC_OscConfig+0x244>)
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe6:	f7ff f823 	bl	8001030 <HAL_GetTick>
 8001fea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fec:	e008      	b.n	8002000 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fee:	f7ff f81f 	bl	8001030 <HAL_GetTick>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d901      	bls.n	8002000 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e1a8      	b.n	8002352 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002000:	4b2b      	ldr	r3, [pc, #172]	; (80020b0 <HAL_RCC_OscConfig+0x240>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0302 	and.w	r3, r3, #2
 8002008:	2b00      	cmp	r3, #0
 800200a:	d0f0      	beq.n	8001fee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800200c:	4b28      	ldr	r3, [pc, #160]	; (80020b0 <HAL_RCC_OscConfig+0x240>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	691b      	ldr	r3, [r3, #16]
 8002018:	00db      	lsls	r3, r3, #3
 800201a:	4925      	ldr	r1, [pc, #148]	; (80020b0 <HAL_RCC_OscConfig+0x240>)
 800201c:	4313      	orrs	r3, r2
 800201e:	600b      	str	r3, [r1, #0]
 8002020:	e015      	b.n	800204e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002022:	4b24      	ldr	r3, [pc, #144]	; (80020b4 <HAL_RCC_OscConfig+0x244>)
 8002024:	2200      	movs	r2, #0
 8002026:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002028:	f7ff f802 	bl	8001030 <HAL_GetTick>
 800202c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800202e:	e008      	b.n	8002042 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002030:	f7fe fffe 	bl	8001030 <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	2b02      	cmp	r3, #2
 800203c:	d901      	bls.n	8002042 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e187      	b.n	8002352 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002042:	4b1b      	ldr	r3, [pc, #108]	; (80020b0 <HAL_RCC_OscConfig+0x240>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	2b00      	cmp	r3, #0
 800204c:	d1f0      	bne.n	8002030 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0308 	and.w	r3, r3, #8
 8002056:	2b00      	cmp	r3, #0
 8002058:	d036      	beq.n	80020c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	695b      	ldr	r3, [r3, #20]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d016      	beq.n	8002090 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002062:	4b15      	ldr	r3, [pc, #84]	; (80020b8 <HAL_RCC_OscConfig+0x248>)
 8002064:	2201      	movs	r2, #1
 8002066:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002068:	f7fe ffe2 	bl	8001030 <HAL_GetTick>
 800206c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800206e:	e008      	b.n	8002082 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002070:	f7fe ffde 	bl	8001030 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	2b02      	cmp	r3, #2
 800207c:	d901      	bls.n	8002082 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e167      	b.n	8002352 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002082:	4b0b      	ldr	r3, [pc, #44]	; (80020b0 <HAL_RCC_OscConfig+0x240>)
 8002084:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002086:	f003 0302 	and.w	r3, r3, #2
 800208a:	2b00      	cmp	r3, #0
 800208c:	d0f0      	beq.n	8002070 <HAL_RCC_OscConfig+0x200>
 800208e:	e01b      	b.n	80020c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002090:	4b09      	ldr	r3, [pc, #36]	; (80020b8 <HAL_RCC_OscConfig+0x248>)
 8002092:	2200      	movs	r2, #0
 8002094:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002096:	f7fe ffcb 	bl	8001030 <HAL_GetTick>
 800209a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800209c:	e00e      	b.n	80020bc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800209e:	f7fe ffc7 	bl	8001030 <HAL_GetTick>
 80020a2:	4602      	mov	r2, r0
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d907      	bls.n	80020bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80020ac:	2303      	movs	r3, #3
 80020ae:	e150      	b.n	8002352 <HAL_RCC_OscConfig+0x4e2>
 80020b0:	40023800 	.word	0x40023800
 80020b4:	42470000 	.word	0x42470000
 80020b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020bc:	4b88      	ldr	r3, [pc, #544]	; (80022e0 <HAL_RCC_OscConfig+0x470>)
 80020be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020c0:	f003 0302 	and.w	r3, r3, #2
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d1ea      	bne.n	800209e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0304 	and.w	r3, r3, #4
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	f000 8097 	beq.w	8002204 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020d6:	2300      	movs	r3, #0
 80020d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020da:	4b81      	ldr	r3, [pc, #516]	; (80022e0 <HAL_RCC_OscConfig+0x470>)
 80020dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d10f      	bne.n	8002106 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020e6:	2300      	movs	r3, #0
 80020e8:	60bb      	str	r3, [r7, #8]
 80020ea:	4b7d      	ldr	r3, [pc, #500]	; (80022e0 <HAL_RCC_OscConfig+0x470>)
 80020ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ee:	4a7c      	ldr	r2, [pc, #496]	; (80022e0 <HAL_RCC_OscConfig+0x470>)
 80020f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020f4:	6413      	str	r3, [r2, #64]	; 0x40
 80020f6:	4b7a      	ldr	r3, [pc, #488]	; (80022e0 <HAL_RCC_OscConfig+0x470>)
 80020f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020fe:	60bb      	str	r3, [r7, #8]
 8002100:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002102:	2301      	movs	r3, #1
 8002104:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002106:	4b77      	ldr	r3, [pc, #476]	; (80022e4 <HAL_RCC_OscConfig+0x474>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800210e:	2b00      	cmp	r3, #0
 8002110:	d118      	bne.n	8002144 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002112:	4b74      	ldr	r3, [pc, #464]	; (80022e4 <HAL_RCC_OscConfig+0x474>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a73      	ldr	r2, [pc, #460]	; (80022e4 <HAL_RCC_OscConfig+0x474>)
 8002118:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800211c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800211e:	f7fe ff87 	bl	8001030 <HAL_GetTick>
 8002122:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002124:	e008      	b.n	8002138 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002126:	f7fe ff83 	bl	8001030 <HAL_GetTick>
 800212a:	4602      	mov	r2, r0
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	2b02      	cmp	r3, #2
 8002132:	d901      	bls.n	8002138 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e10c      	b.n	8002352 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002138:	4b6a      	ldr	r3, [pc, #424]	; (80022e4 <HAL_RCC_OscConfig+0x474>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002140:	2b00      	cmp	r3, #0
 8002142:	d0f0      	beq.n	8002126 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	2b01      	cmp	r3, #1
 800214a:	d106      	bne.n	800215a <HAL_RCC_OscConfig+0x2ea>
 800214c:	4b64      	ldr	r3, [pc, #400]	; (80022e0 <HAL_RCC_OscConfig+0x470>)
 800214e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002150:	4a63      	ldr	r2, [pc, #396]	; (80022e0 <HAL_RCC_OscConfig+0x470>)
 8002152:	f043 0301 	orr.w	r3, r3, #1
 8002156:	6713      	str	r3, [r2, #112]	; 0x70
 8002158:	e01c      	b.n	8002194 <HAL_RCC_OscConfig+0x324>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	2b05      	cmp	r3, #5
 8002160:	d10c      	bne.n	800217c <HAL_RCC_OscConfig+0x30c>
 8002162:	4b5f      	ldr	r3, [pc, #380]	; (80022e0 <HAL_RCC_OscConfig+0x470>)
 8002164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002166:	4a5e      	ldr	r2, [pc, #376]	; (80022e0 <HAL_RCC_OscConfig+0x470>)
 8002168:	f043 0304 	orr.w	r3, r3, #4
 800216c:	6713      	str	r3, [r2, #112]	; 0x70
 800216e:	4b5c      	ldr	r3, [pc, #368]	; (80022e0 <HAL_RCC_OscConfig+0x470>)
 8002170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002172:	4a5b      	ldr	r2, [pc, #364]	; (80022e0 <HAL_RCC_OscConfig+0x470>)
 8002174:	f043 0301 	orr.w	r3, r3, #1
 8002178:	6713      	str	r3, [r2, #112]	; 0x70
 800217a:	e00b      	b.n	8002194 <HAL_RCC_OscConfig+0x324>
 800217c:	4b58      	ldr	r3, [pc, #352]	; (80022e0 <HAL_RCC_OscConfig+0x470>)
 800217e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002180:	4a57      	ldr	r2, [pc, #348]	; (80022e0 <HAL_RCC_OscConfig+0x470>)
 8002182:	f023 0301 	bic.w	r3, r3, #1
 8002186:	6713      	str	r3, [r2, #112]	; 0x70
 8002188:	4b55      	ldr	r3, [pc, #340]	; (80022e0 <HAL_RCC_OscConfig+0x470>)
 800218a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800218c:	4a54      	ldr	r2, [pc, #336]	; (80022e0 <HAL_RCC_OscConfig+0x470>)
 800218e:	f023 0304 	bic.w	r3, r3, #4
 8002192:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d015      	beq.n	80021c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800219c:	f7fe ff48 	bl	8001030 <HAL_GetTick>
 80021a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021a2:	e00a      	b.n	80021ba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021a4:	f7fe ff44 	bl	8001030 <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e0cb      	b.n	8002352 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021ba:	4b49      	ldr	r3, [pc, #292]	; (80022e0 <HAL_RCC_OscConfig+0x470>)
 80021bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d0ee      	beq.n	80021a4 <HAL_RCC_OscConfig+0x334>
 80021c6:	e014      	b.n	80021f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021c8:	f7fe ff32 	bl	8001030 <HAL_GetTick>
 80021cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021ce:	e00a      	b.n	80021e6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021d0:	f7fe ff2e 	bl	8001030 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	f241 3288 	movw	r2, #5000	; 0x1388
 80021de:	4293      	cmp	r3, r2
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e0b5      	b.n	8002352 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021e6:	4b3e      	ldr	r3, [pc, #248]	; (80022e0 <HAL_RCC_OscConfig+0x470>)
 80021e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d1ee      	bne.n	80021d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021f2:	7dfb      	ldrb	r3, [r7, #23]
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d105      	bne.n	8002204 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021f8:	4b39      	ldr	r3, [pc, #228]	; (80022e0 <HAL_RCC_OscConfig+0x470>)
 80021fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fc:	4a38      	ldr	r2, [pc, #224]	; (80022e0 <HAL_RCC_OscConfig+0x470>)
 80021fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002202:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	699b      	ldr	r3, [r3, #24]
 8002208:	2b00      	cmp	r3, #0
 800220a:	f000 80a1 	beq.w	8002350 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800220e:	4b34      	ldr	r3, [pc, #208]	; (80022e0 <HAL_RCC_OscConfig+0x470>)
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f003 030c 	and.w	r3, r3, #12
 8002216:	2b08      	cmp	r3, #8
 8002218:	d05c      	beq.n	80022d4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	699b      	ldr	r3, [r3, #24]
 800221e:	2b02      	cmp	r3, #2
 8002220:	d141      	bne.n	80022a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002222:	4b31      	ldr	r3, [pc, #196]	; (80022e8 <HAL_RCC_OscConfig+0x478>)
 8002224:	2200      	movs	r2, #0
 8002226:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002228:	f7fe ff02 	bl	8001030 <HAL_GetTick>
 800222c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800222e:	e008      	b.n	8002242 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002230:	f7fe fefe 	bl	8001030 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	2b02      	cmp	r3, #2
 800223c:	d901      	bls.n	8002242 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e087      	b.n	8002352 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002242:	4b27      	ldr	r3, [pc, #156]	; (80022e0 <HAL_RCC_OscConfig+0x470>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d1f0      	bne.n	8002230 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	69da      	ldr	r2, [r3, #28]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6a1b      	ldr	r3, [r3, #32]
 8002256:	431a      	orrs	r2, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225c:	019b      	lsls	r3, r3, #6
 800225e:	431a      	orrs	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002264:	085b      	lsrs	r3, r3, #1
 8002266:	3b01      	subs	r3, #1
 8002268:	041b      	lsls	r3, r3, #16
 800226a:	431a      	orrs	r2, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002270:	061b      	lsls	r3, r3, #24
 8002272:	491b      	ldr	r1, [pc, #108]	; (80022e0 <HAL_RCC_OscConfig+0x470>)
 8002274:	4313      	orrs	r3, r2
 8002276:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002278:	4b1b      	ldr	r3, [pc, #108]	; (80022e8 <HAL_RCC_OscConfig+0x478>)
 800227a:	2201      	movs	r2, #1
 800227c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800227e:	f7fe fed7 	bl	8001030 <HAL_GetTick>
 8002282:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002284:	e008      	b.n	8002298 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002286:	f7fe fed3 	bl	8001030 <HAL_GetTick>
 800228a:	4602      	mov	r2, r0
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	2b02      	cmp	r3, #2
 8002292:	d901      	bls.n	8002298 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002294:	2303      	movs	r3, #3
 8002296:	e05c      	b.n	8002352 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002298:	4b11      	ldr	r3, [pc, #68]	; (80022e0 <HAL_RCC_OscConfig+0x470>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d0f0      	beq.n	8002286 <HAL_RCC_OscConfig+0x416>
 80022a4:	e054      	b.n	8002350 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022a6:	4b10      	ldr	r3, [pc, #64]	; (80022e8 <HAL_RCC_OscConfig+0x478>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ac:	f7fe fec0 	bl	8001030 <HAL_GetTick>
 80022b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022b2:	e008      	b.n	80022c6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022b4:	f7fe febc 	bl	8001030 <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d901      	bls.n	80022c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e045      	b.n	8002352 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022c6:	4b06      	ldr	r3, [pc, #24]	; (80022e0 <HAL_RCC_OscConfig+0x470>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d1f0      	bne.n	80022b4 <HAL_RCC_OscConfig+0x444>
 80022d2:	e03d      	b.n	8002350 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	699b      	ldr	r3, [r3, #24]
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d107      	bne.n	80022ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e038      	b.n	8002352 <HAL_RCC_OscConfig+0x4e2>
 80022e0:	40023800 	.word	0x40023800
 80022e4:	40007000 	.word	0x40007000
 80022e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80022ec:	4b1b      	ldr	r3, [pc, #108]	; (800235c <HAL_RCC_OscConfig+0x4ec>)
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	699b      	ldr	r3, [r3, #24]
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d028      	beq.n	800234c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002304:	429a      	cmp	r2, r3
 8002306:	d121      	bne.n	800234c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002312:	429a      	cmp	r2, r3
 8002314:	d11a      	bne.n	800234c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002316:	68fa      	ldr	r2, [r7, #12]
 8002318:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800231c:	4013      	ands	r3, r2
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002322:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002324:	4293      	cmp	r3, r2
 8002326:	d111      	bne.n	800234c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002332:	085b      	lsrs	r3, r3, #1
 8002334:	3b01      	subs	r3, #1
 8002336:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002338:	429a      	cmp	r2, r3
 800233a:	d107      	bne.n	800234c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002346:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002348:	429a      	cmp	r2, r3
 800234a:	d001      	beq.n	8002350 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e000      	b.n	8002352 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	3718      	adds	r7, #24
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	40023800 	.word	0x40023800

08002360 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d101      	bne.n	8002374 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e0cc      	b.n	800250e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002374:	4b68      	ldr	r3, [pc, #416]	; (8002518 <HAL_RCC_ClockConfig+0x1b8>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0307 	and.w	r3, r3, #7
 800237c:	683a      	ldr	r2, [r7, #0]
 800237e:	429a      	cmp	r2, r3
 8002380:	d90c      	bls.n	800239c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002382:	4b65      	ldr	r3, [pc, #404]	; (8002518 <HAL_RCC_ClockConfig+0x1b8>)
 8002384:	683a      	ldr	r2, [r7, #0]
 8002386:	b2d2      	uxtb	r2, r2
 8002388:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800238a:	4b63      	ldr	r3, [pc, #396]	; (8002518 <HAL_RCC_ClockConfig+0x1b8>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0307 	and.w	r3, r3, #7
 8002392:	683a      	ldr	r2, [r7, #0]
 8002394:	429a      	cmp	r2, r3
 8002396:	d001      	beq.n	800239c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e0b8      	b.n	800250e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0302 	and.w	r3, r3, #2
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d020      	beq.n	80023ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0304 	and.w	r3, r3, #4
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d005      	beq.n	80023c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023b4:	4b59      	ldr	r3, [pc, #356]	; (800251c <HAL_RCC_ClockConfig+0x1bc>)
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	4a58      	ldr	r2, [pc, #352]	; (800251c <HAL_RCC_ClockConfig+0x1bc>)
 80023ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0308 	and.w	r3, r3, #8
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d005      	beq.n	80023d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023cc:	4b53      	ldr	r3, [pc, #332]	; (800251c <HAL_RCC_ClockConfig+0x1bc>)
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	4a52      	ldr	r2, [pc, #328]	; (800251c <HAL_RCC_ClockConfig+0x1bc>)
 80023d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80023d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023d8:	4b50      	ldr	r3, [pc, #320]	; (800251c <HAL_RCC_ClockConfig+0x1bc>)
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	494d      	ldr	r1, [pc, #308]	; (800251c <HAL_RCC_ClockConfig+0x1bc>)
 80023e6:	4313      	orrs	r3, r2
 80023e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0301 	and.w	r3, r3, #1
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d044      	beq.n	8002480 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d107      	bne.n	800240e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023fe:	4b47      	ldr	r3, [pc, #284]	; (800251c <HAL_RCC_ClockConfig+0x1bc>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d119      	bne.n	800243e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e07f      	b.n	800250e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	2b02      	cmp	r3, #2
 8002414:	d003      	beq.n	800241e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800241a:	2b03      	cmp	r3, #3
 800241c:	d107      	bne.n	800242e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800241e:	4b3f      	ldr	r3, [pc, #252]	; (800251c <HAL_RCC_ClockConfig+0x1bc>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d109      	bne.n	800243e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e06f      	b.n	800250e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800242e:	4b3b      	ldr	r3, [pc, #236]	; (800251c <HAL_RCC_ClockConfig+0x1bc>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0302 	and.w	r3, r3, #2
 8002436:	2b00      	cmp	r3, #0
 8002438:	d101      	bne.n	800243e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e067      	b.n	800250e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800243e:	4b37      	ldr	r3, [pc, #220]	; (800251c <HAL_RCC_ClockConfig+0x1bc>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f023 0203 	bic.w	r2, r3, #3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	4934      	ldr	r1, [pc, #208]	; (800251c <HAL_RCC_ClockConfig+0x1bc>)
 800244c:	4313      	orrs	r3, r2
 800244e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002450:	f7fe fdee 	bl	8001030 <HAL_GetTick>
 8002454:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002456:	e00a      	b.n	800246e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002458:	f7fe fdea 	bl	8001030 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	f241 3288 	movw	r2, #5000	; 0x1388
 8002466:	4293      	cmp	r3, r2
 8002468:	d901      	bls.n	800246e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e04f      	b.n	800250e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800246e:	4b2b      	ldr	r3, [pc, #172]	; (800251c <HAL_RCC_ClockConfig+0x1bc>)
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	f003 020c 	and.w	r2, r3, #12
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	429a      	cmp	r2, r3
 800247e:	d1eb      	bne.n	8002458 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002480:	4b25      	ldr	r3, [pc, #148]	; (8002518 <HAL_RCC_ClockConfig+0x1b8>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0307 	and.w	r3, r3, #7
 8002488:	683a      	ldr	r2, [r7, #0]
 800248a:	429a      	cmp	r2, r3
 800248c:	d20c      	bcs.n	80024a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800248e:	4b22      	ldr	r3, [pc, #136]	; (8002518 <HAL_RCC_ClockConfig+0x1b8>)
 8002490:	683a      	ldr	r2, [r7, #0]
 8002492:	b2d2      	uxtb	r2, r2
 8002494:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002496:	4b20      	ldr	r3, [pc, #128]	; (8002518 <HAL_RCC_ClockConfig+0x1b8>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0307 	and.w	r3, r3, #7
 800249e:	683a      	ldr	r2, [r7, #0]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d001      	beq.n	80024a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e032      	b.n	800250e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0304 	and.w	r3, r3, #4
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d008      	beq.n	80024c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024b4:	4b19      	ldr	r3, [pc, #100]	; (800251c <HAL_RCC_ClockConfig+0x1bc>)
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	4916      	ldr	r1, [pc, #88]	; (800251c <HAL_RCC_ClockConfig+0x1bc>)
 80024c2:	4313      	orrs	r3, r2
 80024c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0308 	and.w	r3, r3, #8
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d009      	beq.n	80024e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024d2:	4b12      	ldr	r3, [pc, #72]	; (800251c <HAL_RCC_ClockConfig+0x1bc>)
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	691b      	ldr	r3, [r3, #16]
 80024de:	00db      	lsls	r3, r3, #3
 80024e0:	490e      	ldr	r1, [pc, #56]	; (800251c <HAL_RCC_ClockConfig+0x1bc>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024e6:	f000 f821 	bl	800252c <HAL_RCC_GetSysClockFreq>
 80024ea:	4602      	mov	r2, r0
 80024ec:	4b0b      	ldr	r3, [pc, #44]	; (800251c <HAL_RCC_ClockConfig+0x1bc>)
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	091b      	lsrs	r3, r3, #4
 80024f2:	f003 030f 	and.w	r3, r3, #15
 80024f6:	490a      	ldr	r1, [pc, #40]	; (8002520 <HAL_RCC_ClockConfig+0x1c0>)
 80024f8:	5ccb      	ldrb	r3, [r1, r3]
 80024fa:	fa22 f303 	lsr.w	r3, r2, r3
 80024fe:	4a09      	ldr	r2, [pc, #36]	; (8002524 <HAL_RCC_ClockConfig+0x1c4>)
 8002500:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002502:	4b09      	ldr	r3, [pc, #36]	; (8002528 <HAL_RCC_ClockConfig+0x1c8>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4618      	mov	r0, r3
 8002508:	f7fe fd4e 	bl	8000fa8 <HAL_InitTick>

  return HAL_OK;
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3710      	adds	r7, #16
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	40023c00 	.word	0x40023c00
 800251c:	40023800 	.word	0x40023800
 8002520:	08005a70 	.word	0x08005a70
 8002524:	20000000 	.word	0x20000000
 8002528:	20000004 	.word	0x20000004

0800252c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800252c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002530:	b090      	sub	sp, #64	; 0x40
 8002532:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002534:	2300      	movs	r3, #0
 8002536:	637b      	str	r3, [r7, #52]	; 0x34
 8002538:	2300      	movs	r3, #0
 800253a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800253c:	2300      	movs	r3, #0
 800253e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002540:	2300      	movs	r3, #0
 8002542:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002544:	4b59      	ldr	r3, [pc, #356]	; (80026ac <HAL_RCC_GetSysClockFreq+0x180>)
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	f003 030c 	and.w	r3, r3, #12
 800254c:	2b08      	cmp	r3, #8
 800254e:	d00d      	beq.n	800256c <HAL_RCC_GetSysClockFreq+0x40>
 8002550:	2b08      	cmp	r3, #8
 8002552:	f200 80a1 	bhi.w	8002698 <HAL_RCC_GetSysClockFreq+0x16c>
 8002556:	2b00      	cmp	r3, #0
 8002558:	d002      	beq.n	8002560 <HAL_RCC_GetSysClockFreq+0x34>
 800255a:	2b04      	cmp	r3, #4
 800255c:	d003      	beq.n	8002566 <HAL_RCC_GetSysClockFreq+0x3a>
 800255e:	e09b      	b.n	8002698 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002560:	4b53      	ldr	r3, [pc, #332]	; (80026b0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002562:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002564:	e09b      	b.n	800269e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002566:	4b53      	ldr	r3, [pc, #332]	; (80026b4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002568:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800256a:	e098      	b.n	800269e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800256c:	4b4f      	ldr	r3, [pc, #316]	; (80026ac <HAL_RCC_GetSysClockFreq+0x180>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002574:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002576:	4b4d      	ldr	r3, [pc, #308]	; (80026ac <HAL_RCC_GetSysClockFreq+0x180>)
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d028      	beq.n	80025d4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002582:	4b4a      	ldr	r3, [pc, #296]	; (80026ac <HAL_RCC_GetSysClockFreq+0x180>)
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	099b      	lsrs	r3, r3, #6
 8002588:	2200      	movs	r2, #0
 800258a:	623b      	str	r3, [r7, #32]
 800258c:	627a      	str	r2, [r7, #36]	; 0x24
 800258e:	6a3b      	ldr	r3, [r7, #32]
 8002590:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002594:	2100      	movs	r1, #0
 8002596:	4b47      	ldr	r3, [pc, #284]	; (80026b4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002598:	fb03 f201 	mul.w	r2, r3, r1
 800259c:	2300      	movs	r3, #0
 800259e:	fb00 f303 	mul.w	r3, r0, r3
 80025a2:	4413      	add	r3, r2
 80025a4:	4a43      	ldr	r2, [pc, #268]	; (80026b4 <HAL_RCC_GetSysClockFreq+0x188>)
 80025a6:	fba0 1202 	umull	r1, r2, r0, r2
 80025aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80025ac:	460a      	mov	r2, r1
 80025ae:	62ba      	str	r2, [r7, #40]	; 0x28
 80025b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025b2:	4413      	add	r3, r2
 80025b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025b8:	2200      	movs	r2, #0
 80025ba:	61bb      	str	r3, [r7, #24]
 80025bc:	61fa      	str	r2, [r7, #28]
 80025be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025c2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80025c6:	f7fd fe05 	bl	80001d4 <__aeabi_uldivmod>
 80025ca:	4602      	mov	r2, r0
 80025cc:	460b      	mov	r3, r1
 80025ce:	4613      	mov	r3, r2
 80025d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025d2:	e053      	b.n	800267c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025d4:	4b35      	ldr	r3, [pc, #212]	; (80026ac <HAL_RCC_GetSysClockFreq+0x180>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	099b      	lsrs	r3, r3, #6
 80025da:	2200      	movs	r2, #0
 80025dc:	613b      	str	r3, [r7, #16]
 80025de:	617a      	str	r2, [r7, #20]
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80025e6:	f04f 0b00 	mov.w	fp, #0
 80025ea:	4652      	mov	r2, sl
 80025ec:	465b      	mov	r3, fp
 80025ee:	f04f 0000 	mov.w	r0, #0
 80025f2:	f04f 0100 	mov.w	r1, #0
 80025f6:	0159      	lsls	r1, r3, #5
 80025f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025fc:	0150      	lsls	r0, r2, #5
 80025fe:	4602      	mov	r2, r0
 8002600:	460b      	mov	r3, r1
 8002602:	ebb2 080a 	subs.w	r8, r2, sl
 8002606:	eb63 090b 	sbc.w	r9, r3, fp
 800260a:	f04f 0200 	mov.w	r2, #0
 800260e:	f04f 0300 	mov.w	r3, #0
 8002612:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002616:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800261a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800261e:	ebb2 0408 	subs.w	r4, r2, r8
 8002622:	eb63 0509 	sbc.w	r5, r3, r9
 8002626:	f04f 0200 	mov.w	r2, #0
 800262a:	f04f 0300 	mov.w	r3, #0
 800262e:	00eb      	lsls	r3, r5, #3
 8002630:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002634:	00e2      	lsls	r2, r4, #3
 8002636:	4614      	mov	r4, r2
 8002638:	461d      	mov	r5, r3
 800263a:	eb14 030a 	adds.w	r3, r4, sl
 800263e:	603b      	str	r3, [r7, #0]
 8002640:	eb45 030b 	adc.w	r3, r5, fp
 8002644:	607b      	str	r3, [r7, #4]
 8002646:	f04f 0200 	mov.w	r2, #0
 800264a:	f04f 0300 	mov.w	r3, #0
 800264e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002652:	4629      	mov	r1, r5
 8002654:	028b      	lsls	r3, r1, #10
 8002656:	4621      	mov	r1, r4
 8002658:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800265c:	4621      	mov	r1, r4
 800265e:	028a      	lsls	r2, r1, #10
 8002660:	4610      	mov	r0, r2
 8002662:	4619      	mov	r1, r3
 8002664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002666:	2200      	movs	r2, #0
 8002668:	60bb      	str	r3, [r7, #8]
 800266a:	60fa      	str	r2, [r7, #12]
 800266c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002670:	f7fd fdb0 	bl	80001d4 <__aeabi_uldivmod>
 8002674:	4602      	mov	r2, r0
 8002676:	460b      	mov	r3, r1
 8002678:	4613      	mov	r3, r2
 800267a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800267c:	4b0b      	ldr	r3, [pc, #44]	; (80026ac <HAL_RCC_GetSysClockFreq+0x180>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	0c1b      	lsrs	r3, r3, #16
 8002682:	f003 0303 	and.w	r3, r3, #3
 8002686:	3301      	adds	r3, #1
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800268c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800268e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002690:	fbb2 f3f3 	udiv	r3, r2, r3
 8002694:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002696:	e002      	b.n	800269e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002698:	4b05      	ldr	r3, [pc, #20]	; (80026b0 <HAL_RCC_GetSysClockFreq+0x184>)
 800269a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800269c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800269e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3740      	adds	r7, #64	; 0x40
 80026a4:	46bd      	mov	sp, r7
 80026a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026aa:	bf00      	nop
 80026ac:	40023800 	.word	0x40023800
 80026b0:	00f42400 	.word	0x00f42400
 80026b4:	017d7840 	.word	0x017d7840

080026b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026bc:	4b03      	ldr	r3, [pc, #12]	; (80026cc <HAL_RCC_GetHCLKFreq+0x14>)
 80026be:	681b      	ldr	r3, [r3, #0]
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	20000000 	.word	0x20000000

080026d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80026d4:	f7ff fff0 	bl	80026b8 <HAL_RCC_GetHCLKFreq>
 80026d8:	4602      	mov	r2, r0
 80026da:	4b05      	ldr	r3, [pc, #20]	; (80026f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	0a9b      	lsrs	r3, r3, #10
 80026e0:	f003 0307 	and.w	r3, r3, #7
 80026e4:	4903      	ldr	r1, [pc, #12]	; (80026f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026e6:	5ccb      	ldrb	r3, [r1, r3]
 80026e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	40023800 	.word	0x40023800
 80026f4:	08005a80 	.word	0x08005a80

080026f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80026fc:	f7ff ffdc 	bl	80026b8 <HAL_RCC_GetHCLKFreq>
 8002700:	4602      	mov	r2, r0
 8002702:	4b05      	ldr	r3, [pc, #20]	; (8002718 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	0b5b      	lsrs	r3, r3, #13
 8002708:	f003 0307 	and.w	r3, r3, #7
 800270c:	4903      	ldr	r1, [pc, #12]	; (800271c <HAL_RCC_GetPCLK2Freq+0x24>)
 800270e:	5ccb      	ldrb	r3, [r1, r3]
 8002710:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002714:	4618      	mov	r0, r3
 8002716:	bd80      	pop	{r7, pc}
 8002718:	40023800 	.word	0x40023800
 800271c:	08005a80 	.word	0x08005a80

08002720 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d101      	bne.n	8002732 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e07b      	b.n	800282a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002736:	2b00      	cmp	r3, #0
 8002738:	d108      	bne.n	800274c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002742:	d009      	beq.n	8002758 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	61da      	str	r2, [r3, #28]
 800274a:	e005      	b.n	8002758 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002764:	b2db      	uxtb	r3, r3
 8002766:	2b00      	cmp	r3, #0
 8002768:	d106      	bne.n	8002778 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f7fe faee 	bl	8000d54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2202      	movs	r2, #2
 800277c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800278e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80027a0:	431a      	orrs	r2, r3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027aa:	431a      	orrs	r2, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	691b      	ldr	r3, [r3, #16]
 80027b0:	f003 0302 	and.w	r3, r3, #2
 80027b4:	431a      	orrs	r2, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	695b      	ldr	r3, [r3, #20]
 80027ba:	f003 0301 	and.w	r3, r3, #1
 80027be:	431a      	orrs	r2, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	699b      	ldr	r3, [r3, #24]
 80027c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027c8:	431a      	orrs	r2, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	69db      	ldr	r3, [r3, #28]
 80027ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80027d2:	431a      	orrs	r2, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a1b      	ldr	r3, [r3, #32]
 80027d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027dc:	ea42 0103 	orr.w	r1, r2, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	430a      	orrs	r2, r1
 80027ee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	699b      	ldr	r3, [r3, #24]
 80027f4:	0c1b      	lsrs	r3, r3, #16
 80027f6:	f003 0104 	and.w	r1, r3, #4
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fe:	f003 0210 	and.w	r2, r3, #16
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	430a      	orrs	r2, r1
 8002808:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	69da      	ldr	r2, [r3, #28]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002818:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002828:	2300      	movs	r3, #0
}
 800282a:	4618      	mov	r0, r3
 800282c:	3708      	adds	r7, #8
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}

08002832 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002832:	b580      	push	{r7, lr}
 8002834:	b088      	sub	sp, #32
 8002836:	af00      	add	r7, sp, #0
 8002838:	60f8      	str	r0, [r7, #12]
 800283a:	60b9      	str	r1, [r7, #8]
 800283c:	603b      	str	r3, [r7, #0]
 800283e:	4613      	mov	r3, r2
 8002840:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002842:	2300      	movs	r3, #0
 8002844:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800284c:	2b01      	cmp	r3, #1
 800284e:	d101      	bne.n	8002854 <HAL_SPI_Transmit+0x22>
 8002850:	2302      	movs	r3, #2
 8002852:	e12d      	b.n	8002ab0 <HAL_SPI_Transmit+0x27e>
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800285c:	f7fe fbe8 	bl	8001030 <HAL_GetTick>
 8002860:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002862:	88fb      	ldrh	r3, [r7, #6]
 8002864:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800286c:	b2db      	uxtb	r3, r3
 800286e:	2b01      	cmp	r3, #1
 8002870:	d002      	beq.n	8002878 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002872:	2302      	movs	r3, #2
 8002874:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002876:	e116      	b.n	8002aa6 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d002      	beq.n	8002884 <HAL_SPI_Transmit+0x52>
 800287e:	88fb      	ldrh	r3, [r7, #6]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d102      	bne.n	800288a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002888:	e10d      	b.n	8002aa6 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2203      	movs	r2, #3
 800288e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2200      	movs	r2, #0
 8002896:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	68ba      	ldr	r2, [r7, #8]
 800289c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	88fa      	ldrh	r2, [r7, #6]
 80028a2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	88fa      	ldrh	r2, [r7, #6]
 80028a8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2200      	movs	r2, #0
 80028ae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2200      	movs	r2, #0
 80028b4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2200      	movs	r2, #0
 80028ba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2200      	movs	r2, #0
 80028c0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2200      	movs	r2, #0
 80028c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028d0:	d10f      	bne.n	80028f2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028e0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028f0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028fc:	2b40      	cmp	r3, #64	; 0x40
 80028fe:	d007      	beq.n	8002910 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800290e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002918:	d14f      	bne.n	80029ba <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d002      	beq.n	8002928 <HAL_SPI_Transmit+0xf6>
 8002922:	8afb      	ldrh	r3, [r7, #22]
 8002924:	2b01      	cmp	r3, #1
 8002926:	d142      	bne.n	80029ae <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292c:	881a      	ldrh	r2, [r3, #0]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002938:	1c9a      	adds	r2, r3, #2
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002942:	b29b      	uxth	r3, r3
 8002944:	3b01      	subs	r3, #1
 8002946:	b29a      	uxth	r2, r3
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800294c:	e02f      	b.n	80029ae <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f003 0302 	and.w	r3, r3, #2
 8002958:	2b02      	cmp	r3, #2
 800295a:	d112      	bne.n	8002982 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002960:	881a      	ldrh	r2, [r3, #0]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296c:	1c9a      	adds	r2, r3, #2
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002976:	b29b      	uxth	r3, r3
 8002978:	3b01      	subs	r3, #1
 800297a:	b29a      	uxth	r2, r3
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	86da      	strh	r2, [r3, #54]	; 0x36
 8002980:	e015      	b.n	80029ae <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002982:	f7fe fb55 	bl	8001030 <HAL_GetTick>
 8002986:	4602      	mov	r2, r0
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	683a      	ldr	r2, [r7, #0]
 800298e:	429a      	cmp	r2, r3
 8002990:	d803      	bhi.n	800299a <HAL_SPI_Transmit+0x168>
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002998:	d102      	bne.n	80029a0 <HAL_SPI_Transmit+0x16e>
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d106      	bne.n	80029ae <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80029ac:	e07b      	b.n	8002aa6 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d1ca      	bne.n	800294e <HAL_SPI_Transmit+0x11c>
 80029b8:	e050      	b.n	8002a5c <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d002      	beq.n	80029c8 <HAL_SPI_Transmit+0x196>
 80029c2:	8afb      	ldrh	r3, [r7, #22]
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d144      	bne.n	8002a52 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	330c      	adds	r3, #12
 80029d2:	7812      	ldrb	r2, [r2, #0]
 80029d4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029da:	1c5a      	adds	r2, r3, #1
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	3b01      	subs	r3, #1
 80029e8:	b29a      	uxth	r2, r3
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80029ee:	e030      	b.n	8002a52 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d113      	bne.n	8002a26 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	330c      	adds	r3, #12
 8002a08:	7812      	ldrb	r2, [r2, #0]
 8002a0a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a10:	1c5a      	adds	r2, r3, #1
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	3b01      	subs	r3, #1
 8002a1e:	b29a      	uxth	r2, r3
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	86da      	strh	r2, [r3, #54]	; 0x36
 8002a24:	e015      	b.n	8002a52 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a26:	f7fe fb03 	bl	8001030 <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	683a      	ldr	r2, [r7, #0]
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d803      	bhi.n	8002a3e <HAL_SPI_Transmit+0x20c>
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a3c:	d102      	bne.n	8002a44 <HAL_SPI_Transmit+0x212>
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d106      	bne.n	8002a52 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8002a44:	2303      	movs	r3, #3
 8002a46:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002a50:	e029      	b.n	8002aa6 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d1c9      	bne.n	80029f0 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a5c:	69ba      	ldr	r2, [r7, #24]
 8002a5e:	6839      	ldr	r1, [r7, #0]
 8002a60:	68f8      	ldr	r0, [r7, #12]
 8002a62:	f000 f8b1 	bl	8002bc8 <SPI_EndRxTxTransaction>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d002      	beq.n	8002a72 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2220      	movs	r2, #32
 8002a70:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d10a      	bne.n	8002a90 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	613b      	str	r3, [r7, #16]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	613b      	str	r3, [r7, #16]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	613b      	str	r3, [r7, #16]
 8002a8e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d002      	beq.n	8002a9e <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	77fb      	strb	r3, [r7, #31]
 8002a9c:	e003      	b.n	8002aa6 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002aae:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3720      	adds	r7, #32
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b088      	sub	sp, #32
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	60b9      	str	r1, [r7, #8]
 8002ac2:	603b      	str	r3, [r7, #0]
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002ac8:	f7fe fab2 	bl	8001030 <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ad0:	1a9b      	subs	r3, r3, r2
 8002ad2:	683a      	ldr	r2, [r7, #0]
 8002ad4:	4413      	add	r3, r2
 8002ad6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002ad8:	f7fe faaa 	bl	8001030 <HAL_GetTick>
 8002adc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002ade:	4b39      	ldr	r3, [pc, #228]	; (8002bc4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	015b      	lsls	r3, r3, #5
 8002ae4:	0d1b      	lsrs	r3, r3, #20
 8002ae6:	69fa      	ldr	r2, [r7, #28]
 8002ae8:	fb02 f303 	mul.w	r3, r2, r3
 8002aec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002aee:	e054      	b.n	8002b9a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002af6:	d050      	beq.n	8002b9a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002af8:	f7fe fa9a 	bl	8001030 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	69fa      	ldr	r2, [r7, #28]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d902      	bls.n	8002b0e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d13d      	bne.n	8002b8a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	685a      	ldr	r2, [r3, #4]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002b1c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b26:	d111      	bne.n	8002b4c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b30:	d004      	beq.n	8002b3c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b3a:	d107      	bne.n	8002b4c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b4a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b54:	d10f      	bne.n	8002b76 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b64:	601a      	str	r2, [r3, #0]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b74:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2201      	movs	r2, #1
 8002b7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e017      	b.n	8002bba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d101      	bne.n	8002b94 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002b90:	2300      	movs	r3, #0
 8002b92:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	3b01      	subs	r3, #1
 8002b98:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	689a      	ldr	r2, [r3, #8]
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	68ba      	ldr	r2, [r7, #8]
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	bf0c      	ite	eq
 8002baa:	2301      	moveq	r3, #1
 8002bac:	2300      	movne	r3, #0
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	79fb      	ldrb	r3, [r7, #7]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d19b      	bne.n	8002af0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3720      	adds	r7, #32
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	20000000 	.word	0x20000000

08002bc8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b088      	sub	sp, #32
 8002bcc:	af02      	add	r7, sp, #8
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	60b9      	str	r1, [r7, #8]
 8002bd2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	9300      	str	r3, [sp, #0]
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	2102      	movs	r1, #2
 8002bde:	68f8      	ldr	r0, [r7, #12]
 8002be0:	f7ff ff6a 	bl	8002ab8 <SPI_WaitFlagStateUntilTimeout>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d007      	beq.n	8002bfa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bee:	f043 0220 	orr.w	r2, r3, #32
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e032      	b.n	8002c60 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002bfa:	4b1b      	ldr	r3, [pc, #108]	; (8002c68 <SPI_EndRxTxTransaction+0xa0>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a1b      	ldr	r2, [pc, #108]	; (8002c6c <SPI_EndRxTxTransaction+0xa4>)
 8002c00:	fba2 2303 	umull	r2, r3, r2, r3
 8002c04:	0d5b      	lsrs	r3, r3, #21
 8002c06:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002c0a:	fb02 f303 	mul.w	r3, r2, r3
 8002c0e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c18:	d112      	bne.n	8002c40 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	9300      	str	r3, [sp, #0]
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	2200      	movs	r2, #0
 8002c22:	2180      	movs	r1, #128	; 0x80
 8002c24:	68f8      	ldr	r0, [r7, #12]
 8002c26:	f7ff ff47 	bl	8002ab8 <SPI_WaitFlagStateUntilTimeout>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d016      	beq.n	8002c5e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c34:	f043 0220 	orr.w	r2, r3, #32
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e00f      	b.n	8002c60 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d00a      	beq.n	8002c5c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	3b01      	subs	r3, #1
 8002c4a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c56:	2b80      	cmp	r3, #128	; 0x80
 8002c58:	d0f2      	beq.n	8002c40 <SPI_EndRxTxTransaction+0x78>
 8002c5a:	e000      	b.n	8002c5e <SPI_EndRxTxTransaction+0x96>
        break;
 8002c5c:	bf00      	nop
  }

  return HAL_OK;
 8002c5e:	2300      	movs	r3, #0
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3718      	adds	r7, #24
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	20000000 	.word	0x20000000
 8002c6c:	165e9f81 	.word	0x165e9f81

08002c70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d101      	bne.n	8002c82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e042      	b.n	8002d08 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d106      	bne.n	8002c9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f7fe f8a4 	bl	8000de4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2224      	movs	r2, #36	; 0x24
 8002ca0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	68da      	ldr	r2, [r3, #12]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002cb2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f000 fcdb 	bl	8003670 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	691a      	ldr	r2, [r3, #16]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002cc8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	695a      	ldr	r2, [r3, #20]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002cd8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	68da      	ldr	r2, [r3, #12]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ce8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2220      	movs	r2, #32
 8002cf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2220      	movs	r2, #32
 8002cfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002d06:	2300      	movs	r3, #0
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3708      	adds	r7, #8
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	60b9      	str	r1, [r7, #8]
 8002d1a:	4613      	mov	r3, r2
 8002d1c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	2b20      	cmp	r3, #32
 8002d28:	d112      	bne.n	8002d50 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d002      	beq.n	8002d36 <HAL_UART_Receive_IT+0x26>
 8002d30:	88fb      	ldrh	r3, [r7, #6]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d101      	bne.n	8002d3a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e00b      	b.n	8002d52 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002d40:	88fb      	ldrh	r3, [r7, #6]
 8002d42:	461a      	mov	r2, r3
 8002d44:	68b9      	ldr	r1, [r7, #8]
 8002d46:	68f8      	ldr	r0, [r7, #12]
 8002d48:	f000 faba 	bl	80032c0 <UART_Start_Receive_IT>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	e000      	b.n	8002d52 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002d50:	2302      	movs	r3, #2
  }
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3710      	adds	r7, #16
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
	...

08002d5c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b0ba      	sub	sp, #232	; 0xe8
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	695b      	ldr	r3, [r3, #20]
 8002d7e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002d82:	2300      	movs	r3, #0
 8002d84:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002d8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d92:	f003 030f 	and.w	r3, r3, #15
 8002d96:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002d9a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d10f      	bne.n	8002dc2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002da2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002da6:	f003 0320 	and.w	r3, r3, #32
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d009      	beq.n	8002dc2 <HAL_UART_IRQHandler+0x66>
 8002dae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002db2:	f003 0320 	and.w	r3, r3, #32
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d003      	beq.n	8002dc2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f000 fb99 	bl	80034f2 <UART_Receive_IT>
      return;
 8002dc0:	e25b      	b.n	800327a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002dc2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	f000 80de 	beq.w	8002f88 <HAL_UART_IRQHandler+0x22c>
 8002dcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002dd0:	f003 0301 	and.w	r3, r3, #1
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d106      	bne.n	8002de6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002dd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ddc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	f000 80d1 	beq.w	8002f88 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002de6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dea:	f003 0301 	and.w	r3, r3, #1
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d00b      	beq.n	8002e0a <HAL_UART_IRQHandler+0xae>
 8002df2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d005      	beq.n	8002e0a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e02:	f043 0201 	orr.w	r2, r3, #1
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e0e:	f003 0304 	and.w	r3, r3, #4
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d00b      	beq.n	8002e2e <HAL_UART_IRQHandler+0xd2>
 8002e16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e1a:	f003 0301 	and.w	r3, r3, #1
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d005      	beq.n	8002e2e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e26:	f043 0202 	orr.w	r2, r3, #2
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e32:	f003 0302 	and.w	r3, r3, #2
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d00b      	beq.n	8002e52 <HAL_UART_IRQHandler+0xf6>
 8002e3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e3e:	f003 0301 	and.w	r3, r3, #1
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d005      	beq.n	8002e52 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e4a:	f043 0204 	orr.w	r2, r3, #4
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002e52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e56:	f003 0308 	and.w	r3, r3, #8
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d011      	beq.n	8002e82 <HAL_UART_IRQHandler+0x126>
 8002e5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e62:	f003 0320 	and.w	r3, r3, #32
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d105      	bne.n	8002e76 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002e6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e6e:	f003 0301 	and.w	r3, r3, #1
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d005      	beq.n	8002e82 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e7a:	f043 0208 	orr.w	r2, r3, #8
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	f000 81f2 	beq.w	8003270 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e90:	f003 0320 	and.w	r3, r3, #32
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d008      	beq.n	8002eaa <HAL_UART_IRQHandler+0x14e>
 8002e98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e9c:	f003 0320 	and.w	r3, r3, #32
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d002      	beq.n	8002eaa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f000 fb24 	bl	80034f2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	695b      	ldr	r3, [r3, #20]
 8002eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eb4:	2b40      	cmp	r3, #64	; 0x40
 8002eb6:	bf0c      	ite	eq
 8002eb8:	2301      	moveq	r3, #1
 8002eba:	2300      	movne	r3, #0
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec6:	f003 0308 	and.w	r3, r3, #8
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d103      	bne.n	8002ed6 <HAL_UART_IRQHandler+0x17a>
 8002ece:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d04f      	beq.n	8002f76 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f000 fa2c 	bl	8003334 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	695b      	ldr	r3, [r3, #20]
 8002ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ee6:	2b40      	cmp	r3, #64	; 0x40
 8002ee8:	d141      	bne.n	8002f6e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	3314      	adds	r3, #20
 8002ef0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ef4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002ef8:	e853 3f00 	ldrex	r3, [r3]
 8002efc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002f00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002f04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	3314      	adds	r3, #20
 8002f12:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002f16:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002f1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f1e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002f22:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002f26:	e841 2300 	strex	r3, r2, [r1]
 8002f2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002f2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d1d9      	bne.n	8002eea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d013      	beq.n	8002f66 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f42:	4a7e      	ldr	r2, [pc, #504]	; (800313c <HAL_UART_IRQHandler+0x3e0>)
 8002f44:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7fe fdcf 	bl	8001aee <HAL_DMA_Abort_IT>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d016      	beq.n	8002f84 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002f60:	4610      	mov	r0, r2
 8002f62:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f64:	e00e      	b.n	8002f84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f000 f994 	bl	8003294 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f6c:	e00a      	b.n	8002f84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f000 f990 	bl	8003294 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f74:	e006      	b.n	8002f84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f000 f98c 	bl	8003294 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8002f82:	e175      	b.n	8003270 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f84:	bf00      	nop
    return;
 8002f86:	e173      	b.n	8003270 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	f040 814f 	bne.w	8003230 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002f92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f96:	f003 0310 	and.w	r3, r3, #16
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	f000 8148 	beq.w	8003230 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002fa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fa4:	f003 0310 	and.w	r3, r3, #16
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	f000 8141 	beq.w	8003230 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002fae:	2300      	movs	r3, #0
 8002fb0:	60bb      	str	r3, [r7, #8]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	60bb      	str	r3, [r7, #8]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	60bb      	str	r3, [r7, #8]
 8002fc2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	695b      	ldr	r3, [r3, #20]
 8002fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fce:	2b40      	cmp	r3, #64	; 0x40
 8002fd0:	f040 80b6 	bne.w	8003140 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002fe0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	f000 8145 	beq.w	8003274 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002fee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	f080 813e 	bcs.w	8003274 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002ffe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003004:	69db      	ldr	r3, [r3, #28]
 8003006:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800300a:	f000 8088 	beq.w	800311e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	330c      	adds	r3, #12
 8003014:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003018:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800301c:	e853 3f00 	ldrex	r3, [r3]
 8003020:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003024:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003028:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800302c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	330c      	adds	r3, #12
 8003036:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800303a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800303e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003042:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003046:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800304a:	e841 2300 	strex	r3, r2, [r1]
 800304e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003052:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003056:	2b00      	cmp	r3, #0
 8003058:	d1d9      	bne.n	800300e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	3314      	adds	r3, #20
 8003060:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003062:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003064:	e853 3f00 	ldrex	r3, [r3]
 8003068:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800306a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800306c:	f023 0301 	bic.w	r3, r3, #1
 8003070:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	3314      	adds	r3, #20
 800307a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800307e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003082:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003084:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003086:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800308a:	e841 2300 	strex	r3, r2, [r1]
 800308e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003090:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003092:	2b00      	cmp	r3, #0
 8003094:	d1e1      	bne.n	800305a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	3314      	adds	r3, #20
 800309c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800309e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80030a0:	e853 3f00 	ldrex	r3, [r3]
 80030a4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80030a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	3314      	adds	r3, #20
 80030b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80030ba:	66fa      	str	r2, [r7, #108]	; 0x6c
 80030bc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030be:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80030c0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80030c2:	e841 2300 	strex	r3, r2, [r1]
 80030c6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80030c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d1e3      	bne.n	8003096 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2220      	movs	r2, #32
 80030d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	330c      	adds	r3, #12
 80030e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030e6:	e853 3f00 	ldrex	r3, [r3]
 80030ea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80030ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030ee:	f023 0310 	bic.w	r3, r3, #16
 80030f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	330c      	adds	r3, #12
 80030fc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003100:	65ba      	str	r2, [r7, #88]	; 0x58
 8003102:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003104:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003106:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003108:	e841 2300 	strex	r3, r2, [r1]
 800310c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800310e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003110:	2b00      	cmp	r3, #0
 8003112:	d1e3      	bne.n	80030dc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003118:	4618      	mov	r0, r3
 800311a:	f7fe fc78 	bl	8001a0e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2202      	movs	r2, #2
 8003122:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800312c:	b29b      	uxth	r3, r3
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	b29b      	uxth	r3, r3
 8003132:	4619      	mov	r1, r3
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f000 f8b7 	bl	80032a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800313a:	e09b      	b.n	8003274 <HAL_UART_IRQHandler+0x518>
 800313c:	080033fb 	.word	0x080033fb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003148:	b29b      	uxth	r3, r3
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003154:	b29b      	uxth	r3, r3
 8003156:	2b00      	cmp	r3, #0
 8003158:	f000 808e 	beq.w	8003278 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800315c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003160:	2b00      	cmp	r3, #0
 8003162:	f000 8089 	beq.w	8003278 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	330c      	adds	r3, #12
 800316c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800316e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003170:	e853 3f00 	ldrex	r3, [r3]
 8003174:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003178:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800317c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	330c      	adds	r3, #12
 8003186:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800318a:	647a      	str	r2, [r7, #68]	; 0x44
 800318c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800318e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003190:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003192:	e841 2300 	strex	r3, r2, [r1]
 8003196:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003198:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800319a:	2b00      	cmp	r3, #0
 800319c:	d1e3      	bne.n	8003166 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	3314      	adds	r3, #20
 80031a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a8:	e853 3f00 	ldrex	r3, [r3]
 80031ac:	623b      	str	r3, [r7, #32]
   return(result);
 80031ae:	6a3b      	ldr	r3, [r7, #32]
 80031b0:	f023 0301 	bic.w	r3, r3, #1
 80031b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	3314      	adds	r3, #20
 80031be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80031c2:	633a      	str	r2, [r7, #48]	; 0x30
 80031c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80031c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031ca:	e841 2300 	strex	r3, r2, [r1]
 80031ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80031d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d1e3      	bne.n	800319e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2220      	movs	r2, #32
 80031da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	330c      	adds	r3, #12
 80031ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	e853 3f00 	ldrex	r3, [r3]
 80031f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f023 0310 	bic.w	r3, r3, #16
 80031fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	330c      	adds	r3, #12
 8003204:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003208:	61fa      	str	r2, [r7, #28]
 800320a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800320c:	69b9      	ldr	r1, [r7, #24]
 800320e:	69fa      	ldr	r2, [r7, #28]
 8003210:	e841 2300 	strex	r3, r2, [r1]
 8003214:	617b      	str	r3, [r7, #20]
   return(result);
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d1e3      	bne.n	80031e4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2202      	movs	r2, #2
 8003220:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003222:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003226:	4619      	mov	r1, r3
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f000 f83d 	bl	80032a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800322e:	e023      	b.n	8003278 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003230:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003234:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003238:	2b00      	cmp	r3, #0
 800323a:	d009      	beq.n	8003250 <HAL_UART_IRQHandler+0x4f4>
 800323c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003240:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003244:	2b00      	cmp	r3, #0
 8003246:	d003      	beq.n	8003250 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f000 f8ea 	bl	8003422 <UART_Transmit_IT>
    return;
 800324e:	e014      	b.n	800327a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003250:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003258:	2b00      	cmp	r3, #0
 800325a:	d00e      	beq.n	800327a <HAL_UART_IRQHandler+0x51e>
 800325c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003264:	2b00      	cmp	r3, #0
 8003266:	d008      	beq.n	800327a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f000 f92a 	bl	80034c2 <UART_EndTransmit_IT>
    return;
 800326e:	e004      	b.n	800327a <HAL_UART_IRQHandler+0x51e>
    return;
 8003270:	bf00      	nop
 8003272:	e002      	b.n	800327a <HAL_UART_IRQHandler+0x51e>
      return;
 8003274:	bf00      	nop
 8003276:	e000      	b.n	800327a <HAL_UART_IRQHandler+0x51e>
      return;
 8003278:	bf00      	nop
  }
}
 800327a:	37e8      	adds	r7, #232	; 0xe8
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003288:	bf00      	nop
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr

08003294 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800329c:	bf00      	nop
 800329e:	370c      	adds	r7, #12
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr

080032a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	460b      	mov	r3, r1
 80032b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80032b4:	bf00      	nop
 80032b6:	370c      	adds	r7, #12
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr

080032c0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b085      	sub	sp, #20
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	60b9      	str	r1, [r7, #8]
 80032ca:	4613      	mov	r3, r2
 80032cc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	68ba      	ldr	r2, [r7, #8]
 80032d2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	88fa      	ldrh	r2, [r7, #6]
 80032d8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	88fa      	ldrh	r2, [r7, #6]
 80032de:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2200      	movs	r2, #0
 80032e4:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2222      	movs	r2, #34	; 0x22
 80032ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d007      	beq.n	8003306 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	68da      	ldr	r2, [r3, #12]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003304:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	695a      	ldr	r2, [r3, #20]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f042 0201 	orr.w	r2, r2, #1
 8003314:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	68da      	ldr	r2, [r3, #12]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f042 0220 	orr.w	r2, r2, #32
 8003324:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003326:	2300      	movs	r3, #0
}
 8003328:	4618      	mov	r0, r3
 800332a:	3714      	adds	r7, #20
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr

08003334 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003334:	b480      	push	{r7}
 8003336:	b095      	sub	sp, #84	; 0x54
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	330c      	adds	r3, #12
 8003342:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003346:	e853 3f00 	ldrex	r3, [r3]
 800334a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800334c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800334e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003352:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	330c      	adds	r3, #12
 800335a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800335c:	643a      	str	r2, [r7, #64]	; 0x40
 800335e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003360:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003362:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003364:	e841 2300 	strex	r3, r2, [r1]
 8003368:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800336a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800336c:	2b00      	cmp	r3, #0
 800336e:	d1e5      	bne.n	800333c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	3314      	adds	r3, #20
 8003376:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003378:	6a3b      	ldr	r3, [r7, #32]
 800337a:	e853 3f00 	ldrex	r3, [r3]
 800337e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	f023 0301 	bic.w	r3, r3, #1
 8003386:	64bb      	str	r3, [r7, #72]	; 0x48
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	3314      	adds	r3, #20
 800338e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003390:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003392:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003394:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003396:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003398:	e841 2300 	strex	r3, r2, [r1]
 800339c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800339e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d1e5      	bne.n	8003370 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d119      	bne.n	80033e0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	330c      	adds	r3, #12
 80033b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	e853 3f00 	ldrex	r3, [r3]
 80033ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	f023 0310 	bic.w	r3, r3, #16
 80033c2:	647b      	str	r3, [r7, #68]	; 0x44
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	330c      	adds	r3, #12
 80033ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80033cc:	61ba      	str	r2, [r7, #24]
 80033ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033d0:	6979      	ldr	r1, [r7, #20]
 80033d2:	69ba      	ldr	r2, [r7, #24]
 80033d4:	e841 2300 	strex	r3, r2, [r1]
 80033d8:	613b      	str	r3, [r7, #16]
   return(result);
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d1e5      	bne.n	80033ac <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2220      	movs	r2, #32
 80033e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	631a      	str	r2, [r3, #48]	; 0x30
}
 80033ee:	bf00      	nop
 80033f0:	3754      	adds	r7, #84	; 0x54
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr

080033fa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80033fa:	b580      	push	{r7, lr}
 80033fc:	b084      	sub	sp, #16
 80033fe:	af00      	add	r7, sp, #0
 8003400:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003406:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2200      	movs	r2, #0
 800340c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2200      	movs	r2, #0
 8003412:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003414:	68f8      	ldr	r0, [r7, #12]
 8003416:	f7ff ff3d 	bl	8003294 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800341a:	bf00      	nop
 800341c:	3710      	adds	r7, #16
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}

08003422 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003422:	b480      	push	{r7}
 8003424:	b085      	sub	sp, #20
 8003426:	af00      	add	r7, sp, #0
 8003428:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2b21      	cmp	r3, #33	; 0x21
 8003434:	d13e      	bne.n	80034b4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800343e:	d114      	bne.n	800346a <UART_Transmit_IT+0x48>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	691b      	ldr	r3, [r3, #16]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d110      	bne.n	800346a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6a1b      	ldr	r3, [r3, #32]
 800344c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	881b      	ldrh	r3, [r3, #0]
 8003452:	461a      	mov	r2, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800345c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a1b      	ldr	r3, [r3, #32]
 8003462:	1c9a      	adds	r2, r3, #2
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	621a      	str	r2, [r3, #32]
 8003468:	e008      	b.n	800347c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a1b      	ldr	r3, [r3, #32]
 800346e:	1c59      	adds	r1, r3, #1
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	6211      	str	r1, [r2, #32]
 8003474:	781a      	ldrb	r2, [r3, #0]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003480:	b29b      	uxth	r3, r3
 8003482:	3b01      	subs	r3, #1
 8003484:	b29b      	uxth	r3, r3
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	4619      	mov	r1, r3
 800348a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800348c:	2b00      	cmp	r3, #0
 800348e:	d10f      	bne.n	80034b0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	68da      	ldr	r2, [r3, #12]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800349e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	68da      	ldr	r2, [r3, #12]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034ae:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80034b0:	2300      	movs	r3, #0
 80034b2:	e000      	b.n	80034b6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80034b4:	2302      	movs	r3, #2
  }
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3714      	adds	r7, #20
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr

080034c2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80034c2:	b580      	push	{r7, lr}
 80034c4:	b082      	sub	sp, #8
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	68da      	ldr	r2, [r3, #12]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034d8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2220      	movs	r2, #32
 80034de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f7ff fecc 	bl	8003280 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3708      	adds	r7, #8
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}

080034f2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80034f2:	b580      	push	{r7, lr}
 80034f4:	b08c      	sub	sp, #48	; 0x30
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003500:	b2db      	uxtb	r3, r3
 8003502:	2b22      	cmp	r3, #34	; 0x22
 8003504:	f040 80ae 	bne.w	8003664 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003510:	d117      	bne.n	8003542 <UART_Receive_IT+0x50>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d113      	bne.n	8003542 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800351a:	2300      	movs	r3, #0
 800351c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003522:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	b29b      	uxth	r3, r3
 800352c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003530:	b29a      	uxth	r2, r3
 8003532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003534:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800353a:	1c9a      	adds	r2, r3, #2
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	629a      	str	r2, [r3, #40]	; 0x28
 8003540:	e026      	b.n	8003590 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003546:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003548:	2300      	movs	r3, #0
 800354a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003554:	d007      	beq.n	8003566 <UART_Receive_IT+0x74>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d10a      	bne.n	8003574 <UART_Receive_IT+0x82>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d106      	bne.n	8003574 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	b2da      	uxtb	r2, r3
 800356e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003570:	701a      	strb	r2, [r3, #0]
 8003572:	e008      	b.n	8003586 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	b2db      	uxtb	r3, r3
 800357c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003580:	b2da      	uxtb	r2, r3
 8003582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003584:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800358a:	1c5a      	adds	r2, r3, #1
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003594:	b29b      	uxth	r3, r3
 8003596:	3b01      	subs	r3, #1
 8003598:	b29b      	uxth	r3, r3
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	4619      	mov	r1, r3
 800359e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d15d      	bne.n	8003660 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	68da      	ldr	r2, [r3, #12]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f022 0220 	bic.w	r2, r2, #32
 80035b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	68da      	ldr	r2, [r3, #12]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	695a      	ldr	r2, [r3, #20]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f022 0201 	bic.w	r2, r2, #1
 80035d2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2220      	movs	r2, #32
 80035d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d135      	bne.n	8003656 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	330c      	adds	r3, #12
 80035f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	e853 3f00 	ldrex	r3, [r3]
 80035fe:	613b      	str	r3, [r7, #16]
   return(result);
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	f023 0310 	bic.w	r3, r3, #16
 8003606:	627b      	str	r3, [r7, #36]	; 0x24
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	330c      	adds	r3, #12
 800360e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003610:	623a      	str	r2, [r7, #32]
 8003612:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003614:	69f9      	ldr	r1, [r7, #28]
 8003616:	6a3a      	ldr	r2, [r7, #32]
 8003618:	e841 2300 	strex	r3, r2, [r1]
 800361c:	61bb      	str	r3, [r7, #24]
   return(result);
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d1e5      	bne.n	80035f0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0310 	and.w	r3, r3, #16
 800362e:	2b10      	cmp	r3, #16
 8003630:	d10a      	bne.n	8003648 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003632:	2300      	movs	r3, #0
 8003634:	60fb      	str	r3, [r7, #12]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	60fb      	str	r3, [r7, #12]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	60fb      	str	r3, [r7, #12]
 8003646:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800364c:	4619      	mov	r1, r3
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f7ff fe2a 	bl	80032a8 <HAL_UARTEx_RxEventCallback>
 8003654:	e002      	b.n	800365c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f7fd f8e0 	bl	800081c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800365c:	2300      	movs	r3, #0
 800365e:	e002      	b.n	8003666 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003660:	2300      	movs	r3, #0
 8003662:	e000      	b.n	8003666 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003664:	2302      	movs	r3, #2
  }
}
 8003666:	4618      	mov	r0, r3
 8003668:	3730      	adds	r7, #48	; 0x30
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
	...

08003670 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003670:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003674:	b0c0      	sub	sp, #256	; 0x100
 8003676:	af00      	add	r7, sp, #0
 8003678:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800367c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	691b      	ldr	r3, [r3, #16]
 8003684:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800368c:	68d9      	ldr	r1, [r3, #12]
 800368e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	ea40 0301 	orr.w	r3, r0, r1
 8003698:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800369a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800369e:	689a      	ldr	r2, [r3, #8]
 80036a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	431a      	orrs	r2, r3
 80036a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036ac:	695b      	ldr	r3, [r3, #20]
 80036ae:	431a      	orrs	r2, r3
 80036b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036b4:	69db      	ldr	r3, [r3, #28]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80036bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80036c8:	f021 010c 	bic.w	r1, r1, #12
 80036cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80036d6:	430b      	orrs	r3, r1
 80036d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	695b      	ldr	r3, [r3, #20]
 80036e2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80036e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036ea:	6999      	ldr	r1, [r3, #24]
 80036ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	ea40 0301 	orr.w	r3, r0, r1
 80036f6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80036f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	4b8f      	ldr	r3, [pc, #572]	; (800393c <UART_SetConfig+0x2cc>)
 8003700:	429a      	cmp	r2, r3
 8003702:	d005      	beq.n	8003710 <UART_SetConfig+0xa0>
 8003704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	4b8d      	ldr	r3, [pc, #564]	; (8003940 <UART_SetConfig+0x2d0>)
 800370c:	429a      	cmp	r2, r3
 800370e:	d104      	bne.n	800371a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003710:	f7fe fff2 	bl	80026f8 <HAL_RCC_GetPCLK2Freq>
 8003714:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003718:	e003      	b.n	8003722 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800371a:	f7fe ffd9 	bl	80026d0 <HAL_RCC_GetPCLK1Freq>
 800371e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003722:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003726:	69db      	ldr	r3, [r3, #28]
 8003728:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800372c:	f040 810c 	bne.w	8003948 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003730:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003734:	2200      	movs	r2, #0
 8003736:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800373a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800373e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003742:	4622      	mov	r2, r4
 8003744:	462b      	mov	r3, r5
 8003746:	1891      	adds	r1, r2, r2
 8003748:	65b9      	str	r1, [r7, #88]	; 0x58
 800374a:	415b      	adcs	r3, r3
 800374c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800374e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003752:	4621      	mov	r1, r4
 8003754:	eb12 0801 	adds.w	r8, r2, r1
 8003758:	4629      	mov	r1, r5
 800375a:	eb43 0901 	adc.w	r9, r3, r1
 800375e:	f04f 0200 	mov.w	r2, #0
 8003762:	f04f 0300 	mov.w	r3, #0
 8003766:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800376a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800376e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003772:	4690      	mov	r8, r2
 8003774:	4699      	mov	r9, r3
 8003776:	4623      	mov	r3, r4
 8003778:	eb18 0303 	adds.w	r3, r8, r3
 800377c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003780:	462b      	mov	r3, r5
 8003782:	eb49 0303 	adc.w	r3, r9, r3
 8003786:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800378a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003796:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800379a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800379e:	460b      	mov	r3, r1
 80037a0:	18db      	adds	r3, r3, r3
 80037a2:	653b      	str	r3, [r7, #80]	; 0x50
 80037a4:	4613      	mov	r3, r2
 80037a6:	eb42 0303 	adc.w	r3, r2, r3
 80037aa:	657b      	str	r3, [r7, #84]	; 0x54
 80037ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80037b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80037b4:	f7fc fd0e 	bl	80001d4 <__aeabi_uldivmod>
 80037b8:	4602      	mov	r2, r0
 80037ba:	460b      	mov	r3, r1
 80037bc:	4b61      	ldr	r3, [pc, #388]	; (8003944 <UART_SetConfig+0x2d4>)
 80037be:	fba3 2302 	umull	r2, r3, r3, r2
 80037c2:	095b      	lsrs	r3, r3, #5
 80037c4:	011c      	lsls	r4, r3, #4
 80037c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037ca:	2200      	movs	r2, #0
 80037cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80037d0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80037d4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80037d8:	4642      	mov	r2, r8
 80037da:	464b      	mov	r3, r9
 80037dc:	1891      	adds	r1, r2, r2
 80037de:	64b9      	str	r1, [r7, #72]	; 0x48
 80037e0:	415b      	adcs	r3, r3
 80037e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80037e8:	4641      	mov	r1, r8
 80037ea:	eb12 0a01 	adds.w	sl, r2, r1
 80037ee:	4649      	mov	r1, r9
 80037f0:	eb43 0b01 	adc.w	fp, r3, r1
 80037f4:	f04f 0200 	mov.w	r2, #0
 80037f8:	f04f 0300 	mov.w	r3, #0
 80037fc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003800:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003804:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003808:	4692      	mov	sl, r2
 800380a:	469b      	mov	fp, r3
 800380c:	4643      	mov	r3, r8
 800380e:	eb1a 0303 	adds.w	r3, sl, r3
 8003812:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003816:	464b      	mov	r3, r9
 8003818:	eb4b 0303 	adc.w	r3, fp, r3
 800381c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800382c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003830:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003834:	460b      	mov	r3, r1
 8003836:	18db      	adds	r3, r3, r3
 8003838:	643b      	str	r3, [r7, #64]	; 0x40
 800383a:	4613      	mov	r3, r2
 800383c:	eb42 0303 	adc.w	r3, r2, r3
 8003840:	647b      	str	r3, [r7, #68]	; 0x44
 8003842:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003846:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800384a:	f7fc fcc3 	bl	80001d4 <__aeabi_uldivmod>
 800384e:	4602      	mov	r2, r0
 8003850:	460b      	mov	r3, r1
 8003852:	4611      	mov	r1, r2
 8003854:	4b3b      	ldr	r3, [pc, #236]	; (8003944 <UART_SetConfig+0x2d4>)
 8003856:	fba3 2301 	umull	r2, r3, r3, r1
 800385a:	095b      	lsrs	r3, r3, #5
 800385c:	2264      	movs	r2, #100	; 0x64
 800385e:	fb02 f303 	mul.w	r3, r2, r3
 8003862:	1acb      	subs	r3, r1, r3
 8003864:	00db      	lsls	r3, r3, #3
 8003866:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800386a:	4b36      	ldr	r3, [pc, #216]	; (8003944 <UART_SetConfig+0x2d4>)
 800386c:	fba3 2302 	umull	r2, r3, r3, r2
 8003870:	095b      	lsrs	r3, r3, #5
 8003872:	005b      	lsls	r3, r3, #1
 8003874:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003878:	441c      	add	r4, r3
 800387a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800387e:	2200      	movs	r2, #0
 8003880:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003884:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003888:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800388c:	4642      	mov	r2, r8
 800388e:	464b      	mov	r3, r9
 8003890:	1891      	adds	r1, r2, r2
 8003892:	63b9      	str	r1, [r7, #56]	; 0x38
 8003894:	415b      	adcs	r3, r3
 8003896:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003898:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800389c:	4641      	mov	r1, r8
 800389e:	1851      	adds	r1, r2, r1
 80038a0:	6339      	str	r1, [r7, #48]	; 0x30
 80038a2:	4649      	mov	r1, r9
 80038a4:	414b      	adcs	r3, r1
 80038a6:	637b      	str	r3, [r7, #52]	; 0x34
 80038a8:	f04f 0200 	mov.w	r2, #0
 80038ac:	f04f 0300 	mov.w	r3, #0
 80038b0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80038b4:	4659      	mov	r1, fp
 80038b6:	00cb      	lsls	r3, r1, #3
 80038b8:	4651      	mov	r1, sl
 80038ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038be:	4651      	mov	r1, sl
 80038c0:	00ca      	lsls	r2, r1, #3
 80038c2:	4610      	mov	r0, r2
 80038c4:	4619      	mov	r1, r3
 80038c6:	4603      	mov	r3, r0
 80038c8:	4642      	mov	r2, r8
 80038ca:	189b      	adds	r3, r3, r2
 80038cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80038d0:	464b      	mov	r3, r9
 80038d2:	460a      	mov	r2, r1
 80038d4:	eb42 0303 	adc.w	r3, r2, r3
 80038d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80038dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80038e8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80038ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80038f0:	460b      	mov	r3, r1
 80038f2:	18db      	adds	r3, r3, r3
 80038f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80038f6:	4613      	mov	r3, r2
 80038f8:	eb42 0303 	adc.w	r3, r2, r3
 80038fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003902:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003906:	f7fc fc65 	bl	80001d4 <__aeabi_uldivmod>
 800390a:	4602      	mov	r2, r0
 800390c:	460b      	mov	r3, r1
 800390e:	4b0d      	ldr	r3, [pc, #52]	; (8003944 <UART_SetConfig+0x2d4>)
 8003910:	fba3 1302 	umull	r1, r3, r3, r2
 8003914:	095b      	lsrs	r3, r3, #5
 8003916:	2164      	movs	r1, #100	; 0x64
 8003918:	fb01 f303 	mul.w	r3, r1, r3
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	00db      	lsls	r3, r3, #3
 8003920:	3332      	adds	r3, #50	; 0x32
 8003922:	4a08      	ldr	r2, [pc, #32]	; (8003944 <UART_SetConfig+0x2d4>)
 8003924:	fba2 2303 	umull	r2, r3, r2, r3
 8003928:	095b      	lsrs	r3, r3, #5
 800392a:	f003 0207 	and.w	r2, r3, #7
 800392e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4422      	add	r2, r4
 8003936:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003938:	e106      	b.n	8003b48 <UART_SetConfig+0x4d8>
 800393a:	bf00      	nop
 800393c:	40011000 	.word	0x40011000
 8003940:	40011400 	.word	0x40011400
 8003944:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003948:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800394c:	2200      	movs	r2, #0
 800394e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003952:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003956:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800395a:	4642      	mov	r2, r8
 800395c:	464b      	mov	r3, r9
 800395e:	1891      	adds	r1, r2, r2
 8003960:	6239      	str	r1, [r7, #32]
 8003962:	415b      	adcs	r3, r3
 8003964:	627b      	str	r3, [r7, #36]	; 0x24
 8003966:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800396a:	4641      	mov	r1, r8
 800396c:	1854      	adds	r4, r2, r1
 800396e:	4649      	mov	r1, r9
 8003970:	eb43 0501 	adc.w	r5, r3, r1
 8003974:	f04f 0200 	mov.w	r2, #0
 8003978:	f04f 0300 	mov.w	r3, #0
 800397c:	00eb      	lsls	r3, r5, #3
 800397e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003982:	00e2      	lsls	r2, r4, #3
 8003984:	4614      	mov	r4, r2
 8003986:	461d      	mov	r5, r3
 8003988:	4643      	mov	r3, r8
 800398a:	18e3      	adds	r3, r4, r3
 800398c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003990:	464b      	mov	r3, r9
 8003992:	eb45 0303 	adc.w	r3, r5, r3
 8003996:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800399a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80039a6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80039aa:	f04f 0200 	mov.w	r2, #0
 80039ae:	f04f 0300 	mov.w	r3, #0
 80039b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80039b6:	4629      	mov	r1, r5
 80039b8:	008b      	lsls	r3, r1, #2
 80039ba:	4621      	mov	r1, r4
 80039bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039c0:	4621      	mov	r1, r4
 80039c2:	008a      	lsls	r2, r1, #2
 80039c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80039c8:	f7fc fc04 	bl	80001d4 <__aeabi_uldivmod>
 80039cc:	4602      	mov	r2, r0
 80039ce:	460b      	mov	r3, r1
 80039d0:	4b60      	ldr	r3, [pc, #384]	; (8003b54 <UART_SetConfig+0x4e4>)
 80039d2:	fba3 2302 	umull	r2, r3, r3, r2
 80039d6:	095b      	lsrs	r3, r3, #5
 80039d8:	011c      	lsls	r4, r3, #4
 80039da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039de:	2200      	movs	r2, #0
 80039e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80039e4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80039e8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80039ec:	4642      	mov	r2, r8
 80039ee:	464b      	mov	r3, r9
 80039f0:	1891      	adds	r1, r2, r2
 80039f2:	61b9      	str	r1, [r7, #24]
 80039f4:	415b      	adcs	r3, r3
 80039f6:	61fb      	str	r3, [r7, #28]
 80039f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039fc:	4641      	mov	r1, r8
 80039fe:	1851      	adds	r1, r2, r1
 8003a00:	6139      	str	r1, [r7, #16]
 8003a02:	4649      	mov	r1, r9
 8003a04:	414b      	adcs	r3, r1
 8003a06:	617b      	str	r3, [r7, #20]
 8003a08:	f04f 0200 	mov.w	r2, #0
 8003a0c:	f04f 0300 	mov.w	r3, #0
 8003a10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a14:	4659      	mov	r1, fp
 8003a16:	00cb      	lsls	r3, r1, #3
 8003a18:	4651      	mov	r1, sl
 8003a1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a1e:	4651      	mov	r1, sl
 8003a20:	00ca      	lsls	r2, r1, #3
 8003a22:	4610      	mov	r0, r2
 8003a24:	4619      	mov	r1, r3
 8003a26:	4603      	mov	r3, r0
 8003a28:	4642      	mov	r2, r8
 8003a2a:	189b      	adds	r3, r3, r2
 8003a2c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003a30:	464b      	mov	r3, r9
 8003a32:	460a      	mov	r2, r1
 8003a34:	eb42 0303 	adc.w	r3, r2, r3
 8003a38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	67bb      	str	r3, [r7, #120]	; 0x78
 8003a46:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003a48:	f04f 0200 	mov.w	r2, #0
 8003a4c:	f04f 0300 	mov.w	r3, #0
 8003a50:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003a54:	4649      	mov	r1, r9
 8003a56:	008b      	lsls	r3, r1, #2
 8003a58:	4641      	mov	r1, r8
 8003a5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a5e:	4641      	mov	r1, r8
 8003a60:	008a      	lsls	r2, r1, #2
 8003a62:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003a66:	f7fc fbb5 	bl	80001d4 <__aeabi_uldivmod>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	460b      	mov	r3, r1
 8003a6e:	4611      	mov	r1, r2
 8003a70:	4b38      	ldr	r3, [pc, #224]	; (8003b54 <UART_SetConfig+0x4e4>)
 8003a72:	fba3 2301 	umull	r2, r3, r3, r1
 8003a76:	095b      	lsrs	r3, r3, #5
 8003a78:	2264      	movs	r2, #100	; 0x64
 8003a7a:	fb02 f303 	mul.w	r3, r2, r3
 8003a7e:	1acb      	subs	r3, r1, r3
 8003a80:	011b      	lsls	r3, r3, #4
 8003a82:	3332      	adds	r3, #50	; 0x32
 8003a84:	4a33      	ldr	r2, [pc, #204]	; (8003b54 <UART_SetConfig+0x4e4>)
 8003a86:	fba2 2303 	umull	r2, r3, r2, r3
 8003a8a:	095b      	lsrs	r3, r3, #5
 8003a8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a90:	441c      	add	r4, r3
 8003a92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a96:	2200      	movs	r2, #0
 8003a98:	673b      	str	r3, [r7, #112]	; 0x70
 8003a9a:	677a      	str	r2, [r7, #116]	; 0x74
 8003a9c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003aa0:	4642      	mov	r2, r8
 8003aa2:	464b      	mov	r3, r9
 8003aa4:	1891      	adds	r1, r2, r2
 8003aa6:	60b9      	str	r1, [r7, #8]
 8003aa8:	415b      	adcs	r3, r3
 8003aaa:	60fb      	str	r3, [r7, #12]
 8003aac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ab0:	4641      	mov	r1, r8
 8003ab2:	1851      	adds	r1, r2, r1
 8003ab4:	6039      	str	r1, [r7, #0]
 8003ab6:	4649      	mov	r1, r9
 8003ab8:	414b      	adcs	r3, r1
 8003aba:	607b      	str	r3, [r7, #4]
 8003abc:	f04f 0200 	mov.w	r2, #0
 8003ac0:	f04f 0300 	mov.w	r3, #0
 8003ac4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003ac8:	4659      	mov	r1, fp
 8003aca:	00cb      	lsls	r3, r1, #3
 8003acc:	4651      	mov	r1, sl
 8003ace:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ad2:	4651      	mov	r1, sl
 8003ad4:	00ca      	lsls	r2, r1, #3
 8003ad6:	4610      	mov	r0, r2
 8003ad8:	4619      	mov	r1, r3
 8003ada:	4603      	mov	r3, r0
 8003adc:	4642      	mov	r2, r8
 8003ade:	189b      	adds	r3, r3, r2
 8003ae0:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ae2:	464b      	mov	r3, r9
 8003ae4:	460a      	mov	r2, r1
 8003ae6:	eb42 0303 	adc.w	r3, r2, r3
 8003aea:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	663b      	str	r3, [r7, #96]	; 0x60
 8003af6:	667a      	str	r2, [r7, #100]	; 0x64
 8003af8:	f04f 0200 	mov.w	r2, #0
 8003afc:	f04f 0300 	mov.w	r3, #0
 8003b00:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003b04:	4649      	mov	r1, r9
 8003b06:	008b      	lsls	r3, r1, #2
 8003b08:	4641      	mov	r1, r8
 8003b0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b0e:	4641      	mov	r1, r8
 8003b10:	008a      	lsls	r2, r1, #2
 8003b12:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003b16:	f7fc fb5d 	bl	80001d4 <__aeabi_uldivmod>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	460b      	mov	r3, r1
 8003b1e:	4b0d      	ldr	r3, [pc, #52]	; (8003b54 <UART_SetConfig+0x4e4>)
 8003b20:	fba3 1302 	umull	r1, r3, r3, r2
 8003b24:	095b      	lsrs	r3, r3, #5
 8003b26:	2164      	movs	r1, #100	; 0x64
 8003b28:	fb01 f303 	mul.w	r3, r1, r3
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	011b      	lsls	r3, r3, #4
 8003b30:	3332      	adds	r3, #50	; 0x32
 8003b32:	4a08      	ldr	r2, [pc, #32]	; (8003b54 <UART_SetConfig+0x4e4>)
 8003b34:	fba2 2303 	umull	r2, r3, r2, r3
 8003b38:	095b      	lsrs	r3, r3, #5
 8003b3a:	f003 020f 	and.w	r2, r3, #15
 8003b3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4422      	add	r2, r4
 8003b46:	609a      	str	r2, [r3, #8]
}
 8003b48:	bf00      	nop
 8003b4a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b54:	51eb851f 	.word	0x51eb851f

08003b58 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	7c1b      	ldrb	r3, [r3, #16]
 8003b66:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003b6e:	461a      	mov	r2, r3
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	fb02 f303 	mul.w	r3, r2, r3
 8003b76:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	00db      	lsls	r3, r3, #3
 8003b7c:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b82:	68fa      	ldr	r2, [r7, #12]
 8003b84:	2100      	movs	r1, #0
 8003b86:	4618      	mov	r0, r3
 8003b88:	f001 ff17 	bl	80059ba <memset>
}
 8003b8c:	bf00      	nop
 8003b8e:	3710      	adds	r7, #16
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b086      	sub	sp, #24
 8003b98:	af02      	add	r7, sp, #8
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	460b      	mov	r3, r1
 8003b9e:	70fb      	strb	r3, [r7, #3]
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	7c1b      	ldrb	r3, [r3, #16]
 8003baa:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8003bac:	78fb      	ldrb	r3, [r7, #3]
 8003bae:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bb4:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8003bb6:	7bfb      	ldrb	r3, [r7, #15]
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	89ba      	ldrh	r2, [r7, #12]
 8003bbc:	fb12 f303 	smulbb	r3, r2, r3
 8003bc0:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8003bc2:	89bb      	ldrh	r3, [r7, #12]
 8003bc4:	00db      	lsls	r3, r3, #3
 8003bc6:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8003bc8:	89bb      	ldrh	r3, [r7, #12]
 8003bca:	68ba      	ldr	r2, [r7, #8]
 8003bcc:	4413      	add	r3, r2
 8003bce:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8003bd0:	7bf9      	ldrb	r1, [r7, #15]
 8003bd2:	78ba      	ldrb	r2, [r7, #2]
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	9300      	str	r3, [sp, #0]
 8003bd8:	460b      	mov	r3, r1
 8003bda:	2100      	movs	r1, #0
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f001 fe1e 	bl	800581e <u8x8_DrawTile>
}
 8003be2:	bf00      	nop
 8003be4:	3710      	adds	r7, #16
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}

08003bea <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8003bea:	b580      	push	{r7, lr}
 8003bec:	b084      	sub	sp, #16
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003bfc:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003c04:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	7c5b      	ldrb	r3, [r3, #17]
 8003c0c:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8003c0e:	7bba      	ldrb	r2, [r7, #14]
 8003c10:	7bfb      	ldrb	r3, [r7, #15]
 8003c12:	4619      	mov	r1, r3
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f7ff ffbd 	bl	8003b94 <u8g2_send_tile_row>
    src_row++;
 8003c1a:	7bfb      	ldrb	r3, [r7, #15]
 8003c1c:	3301      	adds	r3, #1
 8003c1e:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8003c20:	7bbb      	ldrb	r3, [r7, #14]
 8003c22:	3301      	adds	r3, #1
 8003c24:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8003c26:	7bfa      	ldrb	r2, [r7, #15]
 8003c28:	7b7b      	ldrb	r3, [r7, #13]
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d203      	bcs.n	8003c36 <u8g2_send_buffer+0x4c>
 8003c2e:	7bba      	ldrb	r2, [r7, #14]
 8003c30:	7b3b      	ldrb	r3, [r7, #12]
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d3eb      	bcc.n	8003c0e <u8g2_send_buffer+0x24>
}
 8003c36:	bf00      	nop
 8003c38:	3710      	adds	r7, #16
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}

08003c3e <u8g2_SetBufferCurrTileRow>:
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
}

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 8003c3e:	b580      	push	{r7, lr}
 8003c40:	b082      	sub	sp, #8
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	6078      	str	r0, [r7, #4]
 8003c46:	460b      	mov	r3, r1
 8003c48:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	78fa      	ldrb	r2, [r7, #3]
 8003c4e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  u8g2->cb->update_dimension(u8g2);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	4798      	blx	r3
}
 8003c66:	bf00      	nop
 8003c68:	3708      	adds	r7, #8
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}

08003c6e <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 8003c6e:	b580      	push	{r7, lr}
 8003c70:	b082      	sub	sp, #8
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d002      	beq.n	8003c86 <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f7ff ff69 	bl	8003b58 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 8003c86:	2100      	movs	r1, #0
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f7ff ffd8 	bl	8003c3e <u8g2_SetBufferCurrTileRow>
}
 8003c8e:	bf00      	nop
 8003c90:	3708      	adds	r7, #8
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}

08003c96 <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 8003c96:	b580      	push	{r7, lr}
 8003c98:	b084      	sub	sp, #16
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f7ff ffa3 	bl	8003bea <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003caa:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8003cb2:	7bfb      	ldrb	r3, [r7, #15]
 8003cb4:	4413      	add	r3, r2
 8003cb6:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	7c5b      	ldrb	r3, [r3, #17]
 8003cbe:	7bfa      	ldrb	r2, [r7, #15]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d304      	bcc.n	8003cce <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f001 fdfb 	bl	80058c0 <u8x8_RefreshDisplay>
    return 0;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	e00d      	b.n	8003cea <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d002      	beq.n	8003cde <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f7ff ff3d 	bl	8003b58 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 8003cde:	7bfb      	ldrb	r3, [r7, #15]
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f7ff ffab 	bl	8003c3e <u8g2_SetBufferCurrTileRow>
  return 1;
 8003ce8:	2301      	movs	r3, #1
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3710      	adds	r7, #16
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}

08003cf2 <u8g2_draw_circle_section>:
/* Circle */

static void u8g2_draw_circle_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option) U8G2_NOINLINE;

static void u8g2_draw_circle_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option)
{
 8003cf2:	b580      	push	{r7, lr}
 8003cf4:	b084      	sub	sp, #16
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	60f8      	str	r0, [r7, #12]
 8003cfa:	4608      	mov	r0, r1
 8003cfc:	4611      	mov	r1, r2
 8003cfe:	461a      	mov	r2, r3
 8003d00:	4603      	mov	r3, r0
 8003d02:	817b      	strh	r3, [r7, #10]
 8003d04:	460b      	mov	r3, r1
 8003d06:	813b      	strh	r3, [r7, #8]
 8003d08:	4613      	mov	r3, r2
 8003d0a:	80fb      	strh	r3, [r7, #6]
    /* upper right */
    if ( option & U8G2_DRAW_UPPER_RIGHT )
 8003d0c:	7f3b      	ldrb	r3, [r7, #28]
 8003d0e:	f003 0301 	and.w	r3, r3, #1
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d017      	beq.n	8003d46 <u8g2_draw_circle_section+0x54>
    {
      u8g2_DrawPixel(u8g2, x0 + x, y0 - y);
 8003d16:	88fa      	ldrh	r2, [r7, #6]
 8003d18:	897b      	ldrh	r3, [r7, #10]
 8003d1a:	4413      	add	r3, r2
 8003d1c:	b299      	uxth	r1, r3
 8003d1e:	8b3a      	ldrh	r2, [r7, #24]
 8003d20:	893b      	ldrh	r3, [r7, #8]
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	461a      	mov	r2, r3
 8003d28:	68f8      	ldr	r0, [r7, #12]
 8003d2a:	f000 ffd7 	bl	8004cdc <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 + y, y0 - x);
 8003d2e:	88fa      	ldrh	r2, [r7, #6]
 8003d30:	893b      	ldrh	r3, [r7, #8]
 8003d32:	4413      	add	r3, r2
 8003d34:	b299      	uxth	r1, r3
 8003d36:	8b3a      	ldrh	r2, [r7, #24]
 8003d38:	897b      	ldrh	r3, [r7, #10]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	461a      	mov	r2, r3
 8003d40:	68f8      	ldr	r0, [r7, #12]
 8003d42:	f000 ffcb 	bl	8004cdc <u8g2_DrawPixel>
    }
    
    /* upper left */
    if ( option & U8G2_DRAW_UPPER_LEFT )
 8003d46:	7f3b      	ldrb	r3, [r7, #28]
 8003d48:	f003 0302 	and.w	r3, r3, #2
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d017      	beq.n	8003d80 <u8g2_draw_circle_section+0x8e>
    {
      u8g2_DrawPixel(u8g2, x0 - x, y0 - y);
 8003d50:	88fa      	ldrh	r2, [r7, #6]
 8003d52:	897b      	ldrh	r3, [r7, #10]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	b299      	uxth	r1, r3
 8003d58:	8b3a      	ldrh	r2, [r7, #24]
 8003d5a:	893b      	ldrh	r3, [r7, #8]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	461a      	mov	r2, r3
 8003d62:	68f8      	ldr	r0, [r7, #12]
 8003d64:	f000 ffba 	bl	8004cdc <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 - y, y0 - x);
 8003d68:	88fa      	ldrh	r2, [r7, #6]
 8003d6a:	893b      	ldrh	r3, [r7, #8]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	b299      	uxth	r1, r3
 8003d70:	8b3a      	ldrh	r2, [r7, #24]
 8003d72:	897b      	ldrh	r3, [r7, #10]
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	461a      	mov	r2, r3
 8003d7a:	68f8      	ldr	r0, [r7, #12]
 8003d7c:	f000 ffae 	bl	8004cdc <u8g2_DrawPixel>
    }
    
    /* lower right */
    if ( option & U8G2_DRAW_LOWER_RIGHT )
 8003d80:	7f3b      	ldrb	r3, [r7, #28]
 8003d82:	f003 0308 	and.w	r3, r3, #8
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d017      	beq.n	8003dba <u8g2_draw_circle_section+0xc8>
    {
      u8g2_DrawPixel(u8g2, x0 + x, y0 + y);
 8003d8a:	88fa      	ldrh	r2, [r7, #6]
 8003d8c:	897b      	ldrh	r3, [r7, #10]
 8003d8e:	4413      	add	r3, r2
 8003d90:	b299      	uxth	r1, r3
 8003d92:	8b3a      	ldrh	r2, [r7, #24]
 8003d94:	893b      	ldrh	r3, [r7, #8]
 8003d96:	4413      	add	r3, r2
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	68f8      	ldr	r0, [r7, #12]
 8003d9e:	f000 ff9d 	bl	8004cdc <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 + y, y0 + x);
 8003da2:	88fa      	ldrh	r2, [r7, #6]
 8003da4:	893b      	ldrh	r3, [r7, #8]
 8003da6:	4413      	add	r3, r2
 8003da8:	b299      	uxth	r1, r3
 8003daa:	8b3a      	ldrh	r2, [r7, #24]
 8003dac:	897b      	ldrh	r3, [r7, #10]
 8003dae:	4413      	add	r3, r2
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	461a      	mov	r2, r3
 8003db4:	68f8      	ldr	r0, [r7, #12]
 8003db6:	f000 ff91 	bl	8004cdc <u8g2_DrawPixel>
    }
    
    /* lower left */
    if ( option & U8G2_DRAW_LOWER_LEFT )
 8003dba:	7f3b      	ldrb	r3, [r7, #28]
 8003dbc:	f003 0304 	and.w	r3, r3, #4
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d017      	beq.n	8003df4 <u8g2_draw_circle_section+0x102>
    {
      u8g2_DrawPixel(u8g2, x0 - x, y0 + y);
 8003dc4:	88fa      	ldrh	r2, [r7, #6]
 8003dc6:	897b      	ldrh	r3, [r7, #10]
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	b299      	uxth	r1, r3
 8003dcc:	8b3a      	ldrh	r2, [r7, #24]
 8003dce:	893b      	ldrh	r3, [r7, #8]
 8003dd0:	4413      	add	r3, r2
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	68f8      	ldr	r0, [r7, #12]
 8003dd8:	f000 ff80 	bl	8004cdc <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 - y, y0 + x);
 8003ddc:	88fa      	ldrh	r2, [r7, #6]
 8003dde:	893b      	ldrh	r3, [r7, #8]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	b299      	uxth	r1, r3
 8003de4:	8b3a      	ldrh	r2, [r7, #24]
 8003de6:	897b      	ldrh	r3, [r7, #10]
 8003de8:	4413      	add	r3, r2
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	461a      	mov	r2, r3
 8003dee:	68f8      	ldr	r0, [r7, #12]
 8003df0:	f000 ff74 	bl	8004cdc <u8g2_DrawPixel>
    }
}
 8003df4:	bf00      	nop
 8003df6:	3710      	adds	r7, #16
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <u8g2_draw_circle>:

static void u8g2_draw_circle(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b08a      	sub	sp, #40	; 0x28
 8003e00:	af02      	add	r7, sp, #8
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	4608      	mov	r0, r1
 8003e06:	4611      	mov	r1, r2
 8003e08:	461a      	mov	r2, r3
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	817b      	strh	r3, [r7, #10]
 8003e0e:	460b      	mov	r3, r1
 8003e10:	813b      	strh	r3, [r7, #8]
 8003e12:	4613      	mov	r3, r2
 8003e14:	80fb      	strh	r3, [r7, #6]
    u8g2_int_t ddF_x;
    u8g2_int_t ddF_y;
    u8g2_uint_t x;
    u8g2_uint_t y;

    f = 1;
 8003e16:	2301      	movs	r3, #1
 8003e18:	83fb      	strh	r3, [r7, #30]
    f -= rad;
 8003e1a:	8bfa      	ldrh	r2, [r7, #30]
 8003e1c:	88fb      	ldrh	r3, [r7, #6]
 8003e1e:	1ad3      	subs	r3, r2, r3
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	83fb      	strh	r3, [r7, #30]
    ddF_x = 1;
 8003e24:	2301      	movs	r3, #1
 8003e26:	83bb      	strh	r3, [r7, #28]
    ddF_y = 0;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	837b      	strh	r3, [r7, #26]
    ddF_y -= rad;
 8003e2c:	8b7a      	ldrh	r2, [r7, #26]
 8003e2e:	88fb      	ldrh	r3, [r7, #6]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	837b      	strh	r3, [r7, #26]
    ddF_y *= 2;
 8003e36:	8b7b      	ldrh	r3, [r7, #26]
 8003e38:	005b      	lsls	r3, r3, #1
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	837b      	strh	r3, [r7, #26]
    x = 0;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	833b      	strh	r3, [r7, #24]
    y = rad;
 8003e42:	88fb      	ldrh	r3, [r7, #6]
 8003e44:	82fb      	strh	r3, [r7, #22]

    u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);
 8003e46:	8978      	ldrh	r0, [r7, #10]
 8003e48:	8afa      	ldrh	r2, [r7, #22]
 8003e4a:	8b39      	ldrh	r1, [r7, #24]
 8003e4c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003e50:	9301      	str	r3, [sp, #4]
 8003e52:	893b      	ldrh	r3, [r7, #8]
 8003e54:	9300      	str	r3, [sp, #0]
 8003e56:	4603      	mov	r3, r0
 8003e58:	68f8      	ldr	r0, [r7, #12]
 8003e5a:	f7ff ff4a 	bl	8003cf2 <u8g2_draw_circle_section>
    
    while ( x < y )
 8003e5e:	e027      	b.n	8003eb0 <u8g2_draw_circle+0xb4>
    {
      if (f >= 0) 
 8003e60:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	db0b      	blt.n	8003e80 <u8g2_draw_circle+0x84>
      {
        y--;
 8003e68:	8afb      	ldrh	r3, [r7, #22]
 8003e6a:	3b01      	subs	r3, #1
 8003e6c:	82fb      	strh	r3, [r7, #22]
        ddF_y += 2;
 8003e6e:	8b7b      	ldrh	r3, [r7, #26]
 8003e70:	3302      	adds	r3, #2
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	837b      	strh	r3, [r7, #26]
        f += ddF_y;
 8003e76:	8bfa      	ldrh	r2, [r7, #30]
 8003e78:	8b7b      	ldrh	r3, [r7, #26]
 8003e7a:	4413      	add	r3, r2
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	83fb      	strh	r3, [r7, #30]
      }
      x++;
 8003e80:	8b3b      	ldrh	r3, [r7, #24]
 8003e82:	3301      	adds	r3, #1
 8003e84:	833b      	strh	r3, [r7, #24]
      ddF_x += 2;
 8003e86:	8bbb      	ldrh	r3, [r7, #28]
 8003e88:	3302      	adds	r3, #2
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	83bb      	strh	r3, [r7, #28]
      f += ddF_x;
 8003e8e:	8bfa      	ldrh	r2, [r7, #30]
 8003e90:	8bbb      	ldrh	r3, [r7, #28]
 8003e92:	4413      	add	r3, r2
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	83fb      	strh	r3, [r7, #30]

      u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);    
 8003e98:	8978      	ldrh	r0, [r7, #10]
 8003e9a:	8afa      	ldrh	r2, [r7, #22]
 8003e9c:	8b39      	ldrh	r1, [r7, #24]
 8003e9e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003ea2:	9301      	str	r3, [sp, #4]
 8003ea4:	893b      	ldrh	r3, [r7, #8]
 8003ea6:	9300      	str	r3, [sp, #0]
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	68f8      	ldr	r0, [r7, #12]
 8003eac:	f7ff ff21 	bl	8003cf2 <u8g2_draw_circle_section>
    while ( x < y )
 8003eb0:	8b3a      	ldrh	r2, [r7, #24]
 8003eb2:	8afb      	ldrh	r3, [r7, #22]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d3d3      	bcc.n	8003e60 <u8g2_draw_circle+0x64>
    }
}
 8003eb8:	bf00      	nop
 8003eba:	bf00      	nop
 8003ebc:	3720      	adds	r7, #32
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}

08003ec2 <u8g2_DrawCircle>:

void u8g2_DrawCircle(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
{
 8003ec2:	b590      	push	{r4, r7, lr}
 8003ec4:	b087      	sub	sp, #28
 8003ec6:	af02      	add	r7, sp, #8
 8003ec8:	60f8      	str	r0, [r7, #12]
 8003eca:	4608      	mov	r0, r1
 8003ecc:	4611      	mov	r1, r2
 8003ece:	461a      	mov	r2, r3
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	817b      	strh	r3, [r7, #10]
 8003ed4:	460b      	mov	r3, r1
 8003ed6:	813b      	strh	r3, [r7, #8]
 8003ed8:	4613      	mov	r3, r2
 8003eda:	80fb      	strh	r3, [r7, #6]
  /* check for bounding box */
#ifdef U8G2_WITH_INTERSECTION
  {
    if ( u8g2_IsIntersection(u8g2, x0-rad, y0-rad, x0+rad+1, y0+rad+1) == 0 ) 
 8003edc:	897a      	ldrh	r2, [r7, #10]
 8003ede:	88fb      	ldrh	r3, [r7, #6]
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	b299      	uxth	r1, r3
 8003ee4:	893a      	ldrh	r2, [r7, #8]
 8003ee6:	88fb      	ldrh	r3, [r7, #6]
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	b298      	uxth	r0, r3
 8003eec:	897a      	ldrh	r2, [r7, #10]
 8003eee:	88fb      	ldrh	r3, [r7, #6]
 8003ef0:	4413      	add	r3, r2
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	3301      	adds	r3, #1
 8003ef6:	b29c      	uxth	r4, r3
 8003ef8:	893a      	ldrh	r2, [r7, #8]
 8003efa:	88fb      	ldrh	r3, [r7, #6]
 8003efc:	4413      	add	r3, r2
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	3301      	adds	r3, #1
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	9300      	str	r3, [sp, #0]
 8003f06:	4623      	mov	r3, r4
 8003f08:	4602      	mov	r2, r0
 8003f0a:	68f8      	ldr	r0, [r7, #12]
 8003f0c:	f000 ff4c 	bl	8004da8 <u8g2_IsIntersection>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d00a      	beq.n	8003f2c <u8g2_DrawCircle+0x6a>
  }
#endif /* U8G2_WITH_INTERSECTION */
  
  
  /* draw circle */
  u8g2_draw_circle(u8g2, x0, y0, rad, option);
 8003f16:	88f8      	ldrh	r0, [r7, #6]
 8003f18:	893a      	ldrh	r2, [r7, #8]
 8003f1a:	8979      	ldrh	r1, [r7, #10]
 8003f1c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003f20:	9300      	str	r3, [sp, #0]
 8003f22:	4603      	mov	r3, r0
 8003f24:	68f8      	ldr	r0, [r7, #12]
 8003f26:	f7ff ff69 	bl	8003dfc <u8g2_draw_circle>
 8003f2a:	e000      	b.n	8003f2e <u8g2_DrawCircle+0x6c>
      return;
 8003f2c:	bf00      	nop
}
 8003f2e:	3714      	adds	r7, #20
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd90      	pop	{r4, r7, pc}

08003f34 <u8g2_m_16_16_1>:
  *page_cnt = 16;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_16_1(uint8_t *page_cnt)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 1;
  return 0;
  #else
  static uint8_t buf[128];
  *page_cnt = 1;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	701a      	strb	r2, [r3, #0]
  return buf;
 8003f42:	4b03      	ldr	r3, [pc, #12]	; (8003f50 <u8g2_m_16_16_1+0x1c>)
  #endif
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	370c      	adds	r7, #12
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr
 8003f50:	20000228 	.word	0x20000228

08003f54 <u8g2_Setup_sh1107_pimoroni_128x128_1>:
  u8g2_SetupDisplay(u8g2, u8x8_d_sh1107_128x128, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
  buf = u8g2_m_16_16_1(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
void u8g2_Setup_sh1107_pimoroni_128x128_1(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b088      	sub	sp, #32
 8003f58:	af02      	add	r7, sp, #8
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	60b9      	str	r1, [r7, #8]
 8003f5e:	607a      	str	r2, [r7, #4]
 8003f60:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_sh1107_pimoroni_128x128, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	9300      	str	r3, [sp, #0]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	4a0b      	ldr	r2, [pc, #44]	; (8003f98 <u8g2_Setup_sh1107_pimoroni_128x128_1+0x44>)
 8003f6a:	490c      	ldr	r1, [pc, #48]	; (8003f9c <u8g2_Setup_sh1107_pimoroni_128x128_1+0x48>)
 8003f6c:	68f8      	ldr	r0, [r7, #12]
 8003f6e:	f001 fd07 	bl	8005980 <u8x8_Setup>
  buf = u8g2_m_16_16_1(&tile_buf_height);
 8003f72:	f107 0313 	add.w	r3, r7, #19
 8003f76:	4618      	mov	r0, r3
 8003f78:	f7ff ffdc 	bl	8003f34 <u8g2_m_16_16_1>
 8003f7c:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8003f7e:	7cfa      	ldrb	r2, [r7, #19]
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	9300      	str	r3, [sp, #0]
 8003f84:	4b06      	ldr	r3, [pc, #24]	; (8003fa0 <u8g2_Setup_sh1107_pimoroni_128x128_1+0x4c>)
 8003f86:	6979      	ldr	r1, [r7, #20]
 8003f88:	68f8      	ldr	r0, [r7, #12]
 8003f8a:	f001 f891 	bl	80050b0 <u8g2_SetupBuffer>
}
 8003f8e:	bf00      	nop
 8003f90:	3718      	adds	r7, #24
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	08005549 	.word	0x08005549
 8003f9c:	08005719 	.word	0x08005719
 8003fa0:	08004f33 	.word	0x08004f33

08003fa4 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	460b      	mov	r3, r1
 8003fae:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8003fb0:	78fb      	ldrb	r3, [r7, #3]
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	4413      	add	r3, r2
 8003fb6:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	781b      	ldrb	r3, [r3, #0]
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	370c      	adds	r7, #12
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr

08003fc8 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b085      	sub	sp, #20
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	460b      	mov	r3, r1
 8003fd2:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 8003fd4:	78fb      	ldrb	r3, [r7, #3]
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	4413      	add	r3, r2
 8003fda:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	781b      	ldrb	r3, [r3, #0]
 8003fe0:	81fb      	strh	r3, [r7, #14]
    font++;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	3301      	adds	r3, #1
 8003fe6:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 8003fe8:	89fb      	ldrh	r3, [r7, #14]
 8003fea:	021b      	lsls	r3, r3, #8
 8003fec:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	b29a      	uxth	r2, r3
 8003ff4:	89fb      	ldrh	r3, [r7, #14]
 8003ff6:	4413      	add	r3, r2
 8003ff8:	81fb      	strh	r3, [r7, #14]
    return pos;
 8003ffa:	89fb      	ldrh	r3, [r7, #14]
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3714      	adds	r7, #20
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr

08004008 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b082      	sub	sp, #8
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 8004012:	2100      	movs	r1, #0
 8004014:	6838      	ldr	r0, [r7, #0]
 8004016:	f7ff ffc5 	bl	8003fa4 <u8g2_font_get_byte>
 800401a:	4603      	mov	r3, r0
 800401c:	461a      	mov	r2, r3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 8004022:	2101      	movs	r1, #1
 8004024:	6838      	ldr	r0, [r7, #0]
 8004026:	f7ff ffbd 	bl	8003fa4 <u8g2_font_get_byte>
 800402a:	4603      	mov	r3, r0
 800402c:	461a      	mov	r2, r3
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 8004032:	2102      	movs	r1, #2
 8004034:	6838      	ldr	r0, [r7, #0]
 8004036:	f7ff ffb5 	bl	8003fa4 <u8g2_font_get_byte>
 800403a:	4603      	mov	r3, r0
 800403c:	461a      	mov	r2, r3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 8004042:	2103      	movs	r1, #3
 8004044:	6838      	ldr	r0, [r7, #0]
 8004046:	f7ff ffad 	bl	8003fa4 <u8g2_font_get_byte>
 800404a:	4603      	mov	r3, r0
 800404c:	461a      	mov	r2, r3
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 8004052:	2104      	movs	r1, #4
 8004054:	6838      	ldr	r0, [r7, #0]
 8004056:	f7ff ffa5 	bl	8003fa4 <u8g2_font_get_byte>
 800405a:	4603      	mov	r3, r0
 800405c:	461a      	mov	r2, r3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 8004062:	2105      	movs	r1, #5
 8004064:	6838      	ldr	r0, [r7, #0]
 8004066:	f7ff ff9d 	bl	8003fa4 <u8g2_font_get_byte>
 800406a:	4603      	mov	r3, r0
 800406c:	461a      	mov	r2, r3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 8004072:	2106      	movs	r1, #6
 8004074:	6838      	ldr	r0, [r7, #0]
 8004076:	f7ff ff95 	bl	8003fa4 <u8g2_font_get_byte>
 800407a:	4603      	mov	r3, r0
 800407c:	461a      	mov	r2, r3
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 8004082:	2107      	movs	r1, #7
 8004084:	6838      	ldr	r0, [r7, #0]
 8004086:	f7ff ff8d 	bl	8003fa4 <u8g2_font_get_byte>
 800408a:	4603      	mov	r3, r0
 800408c:	461a      	mov	r2, r3
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 8004092:	2108      	movs	r1, #8
 8004094:	6838      	ldr	r0, [r7, #0]
 8004096:	f7ff ff85 	bl	8003fa4 <u8g2_font_get_byte>
 800409a:	4603      	mov	r3, r0
 800409c:	461a      	mov	r2, r3
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 80040a2:	2109      	movs	r1, #9
 80040a4:	6838      	ldr	r0, [r7, #0]
 80040a6:	f7ff ff7d 	bl	8003fa4 <u8g2_font_get_byte>
 80040aa:	4603      	mov	r3, r0
 80040ac:	b25a      	sxtb	r2, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 80040b2:	210a      	movs	r1, #10
 80040b4:	6838      	ldr	r0, [r7, #0]
 80040b6:	f7ff ff75 	bl	8003fa4 <u8g2_font_get_byte>
 80040ba:	4603      	mov	r3, r0
 80040bc:	b25a      	sxtb	r2, r3
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 80040c2:	210b      	movs	r1, #11
 80040c4:	6838      	ldr	r0, [r7, #0]
 80040c6:	f7ff ff6d 	bl	8003fa4 <u8g2_font_get_byte>
 80040ca:	4603      	mov	r3, r0
 80040cc:	b25a      	sxtb	r2, r3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 80040d2:	210c      	movs	r1, #12
 80040d4:	6838      	ldr	r0, [r7, #0]
 80040d6:	f7ff ff65 	bl	8003fa4 <u8g2_font_get_byte>
 80040da:	4603      	mov	r3, r0
 80040dc:	b25a      	sxtb	r2, r3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 80040e2:	210d      	movs	r1, #13
 80040e4:	6838      	ldr	r0, [r7, #0]
 80040e6:	f7ff ff5d 	bl	8003fa4 <u8g2_font_get_byte>
 80040ea:	4603      	mov	r3, r0
 80040ec:	b25a      	sxtb	r2, r3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 80040f2:	210e      	movs	r1, #14
 80040f4:	6838      	ldr	r0, [r7, #0]
 80040f6:	f7ff ff55 	bl	8003fa4 <u8g2_font_get_byte>
 80040fa:	4603      	mov	r3, r0
 80040fc:	b25a      	sxtb	r2, r3
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 8004102:	210f      	movs	r1, #15
 8004104:	6838      	ldr	r0, [r7, #0]
 8004106:	f7ff ff4d 	bl	8003fa4 <u8g2_font_get_byte>
 800410a:	4603      	mov	r3, r0
 800410c:	b25a      	sxtb	r2, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 8004112:	2110      	movs	r1, #16
 8004114:	6838      	ldr	r0, [r7, #0]
 8004116:	f7ff ff45 	bl	8003fa4 <u8g2_font_get_byte>
 800411a:	4603      	mov	r3, r0
 800411c:	b25a      	sxtb	r2, r3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8004122:	2111      	movs	r1, #17
 8004124:	6838      	ldr	r0, [r7, #0]
 8004126:	f7ff ff4f 	bl	8003fc8 <u8g2_font_get_word>
 800412a:	4603      	mov	r3, r0
 800412c:	461a      	mov	r2, r3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 8004132:	2113      	movs	r1, #19
 8004134:	6838      	ldr	r0, [r7, #0]
 8004136:	f7ff ff47 	bl	8003fc8 <u8g2_font_get_word>
 800413a:	4603      	mov	r3, r0
 800413c:	461a      	mov	r2, r3
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 8004142:	2115      	movs	r1, #21
 8004144:	6838      	ldr	r0, [r7, #0]
 8004146:	f7ff ff3f 	bl	8003fc8 <u8g2_font_get_word>
 800414a:	4603      	mov	r3, r0
 800414c:	461a      	mov	r2, r3
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	82da      	strh	r2, [r3, #22]
#endif
}
 8004152:	bf00      	nop
 8004154:	3708      	adds	r7, #8
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}

0800415a <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 800415a:	b480      	push	{r7}
 800415c:	b085      	sub	sp, #20
 800415e:	af00      	add	r7, sp, #0
 8004160:	6078      	str	r0, [r7, #4]
 8004162:	460b      	mov	r3, r1
 8004164:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	7b1b      	ldrb	r3, [r3, #12]
 800416a:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 8004174:	7bfa      	ldrb	r2, [r7, #15]
 8004176:	7b7b      	ldrb	r3, [r7, #13]
 8004178:	fa42 f303 	asr.w	r3, r2, r3
 800417c:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 800417e:	7b7b      	ldrb	r3, [r7, #13]
 8004180:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 8004182:	7bba      	ldrb	r2, [r7, #14]
 8004184:	78fb      	ldrb	r3, [r7, #3]
 8004186:	4413      	add	r3, r2
 8004188:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 800418a:	7bbb      	ldrb	r3, [r7, #14]
 800418c:	2b07      	cmp	r3, #7
 800418e:	d91a      	bls.n	80041c6 <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 8004190:	2308      	movs	r3, #8
 8004192:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 8004194:	7b3a      	ldrb	r2, [r7, #12]
 8004196:	7b7b      	ldrb	r3, [r7, #13]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	1c5a      	adds	r2, r3, #1
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	461a      	mov	r2, r3
 80041ae:	7b3b      	ldrb	r3, [r7, #12]
 80041b0:	fa02 f303 	lsl.w	r3, r2, r3
 80041b4:	b25a      	sxtb	r2, r3
 80041b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	b25b      	sxtb	r3, r3
 80041be:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 80041c0:	7bbb      	ldrb	r3, [r7, #14]
 80041c2:	3b08      	subs	r3, #8
 80041c4:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 80041c6:	78fb      	ldrb	r3, [r7, #3]
 80041c8:	f04f 32ff 	mov.w	r2, #4294967295
 80041cc:	fa02 f303 	lsl.w	r3, r2, r3
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	43db      	mvns	r3, r3
 80041d4:	b2da      	uxtb	r2, r3
 80041d6:	7bfb      	ldrb	r3, [r7, #15]
 80041d8:	4013      	ands	r3, r2
 80041da:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	7bba      	ldrb	r2, [r7, #14]
 80041e0:	731a      	strb	r2, [r3, #12]
  return val;
 80041e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3714      	adds	r7, #20
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr

080041f0 <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	460b      	mov	r3, r1
 80041fa:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 80041fc:	78fb      	ldrb	r3, [r7, #3]
 80041fe:	4619      	mov	r1, r3
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f7ff ffaa 	bl	800415a <u8g2_font_decode_get_unsigned_bits>
 8004206:	4603      	mov	r3, r0
 8004208:	73fb      	strb	r3, [r7, #15]
  d = 1;
 800420a:	2301      	movs	r3, #1
 800420c:	73bb      	strb	r3, [r7, #14]
  cnt--;
 800420e:	78fb      	ldrb	r3, [r7, #3]
 8004210:	3b01      	subs	r3, #1
 8004212:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 8004214:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8004218:	78fb      	ldrb	r3, [r7, #3]
 800421a:	fa02 f303 	lsl.w	r3, r2, r3
 800421e:	73bb      	strb	r3, [r7, #14]
  v -= d;
 8004220:	7bfa      	ldrb	r2, [r7, #15]
 8004222:	7bbb      	ldrb	r3, [r7, #14]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	b2db      	uxtb	r3, r3
 8004228:	73fb      	strb	r3, [r7, #15]
  return v;
 800422a:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 800422e:	4618      	mov	r0, r3
 8004230:	3710      	adds	r7, #16
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}

08004236 <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 8004236:	b490      	push	{r4, r7}
 8004238:	b082      	sub	sp, #8
 800423a:	af00      	add	r7, sp, #0
 800423c:	4604      	mov	r4, r0
 800423e:	4608      	mov	r0, r1
 8004240:	4611      	mov	r1, r2
 8004242:	461a      	mov	r2, r3
 8004244:	4623      	mov	r3, r4
 8004246:	80fb      	strh	r3, [r7, #6]
 8004248:	4603      	mov	r3, r0
 800424a:	717b      	strb	r3, [r7, #5]
 800424c:	460b      	mov	r3, r1
 800424e:	713b      	strb	r3, [r7, #4]
 8004250:	4613      	mov	r3, r2
 8004252:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 8004254:	78fb      	ldrb	r3, [r7, #3]
 8004256:	2b02      	cmp	r3, #2
 8004258:	d014      	beq.n	8004284 <u8g2_add_vector_y+0x4e>
 800425a:	2b02      	cmp	r3, #2
 800425c:	dc19      	bgt.n	8004292 <u8g2_add_vector_y+0x5c>
 800425e:	2b00      	cmp	r3, #0
 8004260:	d002      	beq.n	8004268 <u8g2_add_vector_y+0x32>
 8004262:	2b01      	cmp	r3, #1
 8004264:	d007      	beq.n	8004276 <u8g2_add_vector_y+0x40>
 8004266:	e014      	b.n	8004292 <u8g2_add_vector_y+0x5c>
  {
    case 0:
      dy += y;
 8004268:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800426c:	b29a      	uxth	r2, r3
 800426e:	88fb      	ldrh	r3, [r7, #6]
 8004270:	4413      	add	r3, r2
 8004272:	80fb      	strh	r3, [r7, #6]
      break;
 8004274:	e014      	b.n	80042a0 <u8g2_add_vector_y+0x6a>
    case 1:
      dy += x;
 8004276:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800427a:	b29a      	uxth	r2, r3
 800427c:	88fb      	ldrh	r3, [r7, #6]
 800427e:	4413      	add	r3, r2
 8004280:	80fb      	strh	r3, [r7, #6]
      break;
 8004282:	e00d      	b.n	80042a0 <u8g2_add_vector_y+0x6a>
    case 2:
      dy -= y;
 8004284:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8004288:	b29b      	uxth	r3, r3
 800428a:	88fa      	ldrh	r2, [r7, #6]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	80fb      	strh	r3, [r7, #6]
      break;
 8004290:	e006      	b.n	80042a0 <u8g2_add_vector_y+0x6a>
    default:
      dy -= x;
 8004292:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8004296:	b29b      	uxth	r3, r3
 8004298:	88fa      	ldrh	r2, [r7, #6]
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	80fb      	strh	r3, [r7, #6]
      break;      
 800429e:	bf00      	nop
  }
  return dy;
 80042a0:	88fb      	ldrh	r3, [r7, #6]
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3708      	adds	r7, #8
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bc90      	pop	{r4, r7}
 80042aa:	4770      	bx	lr

080042ac <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 80042ac:	b490      	push	{r4, r7}
 80042ae:	b082      	sub	sp, #8
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	4604      	mov	r4, r0
 80042b4:	4608      	mov	r0, r1
 80042b6:	4611      	mov	r1, r2
 80042b8:	461a      	mov	r2, r3
 80042ba:	4623      	mov	r3, r4
 80042bc:	80fb      	strh	r3, [r7, #6]
 80042be:	4603      	mov	r3, r0
 80042c0:	717b      	strb	r3, [r7, #5]
 80042c2:	460b      	mov	r3, r1
 80042c4:	713b      	strb	r3, [r7, #4]
 80042c6:	4613      	mov	r3, r2
 80042c8:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 80042ca:	78fb      	ldrb	r3, [r7, #3]
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	d014      	beq.n	80042fa <u8g2_add_vector_x+0x4e>
 80042d0:	2b02      	cmp	r3, #2
 80042d2:	dc19      	bgt.n	8004308 <u8g2_add_vector_x+0x5c>
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d002      	beq.n	80042de <u8g2_add_vector_x+0x32>
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d007      	beq.n	80042ec <u8g2_add_vector_x+0x40>
 80042dc:	e014      	b.n	8004308 <u8g2_add_vector_x+0x5c>
  {
    case 0:
      dx += x;
 80042de:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80042e2:	b29a      	uxth	r2, r3
 80042e4:	88fb      	ldrh	r3, [r7, #6]
 80042e6:	4413      	add	r3, r2
 80042e8:	80fb      	strh	r3, [r7, #6]
      break;
 80042ea:	e014      	b.n	8004316 <u8g2_add_vector_x+0x6a>
    case 1:
      dx -= y;
 80042ec:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	88fa      	ldrh	r2, [r7, #6]
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	80fb      	strh	r3, [r7, #6]
      break;
 80042f8:	e00d      	b.n	8004316 <u8g2_add_vector_x+0x6a>
    case 2:
      dx -= x;
 80042fa:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80042fe:	b29b      	uxth	r3, r3
 8004300:	88fa      	ldrh	r2, [r7, #6]
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	80fb      	strh	r3, [r7, #6]
      break;
 8004306:	e006      	b.n	8004316 <u8g2_add_vector_x+0x6a>
    default:
      dx += y;
 8004308:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800430c:	b29a      	uxth	r2, r3
 800430e:	88fb      	ldrh	r3, [r7, #6]
 8004310:	4413      	add	r3, r2
 8004312:	80fb      	strh	r3, [r7, #6]
      break;      
 8004314:	bf00      	nop
  }
  return dx;
 8004316:	88fb      	ldrh	r3, [r7, #6]
}
 8004318:	4618      	mov	r0, r3
 800431a:	3708      	adds	r7, #8
 800431c:	46bd      	mov	sp, r7
 800431e:	bc90      	pop	{r4, r7}
 8004320:	4770      	bx	lr

08004322 <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 8004322:	b580      	push	{r7, lr}
 8004324:	b088      	sub	sp, #32
 8004326:	af02      	add	r7, sp, #8
 8004328:	6078      	str	r0, [r7, #4]
 800432a:	460b      	mov	r3, r1
 800432c:	70fb      	strb	r3, [r7, #3]
 800432e:	4613      	mov	r3, r2
 8004330:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	3360      	adds	r3, #96	; 0x60
 8004336:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 8004338:	78fb      	ldrb	r3, [r7, #3]
 800433a:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8004342:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800434a:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8004352:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 8004354:	7bfa      	ldrb	r2, [r7, #15]
 8004356:	7d7b      	ldrb	r3, [r7, #21]
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 800435c:	7bfb      	ldrb	r3, [r7, #15]
 800435e:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 8004360:	7dfa      	ldrb	r2, [r7, #23]
 8004362:	7bfb      	ldrb	r3, [r7, #15]
 8004364:	429a      	cmp	r2, r3
 8004366:	d201      	bcs.n	800436c <u8g2_font_decode_len+0x4a>
      current = cnt;
 8004368:	7dfb      	ldrb	r3, [r7, #23]
 800436a:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	889b      	ldrh	r3, [r3, #4]
 8004370:	81bb      	strh	r3, [r7, #12]
    y = decode->target_y;
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	88db      	ldrh	r3, [r3, #6]
 8004376:	817b      	strh	r3, [r7, #10]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8004378:	f997 1015 	ldrsb.w	r1, [r7, #21]
 800437c:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	7c1b      	ldrb	r3, [r3, #16]
 8004384:	89b8      	ldrh	r0, [r7, #12]
 8004386:	f7ff ff91 	bl	80042ac <u8g2_add_vector_x>
 800438a:	4603      	mov	r3, r0
 800438c:	81bb      	strh	r3, [r7, #12]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 800438e:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8004392:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	7c1b      	ldrb	r3, [r3, #16]
 800439a:	8978      	ldrh	r0, [r7, #10]
 800439c:	f7ff ff4b 	bl	8004236 <u8g2_add_vector_y>
 80043a0:	4603      	mov	r3, r0
 80043a2:	817b      	strh	r3, [r7, #10]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 80043a4:	78bb      	ldrb	r3, [r7, #2]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d010      	beq.n	80043cc <u8g2_font_decode_len+0xaa>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	7b9a      	ldrb	r2, [r3, #14]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 80043b4:	7dbb      	ldrb	r3, [r7, #22]
 80043b6:	b298      	uxth	r0, r3
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	7c1b      	ldrb	r3, [r3, #16]
 80043bc:	897a      	ldrh	r2, [r7, #10]
 80043be:	89b9      	ldrh	r1, [r7, #12]
 80043c0:	9300      	str	r3, [sp, #0]
 80043c2:	4603      	mov	r3, r0
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f000 fbfe 	bl	8004bc6 <u8g2_DrawHVLine>
 80043ca:	e013      	b.n	80043f4 <u8g2_font_decode_len+0xd2>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	7b5b      	ldrb	r3, [r3, #13]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d10f      	bne.n	80043f4 <u8g2_font_decode_len+0xd2>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	7bda      	ldrb	r2, [r3, #15]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 80043de:	7dbb      	ldrb	r3, [r7, #22]
 80043e0:	b298      	uxth	r0, r3
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	7c1b      	ldrb	r3, [r3, #16]
 80043e6:	897a      	ldrh	r2, [r7, #10]
 80043e8:	89b9      	ldrh	r1, [r7, #12]
 80043ea:	9300      	str	r3, [sp, #0]
 80043ec:	4603      	mov	r3, r0
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 fbe9 	bl	8004bc6 <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 80043f4:	7dfa      	ldrb	r2, [r7, #23]
 80043f6:	7bfb      	ldrb	r3, [r7, #15]
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d309      	bcc.n	8004410 <u8g2_font_decode_len+0xee>
      break;
    cnt -= rem;
 80043fc:	7dfa      	ldrb	r2, [r7, #23]
 80043fe:	7bfb      	ldrb	r3, [r7, #15]
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 8004404:	2300      	movs	r3, #0
 8004406:	757b      	strb	r3, [r7, #21]
    ly++;
 8004408:	7d3b      	ldrb	r3, [r7, #20]
 800440a:	3301      	adds	r3, #1
 800440c:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 800440e:	e79d      	b.n	800434c <u8g2_font_decode_len+0x2a>
      break;
 8004410:	bf00      	nop
  }
  lx += cnt;
 8004412:	7d7a      	ldrb	r2, [r7, #21]
 8004414:	7dfb      	ldrb	r3, [r7, #23]
 8004416:	4413      	add	r3, r2
 8004418:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 800441a:	f997 2015 	ldrsb.w	r2, [r7, #21]
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	721a      	strb	r2, [r3, #8]
  decode->y = ly;  
 8004422:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	725a      	strb	r2, [r3, #9]
}
 800442a:	bf00      	nop
 800442c:	3718      	adds	r7, #24
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}

08004432 <u8g2_font_setup_decode>:
  
}


static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8004432:	b580      	push	{r7, lr}
 8004434:	b084      	sub	sp, #16
 8004436:	af00      	add	r7, sp, #0
 8004438:	6078      	str	r0, [r7, #4]
 800443a:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	3360      	adds	r3, #96	; 0x60
 8004440:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	683a      	ldr	r2, [r7, #0]
 8004446:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2200      	movs	r2, #0
 800444c:	731a      	strb	r2, [r3, #12]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8004454:	4619      	mov	r1, r3
 8004456:	68f8      	ldr	r0, [r7, #12]
 8004458:	f7ff fe7f 	bl	800415a <u8g2_font_decode_get_unsigned_bits>
 800445c:	4603      	mov	r3, r0
 800445e:	b25a      	sxtb	r2, r3
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	729a      	strb	r2, [r3, #10]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 800446a:	4619      	mov	r1, r3
 800446c:	68f8      	ldr	r0, [r7, #12]
 800446e:	f7ff fe74 	bl	800415a <u8g2_font_decode_get_unsigned_bits>
 8004472:	4603      	mov	r3, r0
 8004474:	b25a      	sxtb	r2, r3
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	72da      	strb	r2, [r3, #11]
  
  decode->fg_color = u8g2->draw_color;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f893 2092 	ldrb.w	r2, [r3, #146]	; 0x92
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	739a      	strb	r2, [r3, #14]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	7b9b      	ldrb	r3, [r3, #14]
 8004488:	2b00      	cmp	r3, #0
 800448a:	bf0c      	ite	eq
 800448c:	2301      	moveq	r3, #1
 800448e:	2300      	movne	r3, #0
 8004490:	b2db      	uxtb	r3, r3
 8004492:	461a      	mov	r2, r3
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	73da      	strb	r2, [r3, #15]
}
 8004498:	bf00      	nop
 800449a:	3710      	adds	r7, #16
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}

080044a0 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b08a      	sub	sp, #40	; 0x28
 80044a4:	af02      	add	r7, sp, #8
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	3360      	adds	r3, #96	; 0x60
 80044ae:	617b      	str	r3, [r7, #20]
    
  u8g2_font_setup_decode(u8g2, glyph_data);     /* set values in u8g2->font_decode data structure */
 80044b0:	6839      	ldr	r1, [r7, #0]
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f7ff ffbd 	bl	8004432 <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 80044be:	74fb      	strb	r3, [r7, #19]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 80044c6:	4619      	mov	r1, r3
 80044c8:	6978      	ldr	r0, [r7, #20]
 80044ca:	f7ff fe91 	bl	80041f0 <u8g2_font_decode_get_signed_bits>
 80044ce:	4603      	mov	r3, r0
 80044d0:	74bb      	strb	r3, [r7, #18]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 80044d8:	4619      	mov	r1, r3
 80044da:	6978      	ldr	r0, [r7, #20]
 80044dc:	f7ff fe88 	bl	80041f0 <u8g2_font_decode_get_signed_bits>
 80044e0:	4603      	mov	r3, r0
 80044e2:	747b      	strb	r3, [r7, #17]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80044ea:	4619      	mov	r1, r3
 80044ec:	6978      	ldr	r0, [r7, #20]
 80044ee:	f7ff fe7f 	bl	80041f0 <u8g2_font_decode_get_signed_bits>
 80044f2:	4603      	mov	r3, r0
 80044f4:	743b      	strb	r3, [r7, #16]
  
  if ( decode->glyph_width > 0 )
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	f340 80d7 	ble.w	80046b0 <u8g2_font_decode_glyph+0x210>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	8898      	ldrh	r0, [r3, #4]
 8004506:	7cfa      	ldrb	r2, [r7, #19]
 8004508:	7c7b      	ldrb	r3, [r7, #17]
 800450a:	4413      	add	r3, r2
 800450c:	b2db      	uxtb	r3, r3
 800450e:	425b      	negs	r3, r3
 8004510:	b2db      	uxtb	r3, r3
 8004512:	b25a      	sxtb	r2, r3
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	7c1b      	ldrb	r3, [r3, #16]
 8004518:	f997 1012 	ldrsb.w	r1, [r7, #18]
 800451c:	f7ff fec6 	bl	80042ac <u8g2_add_vector_x>
 8004520:	4603      	mov	r3, r0
 8004522:	461a      	mov	r2, r3
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	809a      	strh	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	88d8      	ldrh	r0, [r3, #6]
 800452c:	7cfa      	ldrb	r2, [r7, #19]
 800452e:	7c7b      	ldrb	r3, [r7, #17]
 8004530:	4413      	add	r3, r2
 8004532:	b2db      	uxtb	r3, r3
 8004534:	425b      	negs	r3, r3
 8004536:	b2db      	uxtb	r3, r3
 8004538:	b25a      	sxtb	r2, r3
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	7c1b      	ldrb	r3, [r3, #16]
 800453e:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8004542:	f7ff fe78 	bl	8004236 <u8g2_add_vector_y>
 8004546:	4603      	mov	r3, r0
 8004548:	461a      	mov	r2, r3
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	80da      	strh	r2, [r3, #6]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	889b      	ldrh	r3, [r3, #4]
 8004552:	83fb      	strh	r3, [r7, #30]
      y0 = decode->target_y;
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	88db      	ldrh	r3, [r3, #6]
 8004558:	837b      	strh	r3, [r7, #26]
      x1 = x0;
 800455a:	8bfb      	ldrh	r3, [r7, #30]
 800455c:	83bb      	strh	r3, [r7, #28]
      y1 = y0;
 800455e:	8b7b      	ldrh	r3, [r7, #26]
 8004560:	833b      	strh	r3, [r7, #24]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	7c1b      	ldrb	r3, [r3, #16]
 8004566:	2b03      	cmp	r3, #3
 8004568:	d85a      	bhi.n	8004620 <u8g2_font_decode_glyph+0x180>
 800456a:	a201      	add	r2, pc, #4	; (adr r2, 8004570 <u8g2_font_decode_glyph+0xd0>)
 800456c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004570:	08004581 	.word	0x08004581
 8004574:	0800459d 	.word	0x0800459d
 8004578:	080045c5 	.word	0x080045c5
 800457c:	080045f9 	.word	0x080045f9
      {
	case 0:
	    x1 += decode->glyph_width;
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8004586:	b29a      	uxth	r2, r3
 8004588:	8bbb      	ldrh	r3, [r7, #28]
 800458a:	4413      	add	r3, r2
 800458c:	83bb      	strh	r3, [r7, #28]
	    y1 += h;
 800458e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004592:	b29a      	uxth	r2, r3
 8004594:	8b3b      	ldrh	r3, [r7, #24]
 8004596:	4413      	add	r3, r2
 8004598:	833b      	strh	r3, [r7, #24]
	    break;
 800459a:	e041      	b.n	8004620 <u8g2_font_decode_glyph+0x180>
	case 1:
	    x0 -= h;
 800459c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	8bfa      	ldrh	r2, [r7, #30]
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80045a8:	8bfb      	ldrh	r3, [r7, #30]
 80045aa:	3301      	adds	r3, #1
 80045ac:	83fb      	strh	r3, [r7, #30]
	    x1++;
 80045ae:	8bbb      	ldrh	r3, [r7, #28]
 80045b0:	3301      	adds	r3, #1
 80045b2:	83bb      	strh	r3, [r7, #28]
	    y1 += decode->glyph_width;
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80045ba:	b29a      	uxth	r2, r3
 80045bc:	8b3b      	ldrh	r3, [r7, #24]
 80045be:	4413      	add	r3, r2
 80045c0:	833b      	strh	r3, [r7, #24]
	    break;
 80045c2:	e02d      	b.n	8004620 <u8g2_font_decode_glyph+0x180>
	case 2:
	    x0 -= decode->glyph_width;
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	8bfa      	ldrh	r2, [r7, #30]
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80045d2:	8bfb      	ldrh	r3, [r7, #30]
 80045d4:	3301      	adds	r3, #1
 80045d6:	83fb      	strh	r3, [r7, #30]
	    x1++;
 80045d8:	8bbb      	ldrh	r3, [r7, #28]
 80045da:	3301      	adds	r3, #1
 80045dc:	83bb      	strh	r3, [r7, #28]
	    y0 -= h;
 80045de:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	8b7a      	ldrh	r2, [r7, #26]
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80045ea:	8b7b      	ldrh	r3, [r7, #26]
 80045ec:	3301      	adds	r3, #1
 80045ee:	837b      	strh	r3, [r7, #26]
	    y1++;
 80045f0:	8b3b      	ldrh	r3, [r7, #24]
 80045f2:	3301      	adds	r3, #1
 80045f4:	833b      	strh	r3, [r7, #24]
	    break;	  
 80045f6:	e013      	b.n	8004620 <u8g2_font_decode_glyph+0x180>
	case 3:
	    x1 += h;
 80045f8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80045fc:	b29a      	uxth	r2, r3
 80045fe:	8bbb      	ldrh	r3, [r7, #28]
 8004600:	4413      	add	r3, r2
 8004602:	83bb      	strh	r3, [r7, #28]
	    y0 -= decode->glyph_width;
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800460a:	b29b      	uxth	r3, r3
 800460c:	8b7a      	ldrh	r2, [r7, #26]
 800460e:	1ad3      	subs	r3, r2, r3
 8004610:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8004612:	8b7b      	ldrh	r3, [r7, #26]
 8004614:	3301      	adds	r3, #1
 8004616:	837b      	strh	r3, [r7, #26]
	    y1++;
 8004618:	8b3b      	ldrh	r3, [r7, #24]
 800461a:	3301      	adds	r3, #1
 800461c:	833b      	strh	r3, [r7, #24]
	    break;	  
 800461e:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8004620:	8bb8      	ldrh	r0, [r7, #28]
 8004622:	8b7a      	ldrh	r2, [r7, #26]
 8004624:	8bf9      	ldrh	r1, [r7, #30]
 8004626:	8b3b      	ldrh	r3, [r7, #24]
 8004628:	9300      	str	r3, [sp, #0]
 800462a:	4603      	mov	r3, r0
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 fbbb 	bl	8004da8 <u8g2_IsIntersection>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d102      	bne.n	800463e <u8g2_font_decode_glyph+0x19e>
	return d;
 8004638:	f997 3010 	ldrsb.w	r3, [r7, #16]
 800463c:	e03a      	b.n	80046b4 <u8g2_font_decode_glyph+0x214>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	2200      	movs	r2, #0
 8004642:	721a      	strb	r2, [r3, #8]
    decode->y = 0;
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	2200      	movs	r2, #0
 8004648:	725a      	strb	r2, [r3, #9]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8004650:	4619      	mov	r1, r3
 8004652:	6978      	ldr	r0, [r7, #20]
 8004654:	f7ff fd81 	bl	800415a <u8g2_font_decode_get_unsigned_bits>
 8004658:	4603      	mov	r3, r0
 800465a:	73fb      	strb	r3, [r7, #15]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8004662:	4619      	mov	r1, r3
 8004664:	6978      	ldr	r0, [r7, #20]
 8004666:	f7ff fd78 	bl	800415a <u8g2_font_decode_get_unsigned_bits>
 800466a:	4603      	mov	r3, r0
 800466c:	73bb      	strb	r3, [r7, #14]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 800466e:	7bfb      	ldrb	r3, [r7, #15]
 8004670:	2200      	movs	r2, #0
 8004672:	4619      	mov	r1, r3
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f7ff fe54 	bl	8004322 <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 800467a:	7bbb      	ldrb	r3, [r7, #14]
 800467c:	2201      	movs	r2, #1
 800467e:	4619      	mov	r1, r3
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f7ff fe4e 	bl	8004322 <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8004686:	2101      	movs	r1, #1
 8004688:	6978      	ldr	r0, [r7, #20]
 800468a:	f7ff fd66 	bl	800415a <u8g2_font_decode_get_unsigned_bits>
 800468e:	4603      	mov	r3, r0
 8004690:	2b00      	cmp	r3, #0
 8004692:	d1ec      	bne.n	800466e <u8g2_font_decode_glyph+0x1ce>

      if ( decode->y >= h )
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800469a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800469e:	429a      	cmp	r2, r3
 80046a0:	dd00      	ble.n	80046a4 <u8g2_font_decode_glyph+0x204>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 80046a2:	e7d2      	b.n	800464a <u8g2_font_decode_glyph+0x1aa>
	break;
 80046a4:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	7b9a      	ldrb	r2, [r3, #14]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  }
  return d;
 80046b0:	f997 3010 	ldrsb.w	r3, [r7, #16]
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3720      	adds	r7, #32
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}

080046bc <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b086      	sub	sp, #24
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	460b      	mov	r3, r1
 80046c6:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046cc:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	3317      	adds	r3, #23
 80046d2:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 80046d4:	887b      	ldrh	r3, [r7, #2]
 80046d6:	2bff      	cmp	r3, #255	; 0xff
 80046d8:	d82a      	bhi.n	8004730 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 80046da:	887b      	ldrh	r3, [r7, #2]
 80046dc:	2b60      	cmp	r3, #96	; 0x60
 80046de:	d907      	bls.n	80046f0 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80046e6:	461a      	mov	r2, r3
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	4413      	add	r3, r2
 80046ec:	617b      	str	r3, [r7, #20]
 80046ee:	e009      	b.n	8004704 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 80046f0:	887b      	ldrh	r3, [r7, #2]
 80046f2:	2b40      	cmp	r3, #64	; 0x40
 80046f4:	d906      	bls.n	8004704 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 80046fc:	461a      	mov	r2, r3
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	4413      	add	r3, r2
 8004702:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	3301      	adds	r3, #1
 8004708:	781b      	ldrb	r3, [r3, #0]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d04e      	beq.n	80047ac <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	b29b      	uxth	r3, r3
 8004714:	887a      	ldrh	r2, [r7, #2]
 8004716:	429a      	cmp	r2, r3
 8004718:	d102      	bne.n	8004720 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	3302      	adds	r3, #2
 800471e:	e049      	b.n	80047b4 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	3301      	adds	r3, #1
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	461a      	mov	r2, r3
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	4413      	add	r3, r2
 800472c:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 800472e:	e7e9      	b.n	8004704 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8004736:	461a      	mov	r2, r3
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	4413      	add	r3, r2
 800473c:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 8004742:	2100      	movs	r1, #0
 8004744:	6938      	ldr	r0, [r7, #16]
 8004746:	f7ff fc3f 	bl	8003fc8 <u8g2_font_get_word>
 800474a:	4603      	mov	r3, r0
 800474c:	461a      	mov	r2, r3
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	4413      	add	r3, r2
 8004752:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 8004754:	2102      	movs	r1, #2
 8004756:	6938      	ldr	r0, [r7, #16]
 8004758:	f7ff fc36 	bl	8003fc8 <u8g2_font_get_word>
 800475c:	4603      	mov	r3, r0
 800475e:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	3304      	adds	r3, #4
 8004764:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 8004766:	89fa      	ldrh	r2, [r7, #14]
 8004768:	887b      	ldrh	r3, [r7, #2]
 800476a:	429a      	cmp	r2, r3
 800476c:	d3e9      	bcc.n	8004742 <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 8004774:	89fb      	ldrh	r3, [r7, #14]
 8004776:	021b      	lsls	r3, r3, #8
 8004778:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	3301      	adds	r3, #1
 800477e:	781b      	ldrb	r3, [r3, #0]
 8004780:	b29a      	uxth	r2, r3
 8004782:	89fb      	ldrh	r3, [r7, #14]
 8004784:	4313      	orrs	r3, r2
 8004786:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 8004788:	89fb      	ldrh	r3, [r7, #14]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d010      	beq.n	80047b0 <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 800478e:	89fa      	ldrh	r2, [r7, #14]
 8004790:	887b      	ldrh	r3, [r7, #2]
 8004792:	429a      	cmp	r2, r3
 8004794:	d102      	bne.n	800479c <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	3303      	adds	r3, #3
 800479a:	e00b      	b.n	80047b4 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	3302      	adds	r3, #2
 80047a0:	781b      	ldrb	r3, [r3, #0]
 80047a2:	461a      	mov	r2, r3
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	4413      	add	r3, r2
 80047a8:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 80047aa:	e7e0      	b.n	800476e <u8g2_font_get_glyph_data+0xb2>
	break;
 80047ac:	bf00      	nop
 80047ae:	e000      	b.n	80047b2 <u8g2_font_get_glyph_data+0xf6>
	break;
 80047b0:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 80047b2:	2300      	movs	r3, #0
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3718      	adds	r7, #24
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}

080047bc <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b086      	sub	sp, #24
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	4608      	mov	r0, r1
 80047c6:	4611      	mov	r1, r2
 80047c8:	461a      	mov	r2, r3
 80047ca:	4603      	mov	r3, r0
 80047cc:	817b      	strh	r3, [r7, #10]
 80047ce:	460b      	mov	r3, r1
 80047d0:	813b      	strh	r3, [r7, #8]
 80047d2:	4613      	mov	r3, r2
 80047d4:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t dx = 0;
 80047d6:	2300      	movs	r3, #0
 80047d8:	82fb      	strh	r3, [r7, #22]
  u8g2->font_decode.target_x = x;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	897a      	ldrh	r2, [r7, #10]
 80047de:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  u8g2->font_decode.target_y = y;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	893a      	ldrh	r2, [r7, #8]
 80047e6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 80047ea:	88fb      	ldrh	r3, [r7, #6]
 80047ec:	4619      	mov	r1, r3
 80047ee:	68f8      	ldr	r0, [r7, #12]
 80047f0:	f7ff ff64 	bl	80046bc <u8g2_font_get_glyph_data>
 80047f4:	6138      	str	r0, [r7, #16]
  if ( glyph_data != NULL )
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d005      	beq.n	8004808 <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 80047fc:	6939      	ldr	r1, [r7, #16]
 80047fe:	68f8      	ldr	r0, [r7, #12]
 8004800:	f7ff fe4e 	bl	80044a0 <u8g2_font_decode_glyph>
 8004804:	4603      	mov	r3, r0
 8004806:	82fb      	strh	r3, [r7, #22]
  }
  return dx;
 8004808:	8afb      	ldrh	r3, [r7, #22]
}
 800480a:	4618      	mov	r0, r3
 800480c:	3718      	adds	r7, #24
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
	...

08004814 <u8g2_DrawGlyph>:
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b084      	sub	sp, #16
 8004818:	af00      	add	r7, sp, #0
 800481a:	60f8      	str	r0, [r7, #12]
 800481c:	4608      	mov	r0, r1
 800481e:	4611      	mov	r1, r2
 8004820:	461a      	mov	r2, r3
 8004822:	4603      	mov	r3, r0
 8004824:	817b      	strh	r3, [r7, #10]
 8004826:	460b      	mov	r3, r1
 8004828:	813b      	strh	r3, [r7, #8]
 800482a:	4613      	mov	r3, r2
 800482c:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004834:	2b03      	cmp	r3, #3
 8004836:	d833      	bhi.n	80048a0 <u8g2_DrawGlyph+0x8c>
 8004838:	a201      	add	r2, pc, #4	; (adr r2, 8004840 <u8g2_DrawGlyph+0x2c>)
 800483a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800483e:	bf00      	nop
 8004840:	08004851 	.word	0x08004851
 8004844:	08004865 	.word	0x08004865
 8004848:	08004879 	.word	0x08004879
 800484c:	0800488d 	.word	0x0800488d
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004854:	68f8      	ldr	r0, [r7, #12]
 8004856:	4798      	blx	r3
 8004858:	4603      	mov	r3, r0
 800485a:	461a      	mov	r2, r3
 800485c:	893b      	ldrh	r3, [r7, #8]
 800485e:	4413      	add	r3, r2
 8004860:	813b      	strh	r3, [r7, #8]
      break;
 8004862:	e01d      	b.n	80048a0 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004868:	68f8      	ldr	r0, [r7, #12]
 800486a:	4798      	blx	r3
 800486c:	4603      	mov	r3, r0
 800486e:	461a      	mov	r2, r3
 8004870:	897b      	ldrh	r3, [r7, #10]
 8004872:	1a9b      	subs	r3, r3, r2
 8004874:	817b      	strh	r3, [r7, #10]
      break;
 8004876:	e013      	b.n	80048a0 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800487c:	68f8      	ldr	r0, [r7, #12]
 800487e:	4798      	blx	r3
 8004880:	4603      	mov	r3, r0
 8004882:	461a      	mov	r2, r3
 8004884:	893b      	ldrh	r3, [r7, #8]
 8004886:	1a9b      	subs	r3, r3, r2
 8004888:	813b      	strh	r3, [r7, #8]
      break;
 800488a:	e009      	b.n	80048a0 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004890:	68f8      	ldr	r0, [r7, #12]
 8004892:	4798      	blx	r3
 8004894:	4603      	mov	r3, r0
 8004896:	461a      	mov	r2, r3
 8004898:	897b      	ldrh	r3, [r7, #10]
 800489a:	4413      	add	r3, r2
 800489c:	817b      	strh	r3, [r7, #10]
      break;
 800489e:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 80048a0:	88fb      	ldrh	r3, [r7, #6]
 80048a2:	893a      	ldrh	r2, [r7, #8]
 80048a4:	8979      	ldrh	r1, [r7, #10]
 80048a6:	68f8      	ldr	r0, [r7, #12]
 80048a8:	f7ff ff88 	bl	80047bc <u8g2_font_draw_glyph>
 80048ac:	4603      	mov	r3, r0
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3710      	adds	r7, #16
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop

080048b8 <u8g2_draw_string>:
  return u8g2_font_2x_draw_glyph(u8g2, x, y, encoding);
}

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b086      	sub	sp, #24
 80048bc:	af00      	add	r7, sp, #0
 80048be:	60f8      	str	r0, [r7, #12]
 80048c0:	607b      	str	r3, [r7, #4]
 80048c2:	460b      	mov	r3, r1
 80048c4:	817b      	strh	r3, [r7, #10]
 80048c6:	4613      	mov	r3, r2
 80048c8:	813b      	strh	r3, [r7, #8]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 80048ca:	68f8      	ldr	r0, [r7, #12]
 80048cc:	f000 fd37 	bl	800533e <u8x8_utf8_init>
  sum = 0;
 80048d0:	2300      	movs	r3, #0
 80048d2:	82fb      	strh	r3, [r7, #22]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	7812      	ldrb	r2, [r2, #0]
 80048dc:	4611      	mov	r1, r2
 80048de:	68f8      	ldr	r0, [r7, #12]
 80048e0:	4798      	blx	r3
 80048e2:	4603      	mov	r3, r0
 80048e4:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 80048e6:	8abb      	ldrh	r3, [r7, #20]
 80048e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d038      	beq.n	8004962 <u8g2_draw_string+0xaa>
      break;
    str++;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	3301      	adds	r3, #1
 80048f4:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 80048f6:	8abb      	ldrh	r3, [r7, #20]
 80048f8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d0e9      	beq.n	80048d4 <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8004900:	8abb      	ldrh	r3, [r7, #20]
 8004902:	893a      	ldrh	r2, [r7, #8]
 8004904:	8979      	ldrh	r1, [r7, #10]
 8004906:	68f8      	ldr	r0, [r7, #12]
 8004908:	f7ff ff84 	bl	8004814 <u8g2_DrawGlyph>
 800490c:	4603      	mov	r3, r0
 800490e:	827b      	strh	r3, [r7, #18]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004916:	2b03      	cmp	r3, #3
 8004918:	d81e      	bhi.n	8004958 <u8g2_draw_string+0xa0>
 800491a:	a201      	add	r2, pc, #4	; (adr r2, 8004920 <u8g2_draw_string+0x68>)
 800491c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004920:	08004931 	.word	0x08004931
 8004924:	0800493b 	.word	0x0800493b
 8004928:	08004945 	.word	0x08004945
 800492c:	0800494f 	.word	0x0800494f
      {
	case 0:
	  x += delta;
 8004930:	897a      	ldrh	r2, [r7, #10]
 8004932:	8a7b      	ldrh	r3, [r7, #18]
 8004934:	4413      	add	r3, r2
 8004936:	817b      	strh	r3, [r7, #10]
	  break;
 8004938:	e00e      	b.n	8004958 <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 800493a:	893a      	ldrh	r2, [r7, #8]
 800493c:	8a7b      	ldrh	r3, [r7, #18]
 800493e:	4413      	add	r3, r2
 8004940:	813b      	strh	r3, [r7, #8]
	  break;
 8004942:	e009      	b.n	8004958 <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 8004944:	897a      	ldrh	r2, [r7, #10]
 8004946:	8a7b      	ldrh	r3, [r7, #18]
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	817b      	strh	r3, [r7, #10]
	  break;
 800494c:	e004      	b.n	8004958 <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 800494e:	893a      	ldrh	r2, [r7, #8]
 8004950:	8a7b      	ldrh	r3, [r7, #18]
 8004952:	1ad3      	subs	r3, r2, r3
 8004954:	813b      	strh	r3, [r7, #8]
	  break;
 8004956:	bf00      	nop

#else
      x += delta;
#endif

      sum += delta;    
 8004958:	8afa      	ldrh	r2, [r7, #22]
 800495a:	8a7b      	ldrh	r3, [r7, #18]
 800495c:	4413      	add	r3, r2
 800495e:	82fb      	strh	r3, [r7, #22]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8004960:	e7b8      	b.n	80048d4 <u8g2_draw_string+0x1c>
      break;
 8004962:	bf00      	nop
    }
  }
  return sum;
 8004964:	8afb      	ldrh	r3, [r7, #22]
}
 8004966:	4618      	mov	r0, r3
 8004968:	3718      	adds	r7, #24
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
 800496e:	bf00      	nop

08004970 <u8g2_DrawStr>:
  }
  return sum;
}

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b084      	sub	sp, #16
 8004974:	af00      	add	r7, sp, #0
 8004976:	60f8      	str	r0, [r7, #12]
 8004978:	607b      	str	r3, [r7, #4]
 800497a:	460b      	mov	r3, r1
 800497c:	817b      	strh	r3, [r7, #10]
 800497e:	4613      	mov	r3, r2
 8004980:	813b      	strh	r3, [r7, #8]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	4a06      	ldr	r2, [pc, #24]	; (80049a0 <u8g2_DrawStr+0x30>)
 8004986:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8004988:	893a      	ldrh	r2, [r7, #8]
 800498a:	8979      	ldrh	r1, [r7, #10]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	68f8      	ldr	r0, [r7, #12]
 8004990:	f7ff ff92 	bl	80048b8 <u8g2_draw_string>
 8004994:	4603      	mov	r3, r0
}
 8004996:	4618      	mov	r0, r3
 8004998:	3710      	adds	r7, #16
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
 800499e:	bf00      	nop
 80049a0:	0800535b 	.word	0x0800535b

080049a4 <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d05d      	beq.n	8004a70 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f993 2081 	ldrsb.w	r2, [r3, #129]	; 0x81
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f993 2082 	ldrsb.w	r2, [r3, #130]	; 0x82
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d04d      	beq.n	8004a72 <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d11c      	bne.n	8004a1a <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f993 208e 	ldrsb.w	r2, [r3, #142]	; 0x8e
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f993 3083 	ldrsb.w	r3, [r3, #131]	; 0x83
 80049ec:	429a      	cmp	r2, r3
 80049ee:	da05      	bge.n	80049fc <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f993 3084 	ldrsb.w	r3, [r3, #132]	; 0x84
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	dd32      	ble.n	8004a72 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f993 2084 	ldrsb.w	r2, [r3, #132]	; 0x84
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 8004a18:	e02b      	b.n	8004a72 <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f993 308e 	ldrsb.w	r3, [r3, #142]	; 0x8e
 8004a20:	461a      	mov	r2, r3
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8004a28:	4619      	mov	r1, r3
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8004a30:	440b      	add	r3, r1
 8004a32:	429a      	cmp	r2, r3
 8004a34:	da0d      	bge.n	8004a52 <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8004a3c:	b2da      	uxtb	r2, r3
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	4413      	add	r3, r2
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	b25a      	sxtb	r2, r3
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	dd07      	ble.n	8004a72 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f993 2080 	ldrsb.w	r2, [r3, #128]	; 0x80
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 8004a6e:	e000      	b.n	8004a72 <u8g2_UpdateRefHeight+0xce>
    return;
 8004a70:	bf00      	nop
  }  
}
 8004a72:	370c      	adds	r7, #12
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr

08004a7c <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b083      	sub	sp, #12
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  return 0;
 8004a84:	2300      	movs	r3, #0
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	370c      	adds	r7, #12
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr
	...

08004a94 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b083      	sub	sp, #12
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	4a04      	ldr	r2, [pc, #16]	; (8004ab0 <u8g2_SetFontPosBaseline+0x1c>)
 8004aa0:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004aa2:	bf00      	nop
 8004aa4:	370c      	adds	r7, #12
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr
 8004aae:	bf00      	nop
 8004ab0:	08004a7d 	.word	0x08004a7d

08004ab4 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b082      	sub	sp, #8
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ac2:	683a      	ldr	r2, [r7, #0]
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d00b      	beq.n	8004ae0 <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	683a      	ldr	r2, [r7, #0]
 8004acc:	659a      	str	r2, [r3, #88]	; 0x58
    u8g2_read_font_info(&(u8g2->font_info), font);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	3374      	adds	r3, #116	; 0x74
 8004ad2:	6839      	ldr	r1, [r7, #0]
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f7ff fa97 	bl	8004008 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f7ff ff62 	bl	80049a4 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 8004ae0:	bf00      	nop
 8004ae2:	3708      	adds	r7, #8
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}

08004ae8 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b087      	sub	sp, #28
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	4611      	mov	r1, r2
 8004af4:	461a      	mov	r2, r3
 8004af6:	460b      	mov	r3, r1
 8004af8:	80fb      	strh	r3, [r7, #6]
 8004afa:	4613      	mov	r3, r2
 8004afc:	80bb      	strh	r3, [r7, #4]
  u8g2_uint_t a = *ap;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	881b      	ldrh	r3, [r3, #0]
 8004b02:	82fb      	strh	r3, [r7, #22]
  u8g2_uint_t b;
  b  = a;
 8004b04:	8afb      	ldrh	r3, [r7, #22]
 8004b06:	82bb      	strh	r3, [r7, #20]
  b += *len;
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	881a      	ldrh	r2, [r3, #0]
 8004b0c:	8abb      	ldrh	r3, [r7, #20]
 8004b0e:	4413      	add	r3, r2
 8004b10:	82bb      	strh	r3, [r7, #20]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 8004b12:	8afa      	ldrh	r2, [r7, #22]
 8004b14:	8abb      	ldrh	r3, [r7, #20]
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d90b      	bls.n	8004b32 <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 8004b1a:	8afa      	ldrh	r2, [r7, #22]
 8004b1c:	88bb      	ldrh	r3, [r7, #4]
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d205      	bcs.n	8004b2e <u8g2_clip_intersection2+0x46>
    {
      b = d;
 8004b22:	88bb      	ldrh	r3, [r7, #4]
 8004b24:	82bb      	strh	r3, [r7, #20]
      b--;
 8004b26:	8abb      	ldrh	r3, [r7, #20]
 8004b28:	3b01      	subs	r3, #1
 8004b2a:	82bb      	strh	r3, [r7, #20]
 8004b2c:	e001      	b.n	8004b32 <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 8004b2e:	88fb      	ldrh	r3, [r7, #6]
 8004b30:	82fb      	strh	r3, [r7, #22]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 8004b32:	8afa      	ldrh	r2, [r7, #22]
 8004b34:	88bb      	ldrh	r3, [r7, #4]
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d301      	bcc.n	8004b3e <u8g2_clip_intersection2+0x56>
    return 0;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	e01c      	b.n	8004b78 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 8004b3e:	8aba      	ldrh	r2, [r7, #20]
 8004b40:	88fb      	ldrh	r3, [r7, #6]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d801      	bhi.n	8004b4a <u8g2_clip_intersection2+0x62>
    return 0;
 8004b46:	2300      	movs	r3, #0
 8004b48:	e016      	b.n	8004b78 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 8004b4a:	8afa      	ldrh	r2, [r7, #22]
 8004b4c:	88fb      	ldrh	r3, [r7, #6]
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d201      	bcs.n	8004b56 <u8g2_clip_intersection2+0x6e>
    a = c;
 8004b52:	88fb      	ldrh	r3, [r7, #6]
 8004b54:	82fb      	strh	r3, [r7, #22]
  if ( b > d )
 8004b56:	8aba      	ldrh	r2, [r7, #20]
 8004b58:	88bb      	ldrh	r3, [r7, #4]
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d901      	bls.n	8004b62 <u8g2_clip_intersection2+0x7a>
    b = d;
 8004b5e:	88bb      	ldrh	r3, [r7, #4]
 8004b60:	82bb      	strh	r3, [r7, #20]
  
  *ap = a;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	8afa      	ldrh	r2, [r7, #22]
 8004b66:	801a      	strh	r2, [r3, #0]
  b -= a;
 8004b68:	8aba      	ldrh	r2, [r7, #20]
 8004b6a:	8afb      	ldrh	r3, [r7, #22]
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	82bb      	strh	r3, [r7, #20]
  *len = b;
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	8aba      	ldrh	r2, [r7, #20]
 8004b74:	801a      	strh	r2, [r3, #0]
  return 1;
 8004b76:	2301      	movs	r3, #1
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	371c      	adds	r7, #28
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr

08004b84 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8004b84:	b590      	push	{r4, r7, lr}
 8004b86:	b087      	sub	sp, #28
 8004b88:	af02      	add	r7, sp, #8
 8004b8a:	60f8      	str	r0, [r7, #12]
 8004b8c:	4608      	mov	r0, r1
 8004b8e:	4611      	mov	r1, r2
 8004b90:	461a      	mov	r2, r3
 8004b92:	4603      	mov	r3, r0
 8004b94:	817b      	strh	r3, [r7, #10]
 8004b96:	460b      	mov	r3, r1
 8004b98:	813b      	strh	r3, [r7, #8]
 8004b9a:	4613      	mov	r3, r2
 8004b9c:	80fb      	strh	r3, [r7, #6]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ba2:	893a      	ldrh	r2, [r7, #8]
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	813b      	strh	r3, [r7, #8]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8004bac:	88f8      	ldrh	r0, [r7, #6]
 8004bae:	893a      	ldrh	r2, [r7, #8]
 8004bb0:	8979      	ldrh	r1, [r7, #10]
 8004bb2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004bb6:	9300      	str	r3, [sp, #0]
 8004bb8:	4603      	mov	r3, r0
 8004bba:	68f8      	ldr	r0, [r7, #12]
 8004bbc:	47a0      	blx	r4
}
 8004bbe:	bf00      	nop
 8004bc0:	3714      	adds	r7, #20
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd90      	pop	{r4, r7, pc}

08004bc6 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8004bc6:	b590      	push	{r4, r7, lr}
 8004bc8:	b087      	sub	sp, #28
 8004bca:	af02      	add	r7, sp, #8
 8004bcc:	60f8      	str	r0, [r7, #12]
 8004bce:	4608      	mov	r0, r1
 8004bd0:	4611      	mov	r1, r2
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	817b      	strh	r3, [r7, #10]
 8004bd8:	460b      	mov	r3, r1
 8004bda:	813b      	strh	r3, [r7, #8]
 8004bdc:	4613      	mov	r3, r2
 8004bde:	80fb      	strh	r3, [r7, #6]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d075      	beq.n	8004cd6 <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 8004bea:	88fb      	ldrh	r3, [r7, #6]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d072      	beq.n	8004cd6 <u8g2_DrawHVLine+0x110>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8004bf0:	88fb      	ldrh	r3, [r7, #6]
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d91a      	bls.n	8004c2c <u8g2_DrawHVLine+0x66>
      {
	if ( dir == 2 )
 8004bf6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004bfa:	2b02      	cmp	r3, #2
 8004bfc:	d109      	bne.n	8004c12 <u8g2_DrawHVLine+0x4c>
	{
	  x -= len;
 8004bfe:	897a      	ldrh	r2, [r7, #10]
 8004c00:	88fb      	ldrh	r3, [r7, #6]
 8004c02:	1ad3      	subs	r3, r2, r3
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	817b      	strh	r3, [r7, #10]
	  x++;
 8004c08:	897b      	ldrh	r3, [r7, #10]
 8004c0a:	3301      	adds	r3, #1
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	817b      	strh	r3, [r7, #10]
 8004c10:	e00c      	b.n	8004c2c <u8g2_DrawHVLine+0x66>
	}
	else if ( dir == 3 )
 8004c12:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004c16:	2b03      	cmp	r3, #3
 8004c18:	d108      	bne.n	8004c2c <u8g2_DrawHVLine+0x66>
	{
	  y -= len;
 8004c1a:	893a      	ldrh	r2, [r7, #8]
 8004c1c:	88fb      	ldrh	r3, [r7, #6]
 8004c1e:	1ad3      	subs	r3, r2, r3
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	813b      	strh	r3, [r7, #8]
	  y++;
 8004c24:	893b      	ldrh	r3, [r7, #8]
 8004c26:	3301      	adds	r3, #1
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	813b      	strh	r3, [r7, #8]
	}
      }
      dir &= 1;  
 8004c2c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004c30:	f003 0301 	and.w	r3, r3, #1
 8004c34:	f887 3020 	strb.w	r3, [r7, #32]
      
      /* clip against the user window */
      if ( dir == 0 )
 8004c38:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d11a      	bne.n	8004c76 <u8g2_DrawHVLine+0xb0>
      {
	if ( y < u8g2->user_y0 )
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8004c46:	893b      	ldrh	r3, [r7, #8]
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d83b      	bhi.n	8004cc4 <u8g2_DrawHVLine+0xfe>
	  return;
	if ( y >= u8g2->user_y1 )
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8004c52:	893b      	ldrh	r3, [r7, #8]
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d937      	bls.n	8004cc8 <u8g2_DrawHVLine+0x102>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8004c64:	1db9      	adds	r1, r7, #6
 8004c66:	f107 000a 	add.w	r0, r7, #10
 8004c6a:	f7ff ff3d 	bl	8004ae8 <u8g2_clip_intersection2>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d11a      	bne.n	8004caa <u8g2_DrawHVLine+0xe4>
	  return;
 8004c74:	e02f      	b.n	8004cd6 <u8g2_DrawHVLine+0x110>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8004c7c:	897b      	ldrh	r3, [r7, #10]
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d824      	bhi.n	8004ccc <u8g2_DrawHVLine+0x106>
	  return;
	if ( x >= u8g2->user_x1 )
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8004c88:	897b      	ldrh	r3, [r7, #10]
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d920      	bls.n	8004cd0 <u8g2_DrawHVLine+0x10a>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8004c9a:	1db9      	adds	r1, r7, #6
 8004c9c:	f107 0008 	add.w	r0, r7, #8
 8004ca0:	f7ff ff22 	bl	8004ae8 <u8g2_clip_intersection2>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d014      	beq.n	8004cd4 <u8g2_DrawHVLine+0x10e>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cae:	689c      	ldr	r4, [r3, #8]
 8004cb0:	8979      	ldrh	r1, [r7, #10]
 8004cb2:	893a      	ldrh	r2, [r7, #8]
 8004cb4:	88f8      	ldrh	r0, [r7, #6]
 8004cb6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004cba:	9300      	str	r3, [sp, #0]
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	68f8      	ldr	r0, [r7, #12]
 8004cc0:	47a0      	blx	r4
 8004cc2:	e008      	b.n	8004cd6 <u8g2_DrawHVLine+0x110>
	  return;
 8004cc4:	bf00      	nop
 8004cc6:	e006      	b.n	8004cd6 <u8g2_DrawHVLine+0x110>
	  return;
 8004cc8:	bf00      	nop
 8004cca:	e004      	b.n	8004cd6 <u8g2_DrawHVLine+0x110>
	  return;
 8004ccc:	bf00      	nop
 8004cce:	e002      	b.n	8004cd6 <u8g2_DrawHVLine+0x110>
	  return;
 8004cd0:	bf00      	nop
 8004cd2:	e000      	b.n	8004cd6 <u8g2_DrawHVLine+0x110>
	  return;
 8004cd4:	bf00      	nop
    }
}
 8004cd6:	3714      	adds	r7, #20
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd90      	pop	{r4, r7, pc}

08004cdc <u8g2_DrawPixel>:
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
}

void u8g2_DrawPixel(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b084      	sub	sp, #16
 8004ce0:	af02      	add	r7, sp, #8
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	460b      	mov	r3, r1
 8004ce6:	807b      	strh	r3, [r7, #2]
 8004ce8:	4613      	mov	r3, r2
 8004cea:	803b      	strh	r3, [r7, #0]
#ifdef U8G2_WITH_INTERSECTION
  if ( y < u8g2->user_y0 )
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8004cf2:	883a      	ldrh	r2, [r7, #0]
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d31a      	bcc.n	8004d2e <u8g2_DrawPixel+0x52>
    return;
  if ( y >= u8g2->user_y1 )
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8004cfe:	883a      	ldrh	r2, [r7, #0]
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d216      	bcs.n	8004d32 <u8g2_DrawPixel+0x56>
    return;
  if ( x < u8g2->user_x0 )
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8004d0a:	887a      	ldrh	r2, [r7, #2]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d312      	bcc.n	8004d36 <u8g2_DrawPixel+0x5a>
    return;
  if ( x >= u8g2->user_x1 )
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8004d16:	887a      	ldrh	r2, [r7, #2]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d20e      	bcs.n	8004d3a <u8g2_DrawPixel+0x5e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8004d1c:	883a      	ldrh	r2, [r7, #0]
 8004d1e:	8879      	ldrh	r1, [r7, #2]
 8004d20:	2300      	movs	r3, #0
 8004d22:	9300      	str	r3, [sp, #0]
 8004d24:	2301      	movs	r3, #1
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f7ff ff4d 	bl	8004bc6 <u8g2_DrawHVLine>
 8004d2c:	e006      	b.n	8004d3c <u8g2_DrawPixel+0x60>
    return;
 8004d2e:	bf00      	nop
 8004d30:	e004      	b.n	8004d3c <u8g2_DrawPixel+0x60>
    return;
 8004d32:	bf00      	nop
 8004d34:	e002      	b.n	8004d3c <u8g2_DrawPixel+0x60>
    return;
 8004d36:	bf00      	nop
 8004d38:	e000      	b.n	8004d3c <u8g2_DrawPixel+0x60>
    return;
 8004d3a:	bf00      	nop
}
 8004d3c:	3708      	adds	r7, #8
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}

08004d42 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8004d42:	b490      	push	{r4, r7}
 8004d44:	b082      	sub	sp, #8
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	4604      	mov	r4, r0
 8004d4a:	4608      	mov	r0, r1
 8004d4c:	4611      	mov	r1, r2
 8004d4e:	461a      	mov	r2, r3
 8004d50:	4623      	mov	r3, r4
 8004d52:	80fb      	strh	r3, [r7, #6]
 8004d54:	4603      	mov	r3, r0
 8004d56:	80bb      	strh	r3, [r7, #4]
 8004d58:	460b      	mov	r3, r1
 8004d5a:	807b      	strh	r3, [r7, #2]
 8004d5c:	4613      	mov	r3, r2
 8004d5e:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 8004d60:	887a      	ldrh	r2, [r7, #2]
 8004d62:	88bb      	ldrh	r3, [r7, #4]
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d20d      	bcs.n	8004d84 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8004d68:	883a      	ldrh	r2, [r7, #0]
 8004d6a:	88fb      	ldrh	r3, [r7, #6]
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d901      	bls.n	8004d74 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8004d70:	2301      	movs	r3, #1
 8004d72:	e014      	b.n	8004d9e <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8004d74:	887a      	ldrh	r2, [r7, #2]
 8004d76:	883b      	ldrh	r3, [r7, #0]
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d901      	bls.n	8004d80 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e00e      	b.n	8004d9e <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8004d80:	2300      	movs	r3, #0
 8004d82:	e00c      	b.n	8004d9e <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8004d84:	883a      	ldrh	r2, [r7, #0]
 8004d86:	88fb      	ldrh	r3, [r7, #6]
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d907      	bls.n	8004d9c <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8004d8c:	887a      	ldrh	r2, [r7, #2]
 8004d8e:	883b      	ldrh	r3, [r7, #0]
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d901      	bls.n	8004d98 <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 8004d94:	2301      	movs	r3, #1
 8004d96:	e002      	b.n	8004d9e <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	e000      	b.n	8004d9e <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8004d9c:	2300      	movs	r3, #0
    }
  }
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3708      	adds	r7, #8
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bc90      	pop	{r4, r7}
 8004da6:	4770      	bx	lr

08004da8 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b084      	sub	sp, #16
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	4608      	mov	r0, r1
 8004db2:	4611      	mov	r1, r2
 8004db4:	461a      	mov	r2, r3
 8004db6:	4603      	mov	r3, r0
 8004db8:	817b      	strh	r3, [r7, #10]
 8004dba:	460b      	mov	r3, r1
 8004dbc:	813b      	strh	r3, [r7, #8]
 8004dbe:	4613      	mov	r3, r2
 8004dc0:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f8b3 004c 	ldrh.w	r0, [r3, #76]	; 0x4c
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f8b3 104e 	ldrh.w	r1, [r3, #78]	; 0x4e
 8004dce:	8b3b      	ldrh	r3, [r7, #24]
 8004dd0:	893a      	ldrh	r2, [r7, #8]
 8004dd2:	f7ff ffb6 	bl	8004d42 <u8g2_is_intersection_decision_tree>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d101      	bne.n	8004de0 <u8g2_IsIntersection+0x38>
    return 0; 
 8004ddc:	2300      	movs	r3, #0
 8004dde:	e00a      	b.n	8004df6 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f8b3 0048 	ldrh.w	r0, [r3, #72]	; 0x48
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
 8004dec:	88fb      	ldrh	r3, [r7, #6]
 8004dee:	897a      	ldrh	r2, [r7, #10]
 8004df0:	f7ff ffa7 	bl	8004d42 <u8g2_is_intersection_decision_tree>
 8004df4:	4603      	mov	r3, r0
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3710      	adds	r7, #16
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}

08004dfe <u8g2_DrawLine>:

#include "u8g2.h"


void u8g2_DrawLine(u8g2_t *u8g2, u8g2_uint_t x1, u8g2_uint_t y1, u8g2_uint_t x2, u8g2_uint_t y2)
{
 8004dfe:	b580      	push	{r7, lr}
 8004e00:	b088      	sub	sp, #32
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	60f8      	str	r0, [r7, #12]
 8004e06:	4608      	mov	r0, r1
 8004e08:	4611      	mov	r1, r2
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	817b      	strh	r3, [r7, #10]
 8004e10:	460b      	mov	r3, r1
 8004e12:	813b      	strh	r3, [r7, #8]
 8004e14:	4613      	mov	r3, r2
 8004e16:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t x,y;
  u8g2_uint_t dx, dy;
  u8g2_int_t err;
  u8g2_int_t ystep;

  uint8_t swapxy = 0;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	74fb      	strb	r3, [r7, #19]
  
  /* no intersection check at the moment, should be added... */

  if ( x1 > x2 ) dx = x1-x2; else dx = x2-x1;
 8004e1c:	897a      	ldrh	r2, [r7, #10]
 8004e1e:	88fb      	ldrh	r3, [r7, #6]
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d904      	bls.n	8004e2e <u8g2_DrawLine+0x30>
 8004e24:	897a      	ldrh	r2, [r7, #10]
 8004e26:	88fb      	ldrh	r3, [r7, #6]
 8004e28:	1ad3      	subs	r3, r2, r3
 8004e2a:	837b      	strh	r3, [r7, #26]
 8004e2c:	e003      	b.n	8004e36 <u8g2_DrawLine+0x38>
 8004e2e:	88fa      	ldrh	r2, [r7, #6]
 8004e30:	897b      	ldrh	r3, [r7, #10]
 8004e32:	1ad3      	subs	r3, r2, r3
 8004e34:	837b      	strh	r3, [r7, #26]
  if ( y1 > y2 ) dy = y1-y2; else dy = y2-y1;
 8004e36:	893a      	ldrh	r2, [r7, #8]
 8004e38:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d904      	bls.n	8004e48 <u8g2_DrawLine+0x4a>
 8004e3e:	893a      	ldrh	r2, [r7, #8]
 8004e40:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004e42:	1ad3      	subs	r3, r2, r3
 8004e44:	833b      	strh	r3, [r7, #24]
 8004e46:	e003      	b.n	8004e50 <u8g2_DrawLine+0x52>
 8004e48:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004e4a:	893b      	ldrh	r3, [r7, #8]
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	833b      	strh	r3, [r7, #24]

  if ( dy > dx ) 
 8004e50:	8b3a      	ldrh	r2, [r7, #24]
 8004e52:	8b7b      	ldrh	r3, [r7, #26]
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d913      	bls.n	8004e80 <u8g2_DrawLine+0x82>
  {
    swapxy = 1;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	74fb      	strb	r3, [r7, #19]
    tmp = dx; dx =dy; dy = tmp;
 8004e5c:	8b7b      	ldrh	r3, [r7, #26]
 8004e5e:	823b      	strh	r3, [r7, #16]
 8004e60:	8b3b      	ldrh	r3, [r7, #24]
 8004e62:	837b      	strh	r3, [r7, #26]
 8004e64:	8a3b      	ldrh	r3, [r7, #16]
 8004e66:	833b      	strh	r3, [r7, #24]
    tmp = x1; x1 =y1; y1 = tmp;
 8004e68:	897b      	ldrh	r3, [r7, #10]
 8004e6a:	823b      	strh	r3, [r7, #16]
 8004e6c:	893b      	ldrh	r3, [r7, #8]
 8004e6e:	817b      	strh	r3, [r7, #10]
 8004e70:	8a3b      	ldrh	r3, [r7, #16]
 8004e72:	813b      	strh	r3, [r7, #8]
    tmp = x2; x2 =y2; y2 = tmp;
 8004e74:	88fb      	ldrh	r3, [r7, #6]
 8004e76:	823b      	strh	r3, [r7, #16]
 8004e78:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004e7a:	80fb      	strh	r3, [r7, #6]
 8004e7c:	8a3b      	ldrh	r3, [r7, #16]
 8004e7e:	853b      	strh	r3, [r7, #40]	; 0x28
  }
  if ( x1 > x2 ) 
 8004e80:	897a      	ldrh	r2, [r7, #10]
 8004e82:	88fb      	ldrh	r3, [r7, #6]
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d90b      	bls.n	8004ea0 <u8g2_DrawLine+0xa2>
  {
    tmp = x1; x1 =x2; x2 = tmp;
 8004e88:	897b      	ldrh	r3, [r7, #10]
 8004e8a:	823b      	strh	r3, [r7, #16]
 8004e8c:	88fb      	ldrh	r3, [r7, #6]
 8004e8e:	817b      	strh	r3, [r7, #10]
 8004e90:	8a3b      	ldrh	r3, [r7, #16]
 8004e92:	80fb      	strh	r3, [r7, #6]
    tmp = y1; y1 =y2; y2 = tmp;
 8004e94:	893b      	ldrh	r3, [r7, #8]
 8004e96:	823b      	strh	r3, [r7, #16]
 8004e98:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004e9a:	813b      	strh	r3, [r7, #8]
 8004e9c:	8a3b      	ldrh	r3, [r7, #16]
 8004e9e:	853b      	strh	r3, [r7, #40]	; 0x28
  }
  err = dx >> 1;
 8004ea0:	8b7b      	ldrh	r3, [r7, #26]
 8004ea2:	085b      	lsrs	r3, r3, #1
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	82fb      	strh	r3, [r7, #22]
  if ( y2 > y1 ) ystep = 1; else ystep = -1;
 8004ea8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004eaa:	893b      	ldrh	r3, [r7, #8]
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d902      	bls.n	8004eb6 <u8g2_DrawLine+0xb8>
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	82bb      	strh	r3, [r7, #20]
 8004eb4:	e002      	b.n	8004ebc <u8g2_DrawLine+0xbe>
 8004eb6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004eba:	82bb      	strh	r3, [r7, #20]
  y = y1;
 8004ebc:	893b      	ldrh	r3, [r7, #8]
 8004ebe:	83bb      	strh	r3, [r7, #28]

#ifndef  U8G2_16BIT
  if ( x2 == 255 )
    x2--;
#else
  if ( x2 == 0xffff )
 8004ec0:	88fb      	ldrh	r3, [r7, #6]
 8004ec2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d102      	bne.n	8004ed0 <u8g2_DrawLine+0xd2>
    x2--;
 8004eca:	88fb      	ldrh	r3, [r7, #6]
 8004ecc:	3b01      	subs	r3, #1
 8004ece:	80fb      	strh	r3, [r7, #6]
#endif

  for( x = x1; x <= x2; x++ )
 8004ed0:	897b      	ldrh	r3, [r7, #10]
 8004ed2:	83fb      	strh	r3, [r7, #30]
 8004ed4:	e024      	b.n	8004f20 <u8g2_DrawLine+0x122>
  {
    if ( swapxy == 0 ) 
 8004ed6:	7cfb      	ldrb	r3, [r7, #19]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d106      	bne.n	8004eea <u8g2_DrawLine+0xec>
      u8g2_DrawPixel(u8g2, x, y); 
 8004edc:	8bba      	ldrh	r2, [r7, #28]
 8004ede:	8bfb      	ldrh	r3, [r7, #30]
 8004ee0:	4619      	mov	r1, r3
 8004ee2:	68f8      	ldr	r0, [r7, #12]
 8004ee4:	f7ff fefa 	bl	8004cdc <u8g2_DrawPixel>
 8004ee8:	e005      	b.n	8004ef6 <u8g2_DrawLine+0xf8>
    else 
      u8g2_DrawPixel(u8g2, y, x); 
 8004eea:	8bfa      	ldrh	r2, [r7, #30]
 8004eec:	8bbb      	ldrh	r3, [r7, #28]
 8004eee:	4619      	mov	r1, r3
 8004ef0:	68f8      	ldr	r0, [r7, #12]
 8004ef2:	f7ff fef3 	bl	8004cdc <u8g2_DrawPixel>
    err -= (u8g2_uint_t)dy;
 8004ef6:	8afa      	ldrh	r2, [r7, #22]
 8004ef8:	8b3b      	ldrh	r3, [r7, #24]
 8004efa:	1ad3      	subs	r3, r2, r3
 8004efc:	b29b      	uxth	r3, r3
 8004efe:	82fb      	strh	r3, [r7, #22]
    if ( err < 0 ) 
 8004f00:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	da08      	bge.n	8004f1a <u8g2_DrawLine+0x11c>
    {
      y += (u8g2_uint_t)ystep;
 8004f08:	8aba      	ldrh	r2, [r7, #20]
 8004f0a:	8bbb      	ldrh	r3, [r7, #28]
 8004f0c:	4413      	add	r3, r2
 8004f0e:	83bb      	strh	r3, [r7, #28]
      err += (u8g2_uint_t)dx;
 8004f10:	8afa      	ldrh	r2, [r7, #22]
 8004f12:	8b7b      	ldrh	r3, [r7, #26]
 8004f14:	4413      	add	r3, r2
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	82fb      	strh	r3, [r7, #22]
  for( x = x1; x <= x2; x++ )
 8004f1a:	8bfb      	ldrh	r3, [r7, #30]
 8004f1c:	3301      	adds	r3, #1
 8004f1e:	83fb      	strh	r3, [r7, #30]
 8004f20:	8bfa      	ldrh	r2, [r7, #30]
 8004f22:	88fb      	ldrh	r3, [r7, #6]
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d9d6      	bls.n	8004ed6 <u8g2_DrawLine+0xd8>
    }
  }
}
 8004f28:	bf00      	nop
 8004f2a:	bf00      	nop
 8004f2c:	3720      	adds	r7, #32
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}

08004f32 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8004f32:	b480      	push	{r7}
 8004f34:	b089      	sub	sp, #36	; 0x24
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	60f8      	str	r0, [r7, #12]
 8004f3a:	4608      	mov	r0, r1
 8004f3c:	4611      	mov	r1, r2
 8004f3e:	461a      	mov	r2, r3
 8004f40:	4603      	mov	r3, r0
 8004f42:	817b      	strh	r3, [r7, #10]
 8004f44:	460b      	mov	r3, r1
 8004f46:	813b      	strh	r3, [r7, #8]
 8004f48:	4613      	mov	r3, r2
 8004f4a:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 8004f4c:	893b      	ldrh	r3, [r7, #8]
 8004f4e:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8004f50:	7efb      	ldrb	r3, [r7, #27]
 8004f52:	f003 0307 	and.w	r3, r3, #7
 8004f56:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 8004f5c:	7e3a      	ldrb	r2, [r7, #24]
 8004f5e:	7efb      	ldrb	r3, [r7, #27]
 8004f60:	fa02 f303 	lsl.w	r3, r2, r3
 8004f64:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 8004f66:	2300      	movs	r3, #0
 8004f68:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d801      	bhi.n	8004f7c <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 8004f78:	7e3b      	ldrb	r3, [r7, #24]
 8004f7a:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d001      	beq.n	8004f8a <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 8004f86:	7e3b      	ldrb	r3, [r7, #24]
 8004f88:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8004f8a:	893b      	ldrh	r3, [r7, #8]
 8004f8c:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 8004f8e:	8afb      	ldrh	r3, [r7, #22]
 8004f90:	f023 0307 	bic.w	r3, r3, #7
 8004f94:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	7c1b      	ldrb	r3, [r3, #16]
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	8afa      	ldrh	r2, [r7, #22]
 8004fa0:	fb12 f303 	smulbb	r3, r2, r3
 8004fa4:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004faa:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 8004fac:	8afb      	ldrh	r3, [r7, #22]
 8004fae:	69fa      	ldr	r2, [r7, #28]
 8004fb0:	4413      	add	r3, r2
 8004fb2:	61fb      	str	r3, [r7, #28]
  ptr += x;
 8004fb4:	897b      	ldrh	r3, [r7, #10]
 8004fb6:	69fa      	ldr	r2, [r7, #28]
 8004fb8:	4413      	add	r3, r2
 8004fba:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 8004fbc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d117      	bne.n	8004ff4 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8004fc4:	69fb      	ldr	r3, [r7, #28]
 8004fc6:	781a      	ldrb	r2, [r3, #0]
 8004fc8:	7ebb      	ldrb	r3, [r7, #26]
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	b2da      	uxtb	r2, r3
 8004fce:	69fb      	ldr	r3, [r7, #28]
 8004fd0:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8004fd2:	69fb      	ldr	r3, [r7, #28]
 8004fd4:	781a      	ldrb	r2, [r3, #0]
 8004fd6:	7e7b      	ldrb	r3, [r7, #25]
 8004fd8:	4053      	eors	r3, r2
 8004fda:	b2da      	uxtb	r2, r3
 8004fdc:	69fb      	ldr	r3, [r7, #28]
 8004fde:	701a      	strb	r2, [r3, #0]
	ptr++;
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	3301      	adds	r3, #1
 8004fe4:	61fb      	str	r3, [r7, #28]
	len--;
 8004fe6:	88fb      	ldrh	r3, [r7, #6]
 8004fe8:	3b01      	subs	r3, #1
 8004fea:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 8004fec:	88fb      	ldrh	r3, [r7, #6]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d1e8      	bne.n	8004fc4 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8004ff2:	e038      	b.n	8005066 <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 8004ff4:	69fb      	ldr	r3, [r7, #28]
 8004ff6:	781a      	ldrb	r2, [r3, #0]
 8004ff8:	7ebb      	ldrb	r3, [r7, #26]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	b2da      	uxtb	r2, r3
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8005002:	69fb      	ldr	r3, [r7, #28]
 8005004:	781a      	ldrb	r2, [r3, #0]
 8005006:	7e7b      	ldrb	r3, [r7, #25]
 8005008:	4053      	eors	r3, r2
 800500a:	b2da      	uxtb	r2, r3
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 8005010:	7efb      	ldrb	r3, [r7, #27]
 8005012:	3301      	adds	r3, #1
 8005014:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 8005016:	7efb      	ldrb	r3, [r7, #27]
 8005018:	f003 0307 	and.w	r3, r3, #7
 800501c:	76fb      	strb	r3, [r7, #27]
      len--;
 800501e:	88fb      	ldrh	r3, [r7, #6]
 8005020:	3b01      	subs	r3, #1
 8005022:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 8005024:	7efb      	ldrb	r3, [r7, #27]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d114      	bne.n	8005054 <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800502e:	461a      	mov	r2, r3
 8005030:	69fb      	ldr	r3, [r7, #28]
 8005032:	4413      	add	r3, r2
 8005034:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 800503c:	2b01      	cmp	r3, #1
 800503e:	d801      	bhi.n	8005044 <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 8005040:	2301      	movs	r3, #1
 8005042:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 800504a:	2b01      	cmp	r3, #1
 800504c:	d008      	beq.n	8005060 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 800504e:	2301      	movs	r3, #1
 8005050:	767b      	strb	r3, [r7, #25]
 8005052:	e005      	b.n	8005060 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 8005054:	7ebb      	ldrb	r3, [r7, #26]
 8005056:	005b      	lsls	r3, r3, #1
 8005058:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 800505a:	7e7b      	ldrb	r3, [r7, #25]
 800505c:	005b      	lsls	r3, r3, #1
 800505e:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 8005060:	88fb      	ldrh	r3, [r7, #6]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d1c6      	bne.n	8004ff4 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 8005066:	bf00      	nop
 8005068:	3724      	adds	r7, #36	; 0x24
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr

08005072 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 8005072:	b580      	push	{r7, lr}
 8005074:	b082      	sub	sp, #8
 8005076:	af00      	add	r7, sp, #0
 8005078:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  u8g2->clip_y0 = 0;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005090:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800509a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  
  u8g2->cb->update_page_win(u8g2);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	4798      	blx	r3
}
 80050a8:	bf00      	nop
 80050aa:	3708      	adds	r7, #8
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b084      	sub	sp, #16
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	60f8      	str	r0, [r7, #12]
 80050b8:	60b9      	str	r1, [r7, #8]
 80050ba:	603b      	str	r3, [r7, #0]
 80050bc:	4613      	mov	r3, r2
 80050be:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2200      	movs	r2, #0
 80050c4:	659a      	str	r2, [r3, #88]	; 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	683a      	ldr	r2, [r7, #0]
 80050ca:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	68ba      	ldr	r2, [r7, #8]
 80050d0:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	79fa      	ldrb	r2, [r7, #7]
 80050d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  u8g2->tile_curr_row = 0;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2200      	movs	r2, #0
 80050de:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2200      	movs	r2, #0
 80050e6:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
  u8g2->bitmap_transparency = 0;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2200      	movs	r2, #0
 80050ee:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  
  u8g2->font_height_mode = 0; /* issue 2046 */
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2200      	movs	r2, #0
 80050f6:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
  u8g2->draw_color = 1;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2201      	movs	r2, #1
 80050fe:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  u8g2->is_auto_page_clear = 1;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2201      	movs	r2, #1
 8005106:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
  
  u8g2->cb = u8g2_cb;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	69ba      	ldr	r2, [r7, #24]
 800510e:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	68f8      	ldr	r0, [r7, #12]
 8005118:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 800511a:	68f8      	ldr	r0, [r7, #12]
 800511c:	f7ff ffa9 	bl	8005072 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8005120:	68f8      	ldr	r0, [r7, #12]
 8005122:	f7ff fcb7 	bl	8004a94 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2200      	movs	r2, #0
 800512a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
#endif
}
 800512e:	bf00      	nop
 8005130:	3710      	adds	r7, #16
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}

08005136 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8005136:	b480      	push	{r7}
 8005138:	b085      	sub	sp, #20
 800513a:	af00      	add	r7, sp, #0
 800513c:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800514a:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 800514c:	89fb      	ldrh	r3, [r7, #14]
 800514e:	00db      	lsls	r3, r3, #3
 8005150:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	89fa      	ldrh	r2, [r7, #14]
 8005156:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  t = display_info->tile_width;
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	7c1b      	ldrb	r3, [r3, #16]
 800515c:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 800515e:	89fb      	ldrh	r3, [r7, #14]
 8005160:	00db      	lsls	r3, r3, #3
 8005162:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	89fa      	ldrh	r2, [r7, #14]
 8005168:	875a      	strh	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005170:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8005172:	89fb      	ldrh	r3, [r7, #14]
 8005174:	00db      	lsls	r3, r3, #3
 8005176:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	89fa      	ldrh	r2, [r7, #14]
 800517c:	87da      	strh	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_buf_height;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005184:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 8005186:	89fb      	ldrh	r3, [r7, #14]
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 800518e:	4413      	add	r3, r2
 8005190:	68ba      	ldr	r2, [r7, #8]
 8005192:	7c52      	ldrb	r2, [r2, #17]
 8005194:	4293      	cmp	r3, r2
 8005196:	dd08      	ble.n	80051aa <u8g2_update_dimension_common+0x74>
    t = display_info->tile_height - u8g2->tile_curr_row;
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	7c5b      	ldrb	r3, [r3, #17]
 800519c:	b29a      	uxth	r2, r3
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	1ad3      	subs	r3, r2, r3
 80051a8:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 80051aa:	89fb      	ldrh	r3, [r7, #14]
 80051ac:	00db      	lsls	r3, r3, #3
 80051ae:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  u8g2->buf_y1 += t;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 80051cc:	89fb      	ldrh	r3, [r7, #14]
 80051ce:	4413      	add	r3, r2
 80051d0:	b29a      	uxth	r2, r3
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	8a9a      	ldrh	r2, [r3, #20]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  u8g2->height = display_info->pixel_height;
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	8ada      	ldrh	r2, [r3, #22]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 80051ec:	bf00      	nop
 80051ee:	3714      	adds	r7, #20
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr

080051f8 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b084      	sub	sp, #16
 80051fc:	af02      	add	r7, sp, #8
 80051fe:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f8b3 0052 	ldrh.w	r0, [r3, #82]	; 0x52
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005218:	9300      	str	r3, [sp, #0]
 800521a:	4603      	mov	r3, r0
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f7ff fdc3 	bl	8004da8 <u8g2_IsIntersection>
 8005222:	4603      	mov	r3, r0
 8005224:	2b00      	cmp	r3, #0
 8005226:	d104      	bne.n	8005232 <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2200      	movs	r2, #0
 800522c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 8005230:	e03b      	b.n	80052aa <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2201      	movs	r2, #1
 8005236:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005246:	429a      	cmp	r2, r3
 8005248:	d205      	bcs.n	8005256 <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005262:	429a      	cmp	r2, r3
 8005264:	d905      	bls.n	8005272 <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800527e:	429a      	cmp	r2, r3
 8005280:	d205      	bcs.n	800528e <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800529a:	429a      	cmp	r2, r3
 800529c:	d905      	bls.n	80052aa <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
}
 80052aa:	bf00      	nop
 80052ac:	3708      	adds	r7, #8
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}

080052b2 <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 80052b2:	b580      	push	{r7, lr}
 80052b4:	b082      	sub	sp, #8
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f7ff ff3b 	bl	8005136 <u8g2_update_dimension_common>
}
 80052c0:	bf00      	nop
 80052c2:	3708      	adds	r7, #8
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}

080052c8 <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b082      	sub	sp, #8
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2200      	movs	r2, #0
 80052d4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  
  u8g2->user_y0 = u8g2->buf_y0;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  u8g2->user_y1 = u8g2->buf_y1;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f7ff ff7b 	bl	80051f8 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8005302:	bf00      	nop
 8005304:	3708      	adds	r7, #8
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}

0800530a <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800530a:	b580      	push	{r7, lr}
 800530c:	b086      	sub	sp, #24
 800530e:	af02      	add	r7, sp, #8
 8005310:	60f8      	str	r0, [r7, #12]
 8005312:	4608      	mov	r0, r1
 8005314:	4611      	mov	r1, r2
 8005316:	461a      	mov	r2, r3
 8005318:	4603      	mov	r3, r0
 800531a:	817b      	strh	r3, [r7, #10]
 800531c:	460b      	mov	r3, r1
 800531e:	813b      	strh	r3, [r7, #8]
 8005320:	4613      	mov	r3, r2
 8005322:	80fb      	strh	r3, [r7, #6]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 8005324:	88f8      	ldrh	r0, [r7, #6]
 8005326:	893a      	ldrh	r2, [r7, #8]
 8005328:	8979      	ldrh	r1, [r7, #10]
 800532a:	7e3b      	ldrb	r3, [r7, #24]
 800532c:	9300      	str	r3, [sp, #0]
 800532e:	4603      	mov	r3, r0
 8005330:	68f8      	ldr	r0, [r7, #12]
 8005332:	f7ff fc27 	bl	8004b84 <u8g2_draw_hv_line_2dir>
}
 8005336:	bf00      	nop
 8005338:	3710      	adds	r7, #16
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}

0800533e <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 800533e:	b480      	push	{r7}
 8005340:	b083      	sub	sp, #12
 8005342:	af00      	add	r7, sp, #0
 8005344:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 800534e:	bf00      	nop
 8005350:	370c      	adds	r7, #12
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr

0800535a <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 800535a:	b480      	push	{r7}
 800535c:	b083      	sub	sp, #12
 800535e:	af00      	add	r7, sp, #0
 8005360:	6078      	str	r0, [r7, #4]
 8005362:	460b      	mov	r3, r1
 8005364:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8005366:	78fb      	ldrb	r3, [r7, #3]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d002      	beq.n	8005372 <u8x8_ascii_next+0x18>
 800536c:	78fb      	ldrb	r3, [r7, #3]
 800536e:	2b0a      	cmp	r3, #10
 8005370:	d102      	bne.n	8005378 <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 8005372:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005376:	e001      	b.n	800537c <u8x8_ascii_next+0x22>
  return b;
 8005378:	78fb      	ldrb	r3, [r7, #3]
 800537a:	b29b      	uxth	r3, r3
}
 800537c:	4618      	mov	r0, r3
 800537e:	370c      	adds	r7, #12
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr

08005388 <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 8005388:	b590      	push	{r4, r7, lr}
 800538a:	b083      	sub	sp, #12
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	460b      	mov	r3, r1
 8005392:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	691c      	ldr	r4, [r3, #16]
 8005398:	78fa      	ldrb	r2, [r7, #3]
 800539a:	2300      	movs	r3, #0
 800539c:	2120      	movs	r1, #32
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	47a0      	blx	r4
 80053a2:	4603      	mov	r3, r0
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	370c      	adds	r7, #12
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd90      	pop	{r4, r7, pc}

080053ac <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 80053ac:	b590      	push	{r4, r7, lr}
 80053ae:	b085      	sub	sp, #20
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	60f8      	str	r0, [r7, #12]
 80053b4:	460b      	mov	r3, r1
 80053b6:	607a      	str	r2, [r7, #4]
 80053b8:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	691c      	ldr	r4, [r3, #16]
 80053be:	7afa      	ldrb	r2, [r7, #11]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2117      	movs	r1, #23
 80053c4:	68f8      	ldr	r0, [r7, #12]
 80053c6:	47a0      	blx	r4
 80053c8:	4603      	mov	r3, r0
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3714      	adds	r7, #20
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd90      	pop	{r4, r7, pc}

080053d2 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 80053d2:	b580      	push	{r7, lr}
 80053d4:	b082      	sub	sp, #8
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6078      	str	r0, [r7, #4]
 80053da:	460b      	mov	r3, r1
 80053dc:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 80053de:	1cfb      	adds	r3, r7, #3
 80053e0:	461a      	mov	r2, r3
 80053e2:	2101      	movs	r1, #1
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f7ff ffe1 	bl	80053ac <u8x8_byte_SendBytes>
 80053ea:	4603      	mov	r3, r0
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3708      	adds	r7, #8
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}

080053f4 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 80053f4:	b590      	push	{r4, r7, lr}
 80053f6:	b083      	sub	sp, #12
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	460b      	mov	r3, r1
 80053fe:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	68dc      	ldr	r4, [r3, #12]
 8005404:	78fa      	ldrb	r2, [r7, #3]
 8005406:	2300      	movs	r3, #0
 8005408:	2115      	movs	r1, #21
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	47a0      	blx	r4
 800540e:	4603      	mov	r3, r0
}
 8005410:	4618      	mov	r0, r3
 8005412:	370c      	adds	r7, #12
 8005414:	46bd      	mov	sp, r7
 8005416:	bd90      	pop	{r4, r7, pc}

08005418 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8005418:	b590      	push	{r4, r7, lr}
 800541a:	b083      	sub	sp, #12
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	460b      	mov	r3, r1
 8005422:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	68dc      	ldr	r4, [r3, #12]
 8005428:	78fa      	ldrb	r2, [r7, #3]
 800542a:	2300      	movs	r3, #0
 800542c:	2116      	movs	r1, #22
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	47a0      	blx	r4
 8005432:	4603      	mov	r3, r0
}
 8005434:	4618      	mov	r0, r3
 8005436:	370c      	adds	r7, #12
 8005438:	46bd      	mov	sp, r7
 800543a:	bd90      	pop	{r4, r7, pc}

0800543c <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 800543c:	b590      	push	{r4, r7, lr}
 800543e:	b085      	sub	sp, #20
 8005440:	af00      	add	r7, sp, #0
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	460b      	mov	r3, r1
 8005446:	607a      	str	r2, [r7, #4]
 8005448:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	68dc      	ldr	r4, [r3, #12]
 800544e:	7afa      	ldrb	r2, [r7, #11]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2117      	movs	r1, #23
 8005454:	68f8      	ldr	r0, [r7, #12]
 8005456:	47a0      	blx	r4
 8005458:	4603      	mov	r3, r0
}
 800545a:	4618      	mov	r0, r3
 800545c:	3714      	adds	r7, #20
 800545e:	46bd      	mov	sp, r7
 8005460:	bd90      	pop	{r4, r7, pc}

08005462 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8005462:	b590      	push	{r4, r7, lr}
 8005464:	b083      	sub	sp, #12
 8005466:	af00      	add	r7, sp, #0
 8005468:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	68dc      	ldr	r4, [r3, #12]
 800546e:	2300      	movs	r3, #0
 8005470:	2200      	movs	r2, #0
 8005472:	2118      	movs	r1, #24
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	47a0      	blx	r4
 8005478:	4603      	mov	r3, r0
}
 800547a:	4618      	mov	r0, r3
 800547c:	370c      	adds	r7, #12
 800547e:	46bd      	mov	sp, r7
 8005480:	bd90      	pop	{r4, r7, pc}

08005482 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8005482:	b590      	push	{r4, r7, lr}
 8005484:	b083      	sub	sp, #12
 8005486:	af00      	add	r7, sp, #0
 8005488:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	68dc      	ldr	r4, [r3, #12]
 800548e:	2300      	movs	r3, #0
 8005490:	2200      	movs	r2, #0
 8005492:	2119      	movs	r1, #25
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	47a0      	blx	r4
 8005498:	4603      	mov	r3, r0
}
 800549a:	4618      	mov	r0, r3
 800549c:	370c      	adds	r7, #12
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd90      	pop	{r4, r7, pc}

080054a2 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 80054a2:	b590      	push	{r4, r7, lr}
 80054a4:	b085      	sub	sp, #20
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	6078      	str	r0, [r7, #4]
 80054aa:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	781b      	ldrb	r3, [r3, #0]
 80054b0:	73fb      	strb	r3, [r7, #15]
    data++;
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	3301      	adds	r3, #1
 80054b6:	603b      	str	r3, [r7, #0]
    switch( cmd )
 80054b8:	7bfb      	ldrb	r3, [r7, #15]
 80054ba:	2bfe      	cmp	r3, #254	; 0xfe
 80054bc:	d031      	beq.n	8005522 <u8x8_cad_SendSequence+0x80>
 80054be:	2bfe      	cmp	r3, #254	; 0xfe
 80054c0:	dc3d      	bgt.n	800553e <u8x8_cad_SendSequence+0x9c>
 80054c2:	2b19      	cmp	r3, #25
 80054c4:	dc3b      	bgt.n	800553e <u8x8_cad_SendSequence+0x9c>
 80054c6:	2b18      	cmp	r3, #24
 80054c8:	da23      	bge.n	8005512 <u8x8_cad_SendSequence+0x70>
 80054ca:	2b16      	cmp	r3, #22
 80054cc:	dc02      	bgt.n	80054d4 <u8x8_cad_SendSequence+0x32>
 80054ce:	2b15      	cmp	r3, #21
 80054d0:	da03      	bge.n	80054da <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 80054d2:	e034      	b.n	800553e <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 80054d4:	2b17      	cmp	r3, #23
 80054d6:	d00e      	beq.n	80054f6 <u8x8_cad_SendSequence+0x54>
	return;
 80054d8:	e031      	b.n	800553e <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	68dc      	ldr	r4, [r3, #12]
 80054e4:	7bba      	ldrb	r2, [r7, #14]
 80054e6:	7bf9      	ldrb	r1, [r7, #15]
 80054e8:	2300      	movs	r3, #0
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	47a0      	blx	r4
	  data++;
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	3301      	adds	r3, #1
 80054f2:	603b      	str	r3, [r7, #0]
	  break;
 80054f4:	e022      	b.n	800553c <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	781b      	ldrb	r3, [r3, #0]
 80054fa:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 80054fc:	f107 030e 	add.w	r3, r7, #14
 8005500:	461a      	mov	r2, r3
 8005502:	2101      	movs	r1, #1
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f7ff ff99 	bl	800543c <u8x8_cad_SendData>
	  data++;
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	3301      	adds	r3, #1
 800550e:	603b      	str	r3, [r7, #0]
	  break;
 8005510:	e014      	b.n	800553c <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	68dc      	ldr	r4, [r3, #12]
 8005516:	7bf9      	ldrb	r1, [r7, #15]
 8005518:	2300      	movs	r3, #0
 800551a:	2200      	movs	r2, #0
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	47a0      	blx	r4
	  break;
 8005520:	e00c      	b.n	800553c <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8005528:	7bbb      	ldrb	r3, [r7, #14]
 800552a:	461a      	mov	r2, r3
 800552c:	2129      	movs	r1, #41	; 0x29
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f000 f9d5 	bl	80058de <u8x8_gpio_call>
	  data++;
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	3301      	adds	r3, #1
 8005538:	603b      	str	r3, [r7, #0]
	  break;
 800553a:	bf00      	nop
    cmd = *data;
 800553c:	e7b6      	b.n	80054ac <u8x8_cad_SendSequence+0xa>
	return;
 800553e:	bf00      	nop
    }
  }
}
 8005540:	3714      	adds	r7, #20
 8005542:	46bd      	mov	sp, r7
 8005544:	bd90      	pop	{r4, r7, pc}
	...

08005548 <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8005548:	b590      	push	{r4, r7, lr}
 800554a:	b085      	sub	sp, #20
 800554c:	af00      	add	r7, sp, #0
 800554e:	60f8      	str	r0, [r7, #12]
 8005550:	607b      	str	r3, [r7, #4]
 8005552:	460b      	mov	r3, r1
 8005554:	72fb      	strb	r3, [r7, #11]
 8005556:	4613      	mov	r3, r2
 8005558:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 800555a:	7afb      	ldrb	r3, [r7, #11]
 800555c:	3b14      	subs	r3, #20
 800555e:	2b05      	cmp	r3, #5
 8005560:	d82f      	bhi.n	80055c2 <u8x8_cad_001+0x7a>
 8005562:	a201      	add	r2, pc, #4	; (adr r2, 8005568 <u8x8_cad_001+0x20>)
 8005564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005568:	080055b1 	.word	0x080055b1
 800556c:	08005581 	.word	0x08005581
 8005570:	08005595 	.word	0x08005595
 8005574:	080055a9 	.word	0x080055a9
 8005578:	080055b1 	.word	0x080055b1
 800557c:	080055b1 	.word	0x080055b1
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 8005580:	2100      	movs	r1, #0
 8005582:	68f8      	ldr	r0, [r7, #12]
 8005584:	f7ff ff00 	bl	8005388 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8005588:	7abb      	ldrb	r3, [r7, #10]
 800558a:	4619      	mov	r1, r3
 800558c:	68f8      	ldr	r0, [r7, #12]
 800558e:	f7ff ff20 	bl	80053d2 <u8x8_byte_SendByte>
      break;
 8005592:	e018      	b.n	80055c6 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
 8005594:	2100      	movs	r1, #0
 8005596:	68f8      	ldr	r0, [r7, #12]
 8005598:	f7ff fef6 	bl	8005388 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 800559c:	7abb      	ldrb	r3, [r7, #10]
 800559e:	4619      	mov	r1, r3
 80055a0:	68f8      	ldr	r0, [r7, #12]
 80055a2:	f7ff ff16 	bl	80053d2 <u8x8_byte_SendByte>
      break;
 80055a6:	e00e      	b.n	80055c6 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 80055a8:	2101      	movs	r1, #1
 80055aa:	68f8      	ldr	r0, [r7, #12]
 80055ac:	f7ff feec 	bl	8005388 <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	691c      	ldr	r4, [r3, #16]
 80055b4:	7aba      	ldrb	r2, [r7, #10]
 80055b6:	7af9      	ldrb	r1, [r7, #11]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	68f8      	ldr	r0, [r7, #12]
 80055bc:	47a0      	blx	r4
 80055be:	4603      	mov	r3, r0
 80055c0:	e002      	b.n	80055c8 <u8x8_cad_001+0x80>
    default:
      return 0;
 80055c2:	2300      	movs	r3, #0
 80055c4:	e000      	b.n	80055c8 <u8x8_cad_001+0x80>
  }
  return 1;
 80055c6:	2301      	movs	r3, #1
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3714      	adds	r7, #20
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd90      	pop	{r4, r7, pc}

080055d0 <u8x8_d_sh1107_generic>:
  }
  return 1;
}

static uint8_t u8x8_d_sh1107_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b086      	sub	sp, #24
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	60f8      	str	r0, [r7, #12]
 80055d8:	607b      	str	r3, [r7, #4]
 80055da:	460b      	mov	r3, r1
 80055dc:	72fb      	strb	r3, [r7, #11]
 80055de:	4613      	mov	r3, r2
 80055e0:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 80055e2:	7afb      	ldrb	r3, [r7, #11]
 80055e4:	3b0b      	subs	r3, #11
 80055e6:	2b04      	cmp	r3, #4
 80055e8:	f200 8086 	bhi.w	80056f8 <u8x8_d_sh1107_generic+0x128>
 80055ec:	a201      	add	r2, pc, #4	; (adr r2, 80055f4 <u8x8_d_sh1107_generic+0x24>)
 80055ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055f2:	bf00      	nop
 80055f4:	08005609 	.word	0x08005609
 80055f8:	080056f9 	.word	0x080056f9
 80055fc:	08005623 	.word	0x08005623
 8005600:	08005655 	.word	0x08005655
 8005604:	08005675 	.word	0x08005675
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_sh1107_64x128_noname_init_seq);    
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8005608:	7abb      	ldrb	r3, [r7, #10]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d104      	bne.n	8005618 <u8x8_d_sh1107_generic+0x48>
	u8x8_cad_SendSequence(u8x8, u8x8_d_sh1107_64x128_noname_powersave0_seq);
 800560e:	493e      	ldr	r1, [pc, #248]	; (8005708 <u8x8_d_sh1107_generic+0x138>)
 8005610:	68f8      	ldr	r0, [r7, #12]
 8005612:	f7ff ff46 	bl	80054a2 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_sh1107_64x128_noname_powersave1_seq);
      break;
 8005616:	e071      	b.n	80056fc <u8x8_d_sh1107_generic+0x12c>
	u8x8_cad_SendSequence(u8x8, u8x8_d_sh1107_64x128_noname_powersave1_seq);
 8005618:	493c      	ldr	r1, [pc, #240]	; (800570c <u8x8_d_sh1107_generic+0x13c>)
 800561a:	68f8      	ldr	r0, [r7, #12]
 800561c:	f7ff ff41 	bl	80054a2 <u8x8_cad_SendSequence>
      break;
 8005620:	e06c      	b.n	80056fc <u8x8_d_sh1107_generic+0x12c>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 8005622:	7abb      	ldrb	r3, [r7, #10]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d10a      	bne.n	800563e <u8x8_d_sh1107_generic+0x6e>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_sh1107_64x128_noname_flip0_seq);
 8005628:	4939      	ldr	r1, [pc, #228]	; (8005710 <u8x8_d_sh1107_generic+0x140>)
 800562a:	68f8      	ldr	r0, [r7, #12]
 800562c:	f7ff ff39 	bl	80054a2 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	7c9a      	ldrb	r2, [r3, #18]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_sh1107_64x128_noname_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 800563c:	e05e      	b.n	80056fc <u8x8_d_sh1107_generic+0x12c>
	u8x8_cad_SendSequence(u8x8, u8x8_d_sh1107_64x128_noname_flip1_seq);
 800563e:	4935      	ldr	r1, [pc, #212]	; (8005714 <u8x8_d_sh1107_generic+0x144>)
 8005640:	68f8      	ldr	r0, [r7, #12]
 8005642:	f7ff ff2e 	bl	80054a2 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	7cda      	ldrb	r2, [r3, #19]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      break;
 8005652:	e053      	b.n	80056fc <u8x8_d_sh1107_generic+0x12c>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8005654:	68f8      	ldr	r0, [r7, #12]
 8005656:	f7ff ff04 	bl	8005462 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 800565a:	2181      	movs	r1, #129	; 0x81
 800565c:	68f8      	ldr	r0, [r7, #12]
 800565e:	f7ff fec9 	bl	80053f4 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* sh1107 has range from 0 to 255 */
 8005662:	7abb      	ldrb	r3, [r7, #10]
 8005664:	4619      	mov	r1, r3
 8005666:	68f8      	ldr	r0, [r7, #12]
 8005668:	f7ff fed6 	bl	8005418 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 800566c:	68f8      	ldr	r0, [r7, #12]
 800566e:	f7ff ff08 	bl	8005482 <u8x8_cad_EndTransfer>
      break;
 8005672:	e043      	b.n	80056fc <u8x8_d_sh1107_generic+0x12c>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 8005674:	68f8      	ldr	r0, [r7, #12]
 8005676:	f7ff fef4 	bl	8005462 <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	795b      	ldrb	r3, [r3, #5]
 800567e:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 8005680:	7dfb      	ldrb	r3, [r7, #23]
 8005682:	00db      	lsls	r3, r3, #3
 8005684:	75fb      	strb	r3, [r7, #23]
      x += u8x8->x_offset;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800568c:	7dfb      	ldrb	r3, [r7, #23]
 800568e:	4413      	add	r3, r2
 8005690:	75fb      	strb	r3, [r7, #23]

      //u8x8_cad_SendCmd(u8x8, 0x040 ); /* set line offset to 0 */

      // set column address
      u8x8_cad_SendCmd(u8x8, 0x010 | (x >> 4));
 8005692:	7dfb      	ldrb	r3, [r7, #23]
 8005694:	091b      	lsrs	r3, r3, #4
 8005696:	b2db      	uxtb	r3, r3
 8005698:	f043 0310 	orr.w	r3, r3, #16
 800569c:	b2db      	uxtb	r3, r3
 800569e:	4619      	mov	r1, r3
 80056a0:	68f8      	ldr	r0, [r7, #12]
 80056a2:	f7ff fea7 	bl	80053f4 <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x000 | ((x & 15))); /* probably wrong, should be SendCmd */
 80056a6:	7dfb      	ldrb	r3, [r7, #23]
 80056a8:	f003 030f 	and.w	r3, r3, #15
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	4619      	mov	r1, r3
 80056b0:	68f8      	ldr	r0, [r7, #12]
 80056b2:	f7ff fe9f 	bl	80053f4 <u8x8_cad_SendCmd>
      
      // set page address
      u8x8_cad_SendCmd(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos)); /* probably wrong, should be SendCmd */
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	799b      	ldrb	r3, [r3, #6]
 80056ba:	f063 034f 	orn	r3, r3, #79	; 0x4f
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	4619      	mov	r1, r3
 80056c2:	68f8      	ldr	r0, [r7, #12]
 80056c4:	f7ff fe96 	bl	80053f4 <u8x8_cad_SendCmd>
    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	791b      	ldrb	r3, [r3, #4]
 80056cc:	75bb      	strb	r3, [r7, #22]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	613b      	str	r3, [r7, #16]
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 80056d4:	7dbb      	ldrb	r3, [r7, #22]
 80056d6:	00db      	lsls	r3, r3, #3
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	693a      	ldr	r2, [r7, #16]
 80056dc:	4619      	mov	r1, r3
 80056de:	68f8      	ldr	r0, [r7, #12]
 80056e0:	f7ff feac 	bl	800543c <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 80056e4:	7abb      	ldrb	r3, [r7, #10]
 80056e6:	3b01      	subs	r3, #1
 80056e8:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 80056ea:	7abb      	ldrb	r3, [r7, #10]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d1eb      	bne.n	80056c8 <u8x8_d_sh1107_generic+0xf8>
      
      u8x8_cad_EndTransfer(u8x8);
 80056f0:	68f8      	ldr	r0, [r7, #12]
 80056f2:	f7ff fec6 	bl	8005482 <u8x8_cad_EndTransfer>
      break;
 80056f6:	e001      	b.n	80056fc <u8x8_d_sh1107_generic+0x12c>
    default:
      return 0;
 80056f8:	2300      	movs	r3, #0
 80056fa:	e000      	b.n	80056fe <u8x8_d_sh1107_generic+0x12e>
  }
  return 1;
 80056fc:	2301      	movs	r3, #1
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3718      	adds	r7, #24
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}
 8005706:	bf00      	nop
 8005708:	08006aec 	.word	0x08006aec
 800570c:	08006af4 	.word	0x08006af4
 8005710:	08006afc 	.word	0x08006afc
 8005714:	08006b04 	.word	0x08006b04

08005718 <u8x8_d_sh1107_pimoroni_128x128>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 128
};

uint8_t u8x8_d_sh1107_pimoroni_128x128(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b084      	sub	sp, #16
 800571c:	af00      	add	r7, sp, #0
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	607b      	str	r3, [r7, #4]
 8005722:	460b      	mov	r3, r1
 8005724:	72fb      	strb	r3, [r7, #11]
 8005726:	4613      	mov	r3, r2
 8005728:	72bb      	strb	r3, [r7, #10]
    
  if ( u8x8_d_sh1107_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 800572a:	7aba      	ldrb	r2, [r7, #10]
 800572c:	7af9      	ldrb	r1, [r7, #11]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	68f8      	ldr	r0, [r7, #12]
 8005732:	f7ff ff4d 	bl	80055d0 <u8x8_d_sh1107_generic>
 8005736:	4603      	mov	r3, r0
 8005738:	2b00      	cmp	r3, #0
 800573a:	d001      	beq.n	8005740 <u8x8_d_sh1107_pimoroni_128x128+0x28>
    return 1;
 800573c:	2301      	movs	r3, #1
 800573e:	e014      	b.n	800576a <u8x8_d_sh1107_pimoroni_128x128+0x52>
  
  switch(msg)
 8005740:	7afb      	ldrb	r3, [r7, #11]
 8005742:	2b09      	cmp	r3, #9
 8005744:	d009      	beq.n	800575a <u8x8_d_sh1107_pimoroni_128x128+0x42>
 8005746:	2b0a      	cmp	r3, #10
 8005748:	d10c      	bne.n	8005764 <u8x8_d_sh1107_pimoroni_128x128+0x4c>
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 800574a:	68f8      	ldr	r0, [r7, #12]
 800574c:	f000 f82a 	bl	80057a4 <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_sh1107_128x128_init_seq);    
 8005750:	4908      	ldr	r1, [pc, #32]	; (8005774 <u8x8_d_sh1107_pimoroni_128x128+0x5c>)
 8005752:	68f8      	ldr	r0, [r7, #12]
 8005754:	f7ff fea5 	bl	80054a2 <u8x8_cad_SendSequence>
      break;
 8005758:	e006      	b.n	8005768 <u8x8_d_sh1107_pimoroni_128x128+0x50>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_sh1107_pimoroni_128x128_display_info);
 800575a:	4907      	ldr	r1, [pc, #28]	; (8005778 <u8x8_d_sh1107_pimoroni_128x128+0x60>)
 800575c:	68f8      	ldr	r0, [r7, #12]
 800575e:	f000 f80d 	bl	800577c <u8x8_d_helper_display_setup_memory>
      break;
 8005762:	e001      	b.n	8005768 <u8x8_d_sh1107_pimoroni_128x128+0x50>
    default:
      return 0;
 8005764:	2300      	movs	r3, #0
 8005766:	e000      	b.n	800576a <u8x8_d_sh1107_pimoroni_128x128+0x52>
  }
  return 1;
 8005768:	2301      	movs	r3, #1
}
 800576a:	4618      	mov	r0, r3
 800576c:	3710      	adds	r7, #16
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
 8005772:	bf00      	nop
 8005774:	08006b0c 	.word	0x08006b0c
 8005778:	08006b3c 	.word	0x08006b3c

0800577c <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 800577c:	b480      	push	{r7}
 800577e:	b083      	sub	sp, #12
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
 8005784:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	683a      	ldr	r2, [r7, #0]
 800578a:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	7c9a      	ldrb	r2, [r3, #18]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8005798:	bf00      	nop
 800579a:	370c      	adds	r7, #12
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr

080057a4 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 80057a4:	b590      	push	{r4, r7, lr}
 80057a6:	b083      	sub	sp, #12
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	695c      	ldr	r4, [r3, #20]
 80057b0:	2300      	movs	r3, #0
 80057b2:	2200      	movs	r2, #0
 80057b4:	2128      	movs	r1, #40	; 0x28
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	68dc      	ldr	r4, [r3, #12]
 80057be:	2300      	movs	r3, #0
 80057c0:	2200      	movs	r2, #0
 80057c2:	2114      	movs	r1, #20
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 80057c8:	2201      	movs	r2, #1
 80057ca:	214b      	movs	r1, #75	; 0x4b
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f000 f886 	bl	80058de <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	791b      	ldrb	r3, [r3, #4]
 80057d8:	461a      	mov	r2, r3
 80057da:	2129      	movs	r1, #41	; 0x29
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f000 f87e 	bl	80058de <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 80057e2:	2200      	movs	r2, #0
 80057e4:	214b      	movs	r1, #75	; 0x4b
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f000 f879 	bl	80058de <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	791b      	ldrb	r3, [r3, #4]
 80057f2:	461a      	mov	r2, r3
 80057f4:	2129      	movs	r1, #41	; 0x29
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f000 f871 	bl	80058de <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 80057fc:	2201      	movs	r2, #1
 80057fe:	214b      	movs	r1, #75	; 0x4b
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f000 f86c 	bl	80058de <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	795b      	ldrb	r3, [r3, #5]
 800580c:	461a      	mov	r2, r3
 800580e:	2129      	movs	r1, #41	; 0x29
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f000 f864 	bl	80058de <u8x8_gpio_call>
}    
 8005816:	bf00      	nop
 8005818:	370c      	adds	r7, #12
 800581a:	46bd      	mov	sp, r7
 800581c:	bd90      	pop	{r4, r7, pc}

0800581e <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 800581e:	b590      	push	{r4, r7, lr}
 8005820:	b085      	sub	sp, #20
 8005822:	af00      	add	r7, sp, #0
 8005824:	6078      	str	r0, [r7, #4]
 8005826:	4608      	mov	r0, r1
 8005828:	4611      	mov	r1, r2
 800582a:	461a      	mov	r2, r3
 800582c:	4603      	mov	r3, r0
 800582e:	70fb      	strb	r3, [r7, #3]
 8005830:	460b      	mov	r3, r1
 8005832:	70bb      	strb	r3, [r7, #2]
 8005834:	4613      	mov	r3, r2
 8005836:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 8005838:	78fb      	ldrb	r3, [r7, #3]
 800583a:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 800583c:	78bb      	ldrb	r3, [r7, #2]
 800583e:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 8005840:	787b      	ldrb	r3, [r7, #1]
 8005842:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 8005844:	6a3b      	ldr	r3, [r7, #32]
 8005846:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	689c      	ldr	r4, [r3, #8]
 800584c:	f107 0308 	add.w	r3, r7, #8
 8005850:	2201      	movs	r2, #1
 8005852:	210f      	movs	r1, #15
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	47a0      	blx	r4
 8005858:	4603      	mov	r3, r0
}
 800585a:	4618      	mov	r0, r3
 800585c:	3714      	adds	r7, #20
 800585e:	46bd      	mov	sp, r7
 8005860:	bd90      	pop	{r4, r7, pc}

08005862 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 8005862:	b590      	push	{r4, r7, lr}
 8005864:	b083      	sub	sp, #12
 8005866:	af00      	add	r7, sp, #0
 8005868:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	689c      	ldr	r4, [r3, #8]
 800586e:	2300      	movs	r3, #0
 8005870:	2200      	movs	r2, #0
 8005872:	2109      	movs	r1, #9
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	47a0      	blx	r4
}
 8005878:	bf00      	nop
 800587a:	370c      	adds	r7, #12
 800587c:	46bd      	mov	sp, r7
 800587e:	bd90      	pop	{r4, r7, pc}

08005880 <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 8005880:	b590      	push	{r4, r7, lr}
 8005882:	b083      	sub	sp, #12
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	689c      	ldr	r4, [r3, #8]
 800588c:	2300      	movs	r3, #0
 800588e:	2200      	movs	r2, #0
 8005890:	210a      	movs	r1, #10
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	47a0      	blx	r4
  /* u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, 0, NULL);  */ /* It would make sense to call flip mode 0 here after U8X8_MSG_DISPLAY_INIT */
}
 8005896:	bf00      	nop
 8005898:	370c      	adds	r7, #12
 800589a:	46bd      	mov	sp, r7
 800589c:	bd90      	pop	{r4, r7, pc}

0800589e <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 800589e:	b590      	push	{r4, r7, lr}
 80058a0:	b083      	sub	sp, #12
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	6078      	str	r0, [r7, #4]
 80058a6:	460b      	mov	r3, r1
 80058a8:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	689c      	ldr	r4, [r3, #8]
 80058ae:	78fa      	ldrb	r2, [r7, #3]
 80058b0:	2300      	movs	r3, #0
 80058b2:	210b      	movs	r1, #11
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	47a0      	blx	r4
}
 80058b8:	bf00      	nop
 80058ba:	370c      	adds	r7, #12
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd90      	pop	{r4, r7, pc}

080058c0 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 80058c0:	b590      	push	{r4, r7, lr}
 80058c2:	b083      	sub	sp, #12
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	689c      	ldr	r4, [r3, #8]
 80058cc:	2300      	movs	r3, #0
 80058ce:	2200      	movs	r2, #0
 80058d0:	2110      	movs	r1, #16
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	47a0      	blx	r4
}
 80058d6:	bf00      	nop
 80058d8:	370c      	adds	r7, #12
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd90      	pop	{r4, r7, pc}

080058de <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 80058de:	b590      	push	{r4, r7, lr}
 80058e0:	b083      	sub	sp, #12
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	6078      	str	r0, [r7, #4]
 80058e6:	460b      	mov	r3, r1
 80058e8:	70fb      	strb	r3, [r7, #3]
 80058ea:	4613      	mov	r3, r2
 80058ec:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	695c      	ldr	r4, [r3, #20]
 80058f2:	78ba      	ldrb	r2, [r7, #2]
 80058f4:	78f9      	ldrb	r1, [r7, #3]
 80058f6:	2300      	movs	r3, #0
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	47a0      	blx	r4
}
 80058fc:	bf00      	nop
 80058fe:	370c      	adds	r7, #12
 8005900:	46bd      	mov	sp, r7
 8005902:	bd90      	pop	{r4, r7, pc}

08005904 <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 8005904:	b480      	push	{r7}
 8005906:	b085      	sub	sp, #20
 8005908:	af00      	add	r7, sp, #0
 800590a:	60f8      	str	r0, [r7, #12]
 800590c:	607b      	str	r3, [r7, #4]
 800590e:	460b      	mov	r3, r1
 8005910:	72fb      	strb	r3, [r7, #11]
 8005912:	4613      	mov	r3, r2
 8005914:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 8005916:	2300      	movs	r3, #0
}
 8005918:	4618      	mov	r0, r3
 800591a:	3714      	adds	r7, #20
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	4770      	bx	lr

08005924 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8005924:	b480      	push	{r7}
 8005926:	b083      	sub	sp, #12
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4a11      	ldr	r2, [pc, #68]	; (800597c <u8x8_SetupDefaults+0x58>)
 8005936:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	4a10      	ldr	r2, [pc, #64]	; (800597c <u8x8_SetupDefaults+0x58>)
 800593c:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	4a0e      	ldr	r2, [pc, #56]	; (800597c <u8x8_SetupDefaults+0x58>)
 8005942:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	4a0d      	ldr	r2, [pc, #52]	; (800597c <u8x8_SetupDefaults+0x58>)
 8005948:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	22ff      	movs	r2, #255	; 0xff
 8005964:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	22ff      	movs	r2, #255	; 0xff
 800596c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8005970:	bf00      	nop
 8005972:	370c      	adds	r7, #12
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr
 800597c:	08005905 	.word	0x08005905

08005980 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b084      	sub	sp, #16
 8005984:	af00      	add	r7, sp, #0
 8005986:	60f8      	str	r0, [r7, #12]
 8005988:	60b9      	str	r1, [r7, #8]
 800598a:	607a      	str	r2, [r7, #4]
 800598c:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 800598e:	68f8      	ldr	r0, [r7, #12]
 8005990:	f7ff ffc8 	bl	8005924 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	68ba      	ldr	r2, [r7, #8]
 8005998:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	687a      	ldr	r2, [r7, #4]
 800599e:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	683a      	ldr	r2, [r7, #0]
 80059a4:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	69ba      	ldr	r2, [r7, #24]
 80059aa:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 80059ac:	68f8      	ldr	r0, [r7, #12]
 80059ae:	f7ff ff58 	bl	8005862 <u8x8_SetupMemory>
}
 80059b2:	bf00      	nop
 80059b4:	3710      	adds	r7, #16
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}

080059ba <memset>:
 80059ba:	4402      	add	r2, r0
 80059bc:	4603      	mov	r3, r0
 80059be:	4293      	cmp	r3, r2
 80059c0:	d100      	bne.n	80059c4 <memset+0xa>
 80059c2:	4770      	bx	lr
 80059c4:	f803 1b01 	strb.w	r1, [r3], #1
 80059c8:	e7f9      	b.n	80059be <memset+0x4>
	...

080059cc <__libc_init_array>:
 80059cc:	b570      	push	{r4, r5, r6, lr}
 80059ce:	4d0d      	ldr	r5, [pc, #52]	; (8005a04 <__libc_init_array+0x38>)
 80059d0:	4c0d      	ldr	r4, [pc, #52]	; (8005a08 <__libc_init_array+0x3c>)
 80059d2:	1b64      	subs	r4, r4, r5
 80059d4:	10a4      	asrs	r4, r4, #2
 80059d6:	2600      	movs	r6, #0
 80059d8:	42a6      	cmp	r6, r4
 80059da:	d109      	bne.n	80059f0 <__libc_init_array+0x24>
 80059dc:	4d0b      	ldr	r5, [pc, #44]	; (8005a0c <__libc_init_array+0x40>)
 80059de:	4c0c      	ldr	r4, [pc, #48]	; (8005a10 <__libc_init_array+0x44>)
 80059e0:	f000 f818 	bl	8005a14 <_init>
 80059e4:	1b64      	subs	r4, r4, r5
 80059e6:	10a4      	asrs	r4, r4, #2
 80059e8:	2600      	movs	r6, #0
 80059ea:	42a6      	cmp	r6, r4
 80059ec:	d105      	bne.n	80059fa <__libc_init_array+0x2e>
 80059ee:	bd70      	pop	{r4, r5, r6, pc}
 80059f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80059f4:	4798      	blx	r3
 80059f6:	3601      	adds	r6, #1
 80059f8:	e7ee      	b.n	80059d8 <__libc_init_array+0xc>
 80059fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80059fe:	4798      	blx	r3
 8005a00:	3601      	adds	r6, #1
 8005a02:	e7f2      	b.n	80059ea <__libc_init_array+0x1e>
 8005a04:	08006b5c 	.word	0x08006b5c
 8005a08:	08006b5c 	.word	0x08006b5c
 8005a0c:	08006b5c 	.word	0x08006b5c
 8005a10:	08006b60 	.word	0x08006b60

08005a14 <_init>:
 8005a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a16:	bf00      	nop
 8005a18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a1a:	bc08      	pop	{r3}
 8005a1c:	469e      	mov	lr, r3
 8005a1e:	4770      	bx	lr

08005a20 <_fini>:
 8005a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a22:	bf00      	nop
 8005a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a26:	bc08      	pop	{r3}
 8005a28:	469e      	mov	lr, r3
 8005a2a:	4770      	bx	lr
