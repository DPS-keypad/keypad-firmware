
Screen_example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006278  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000a25c  0800640c  0800640c  0001640c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010668  08010668  00030040  2**0
                  CONTENTS
  4 .ARM          00000008  08010668  08010668  00020668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010670  08010670  00030040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010670  08010670  00020670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010674  08010674  00020674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  08010678  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b4  20000040  080106b8  00030040  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002f4  080106b8  000302f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030040  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0004d2df  00000000  00000000  000300b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a87  00000000  00000000  0007d392  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000036d8  00000000  00000000  00080e20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002948  00000000  00000000  000844f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018390  00000000  00000000  00086e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e584  00000000  00000000  0009f1d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000aba5d  00000000  00000000  000bd754  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000f120  00000000  00000000  001691b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  001782d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000040 	.word	0x20000040
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080063f4 	.word	0x080063f4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000044 	.word	0x20000044
 80001d0:	080063f4 	.word	0x080063f4

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b970 	b.w	80004cc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	460d      	mov	r5, r1
 800020c:	4604      	mov	r4, r0
 800020e:	460f      	mov	r7, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4694      	mov	ip, r2
 8000218:	d965      	bls.n	80002e6 <__udivmoddi4+0xe2>
 800021a:	fab2 f382 	clz	r3, r2
 800021e:	b143      	cbz	r3, 8000232 <__udivmoddi4+0x2e>
 8000220:	fa02 fc03 	lsl.w	ip, r2, r3
 8000224:	f1c3 0220 	rsb	r2, r3, #32
 8000228:	409f      	lsls	r7, r3
 800022a:	fa20 f202 	lsr.w	r2, r0, r2
 800022e:	4317      	orrs	r7, r2
 8000230:	409c      	lsls	r4, r3
 8000232:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000236:	fa1f f58c 	uxth.w	r5, ip
 800023a:	fbb7 f1fe 	udiv	r1, r7, lr
 800023e:	0c22      	lsrs	r2, r4, #16
 8000240:	fb0e 7711 	mls	r7, lr, r1, r7
 8000244:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000248:	fb01 f005 	mul.w	r0, r1, r5
 800024c:	4290      	cmp	r0, r2
 800024e:	d90a      	bls.n	8000266 <__udivmoddi4+0x62>
 8000250:	eb1c 0202 	adds.w	r2, ip, r2
 8000254:	f101 37ff 	add.w	r7, r1, #4294967295
 8000258:	f080 811c 	bcs.w	8000494 <__udivmoddi4+0x290>
 800025c:	4290      	cmp	r0, r2
 800025e:	f240 8119 	bls.w	8000494 <__udivmoddi4+0x290>
 8000262:	3902      	subs	r1, #2
 8000264:	4462      	add	r2, ip
 8000266:	1a12      	subs	r2, r2, r0
 8000268:	b2a4      	uxth	r4, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000276:	fb00 f505 	mul.w	r5, r0, r5
 800027a:	42a5      	cmp	r5, r4
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x90>
 800027e:	eb1c 0404 	adds.w	r4, ip, r4
 8000282:	f100 32ff 	add.w	r2, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x294>
 800028a:	42a5      	cmp	r5, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x294>
 8000290:	4464      	add	r4, ip
 8000292:	3802      	subs	r0, #2
 8000294:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000298:	1b64      	subs	r4, r4, r5
 800029a:	2100      	movs	r1, #0
 800029c:	b11e      	cbz	r6, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40dc      	lsrs	r4, r3
 80002a0:	2300      	movs	r3, #0
 80002a2:	e9c6 4300 	strd	r4, r3, [r6]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d908      	bls.n	80002c0 <__udivmoddi4+0xbc>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80ed 	beq.w	800048e <__udivmoddi4+0x28a>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	d149      	bne.n	800035c <__udivmoddi4+0x158>
 80002c8:	42ab      	cmp	r3, r5
 80002ca:	d302      	bcc.n	80002d2 <__udivmoddi4+0xce>
 80002cc:	4282      	cmp	r2, r0
 80002ce:	f200 80f8 	bhi.w	80004c2 <__udivmoddi4+0x2be>
 80002d2:	1a84      	subs	r4, r0, r2
 80002d4:	eb65 0203 	sbc.w	r2, r5, r3
 80002d8:	2001      	movs	r0, #1
 80002da:	4617      	mov	r7, r2
 80002dc:	2e00      	cmp	r6, #0
 80002de:	d0e2      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	e9c6 4700 	strd	r4, r7, [r6]
 80002e4:	e7df      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xe6>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f382 	clz	r3, r2
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2101      	movs	r1, #1
 8000300:	fbb2 f5f7 	udiv	r5, r2, r7
 8000304:	fb07 2015 	mls	r0, r7, r5, r2
 8000308:	0c22      	lsrs	r2, r4, #16
 800030a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030e:	fb0e f005 	mul.w	r0, lr, r5
 8000312:	4290      	cmp	r0, r2
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x124>
 8000316:	eb1c 0202 	adds.w	r2, ip, r2
 800031a:	f105 38ff 	add.w	r8, r5, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4290      	cmp	r0, r2
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2b8>
 8000326:	4645      	mov	r5, r8
 8000328:	1a12      	subs	r2, r2, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000330:	fb07 2210 	mls	r2, r7, r0, r2
 8000334:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x14e>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 32ff 	add.w	r2, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x14c>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2c2>
 8000350:	4610      	mov	r0, r2
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035a:	e79f      	b.n	800029c <__udivmoddi4+0x98>
 800035c:	f1c1 0720 	rsb	r7, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa05 f401 	lsl.w	r4, r5, r1
 800036e:	fa20 f307 	lsr.w	r3, r0, r7
 8000372:	40fd      	lsrs	r5, r7
 8000374:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fbb5 f8f9 	udiv	r8, r5, r9
 800037e:	fa1f fe8c 	uxth.w	lr, ip
 8000382:	fb09 5518 	mls	r5, r9, r8, r5
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb08 f50e 	mul.w	r5, r8, lr
 8000390:	42a5      	cmp	r5, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	fa00 f001 	lsl.w	r0, r0, r1
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2b4>
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2b4>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4464      	add	r4, ip
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	b29d      	uxth	r5, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2ac>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2ac>
 80003da:	3b02      	subs	r3, #2
 80003dc:	4464      	add	r4, ip
 80003de:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e2:	fba3 9502 	umull	r9, r5, r3, r2
 80003e6:	eba4 040e 	sub.w	r4, r4, lr
 80003ea:	42ac      	cmp	r4, r5
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46ae      	mov	lr, r5
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x29c>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x298>
 80003f4:	b156      	cbz	r6, 800040c <__udivmoddi4+0x208>
 80003f6:	ebb0 0208 	subs.w	r2, r0, r8
 80003fa:	eb64 040e 	sbc.w	r4, r4, lr
 80003fe:	fa04 f707 	lsl.w	r7, r4, r7
 8000402:	40ca      	lsrs	r2, r1
 8000404:	40cc      	lsrs	r4, r1
 8000406:	4317      	orrs	r7, r2
 8000408:	e9c6 7400 	strd	r7, r4, [r6]
 800040c:	4618      	mov	r0, r3
 800040e:	2100      	movs	r1, #0
 8000410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000414:	f1c3 0120 	rsb	r1, r3, #32
 8000418:	fa02 fc03 	lsl.w	ip, r2, r3
 800041c:	fa20 f201 	lsr.w	r2, r0, r1
 8000420:	fa25 f101 	lsr.w	r1, r5, r1
 8000424:	409d      	lsls	r5, r3
 8000426:	432a      	orrs	r2, r5
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1510 	mls	r5, r7, r0, r1
 8000438:	0c11      	lsrs	r1, r2, #16
 800043a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043e:	fb00 f50e 	mul.w	r5, r0, lr
 8000442:	428d      	cmp	r5, r1
 8000444:	fa04 f403 	lsl.w	r4, r4, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x258>
 800044a:	eb1c 0101 	adds.w	r1, ip, r1
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000454:	428d      	cmp	r5, r1
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 8000458:	3802      	subs	r0, #2
 800045a:	4461      	add	r1, ip
 800045c:	1b49      	subs	r1, r1, r5
 800045e:	b292      	uxth	r2, r2
 8000460:	fbb1 f5f7 	udiv	r5, r1, r7
 8000464:	fb07 1115 	mls	r1, r7, r5, r1
 8000468:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800046c:	fb05 f10e 	mul.w	r1, r5, lr
 8000470:	4291      	cmp	r1, r2
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x282>
 8000474:	eb1c 0202 	adds.w	r2, ip, r2
 8000478:	f105 38ff 	add.w	r8, r5, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800047e:	4291      	cmp	r1, r2
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2a8>
 8000482:	3d02      	subs	r5, #2
 8000484:	4462      	add	r2, ip
 8000486:	1a52      	subs	r2, r2, r1
 8000488:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0xfc>
 800048e:	4631      	mov	r1, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e708      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000494:	4639      	mov	r1, r7
 8000496:	e6e6      	b.n	8000266 <__udivmoddi4+0x62>
 8000498:	4610      	mov	r0, r2
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x90>
 800049c:	4548      	cmp	r0, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a8:	3b01      	subs	r3, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004ac:	4645      	mov	r5, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x282>
 80004b0:	462b      	mov	r3, r5
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1da>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x258>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004bc:	3d02      	subs	r5, #2
 80004be:	4462      	add	r2, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x124>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e70a      	b.n	80002dc <__udivmoddi4+0xd8>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x14e>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <u8x8_stm32_gpio_and_delay>:
static void MX_ADC1_Init(void);
/* USER CODE BEGIN PFP */
uint8_t u8x8_stm32_gpio_and_delay(U8X8_UNUSED u8x8_t *u8x8,
                                  U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int,
                                  U8X8_UNUSED void *arg_ptr)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b084      	sub	sp, #16
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	60f8      	str	r0, [r7, #12]
 80004d8:	607b      	str	r3, [r7, #4]
 80004da:	460b      	mov	r3, r1
 80004dc:	72fb      	strb	r3, [r7, #11]
 80004de:	4613      	mov	r3, r2
 80004e0:	72bb      	strb	r3, [r7, #10]
  switch (msg)
 80004e2:	7afb      	ldrb	r3, [r7, #11]
 80004e4:	3b28      	subs	r3, #40	; 0x28
 80004e6:	2b23      	cmp	r3, #35	; 0x23
 80004e8:	d868      	bhi.n	80005bc <u8x8_stm32_gpio_and_delay+0xec>
 80004ea:	a201      	add	r2, pc, #4	; (adr r2, 80004f0 <u8x8_stm32_gpio_and_delay+0x20>)
 80004ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004f0:	08000581 	.word	0x08000581
 80004f4:	08000589 	.word	0x08000589
 80004f8:	080005bd 	.word	0x080005bd
 80004fc:	080005bd 	.word	0x080005bd
 8000500:	080005bd 	.word	0x080005bd
 8000504:	080005bd 	.word	0x080005bd
 8000508:	080005bd 	.word	0x080005bd
 800050c:	080005bd 	.word	0x080005bd
 8000510:	080005bd 	.word	0x080005bd
 8000514:	080005bd 	.word	0x080005bd
 8000518:	080005bd 	.word	0x080005bd
 800051c:	080005bd 	.word	0x080005bd
 8000520:	080005bd 	.word	0x080005bd
 8000524:	080005bd 	.word	0x080005bd
 8000528:	080005bd 	.word	0x080005bd
 800052c:	080005bd 	.word	0x080005bd
 8000530:	080005bd 	.word	0x080005bd
 8000534:	080005bd 	.word	0x080005bd
 8000538:	080005bd 	.word	0x080005bd
 800053c:	080005bd 	.word	0x080005bd
 8000540:	080005bd 	.word	0x080005bd
 8000544:	080005bd 	.word	0x080005bd
 8000548:	080005bd 	.word	0x080005bd
 800054c:	080005bd 	.word	0x080005bd
 8000550:	080005bd 	.word	0x080005bd
 8000554:	080005bd 	.word	0x080005bd
 8000558:	080005bd 	.word	0x080005bd
 800055c:	080005bd 	.word	0x080005bd
 8000560:	080005bd 	.word	0x080005bd
 8000564:	080005bd 	.word	0x080005bd
 8000568:	080005bd 	.word	0x080005bd
 800056c:	080005bd 	.word	0x080005bd
 8000570:	080005bd 	.word	0x080005bd
 8000574:	080005a1 	.word	0x080005a1
 8000578:	08000593 	.word	0x08000593
 800057c:	080005af 	.word	0x080005af
  {
  case U8X8_MSG_GPIO_AND_DELAY_INIT:
    HAL_Delay(1);
 8000580:	2001      	movs	r0, #1
 8000582:	f001 f86f 	bl	8001664 <HAL_Delay>
    break;
 8000586:	e019      	b.n	80005bc <u8x8_stm32_gpio_and_delay+0xec>
  case U8X8_MSG_DELAY_MILLI:
    HAL_Delay(arg_int);
 8000588:	7abb      	ldrb	r3, [r7, #10]
 800058a:	4618      	mov	r0, r3
 800058c:	f001 f86a 	bl	8001664 <HAL_Delay>
    break;
 8000590:	e014      	b.n	80005bc <u8x8_stm32_gpio_and_delay+0xec>
  case U8X8_MSG_GPIO_DC:
    HAL_GPIO_WritePin(SPI1_DC_GPIO_Port, SPI1_DC_Pin, arg_int);
 8000592:	7abb      	ldrb	r3, [r7, #10]
 8000594:	461a      	mov	r2, r3
 8000596:	2140      	movs	r1, #64	; 0x40
 8000598:	480b      	ldr	r0, [pc, #44]	; (80005c8 <u8x8_stm32_gpio_and_delay+0xf8>)
 800059a:	f001 ff5d 	bl	8002458 <HAL_GPIO_WritePin>
    break;
 800059e:	e00d      	b.n	80005bc <u8x8_stm32_gpio_and_delay+0xec>
  case U8X8_MSG_GPIO_CS:
    HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, arg_int);
 80005a0:	7abb      	ldrb	r3, [r7, #10]
 80005a2:	461a      	mov	r2, r3
 80005a4:	2110      	movs	r1, #16
 80005a6:	4808      	ldr	r0, [pc, #32]	; (80005c8 <u8x8_stm32_gpio_and_delay+0xf8>)
 80005a8:	f001 ff56 	bl	8002458 <HAL_GPIO_WritePin>
    break;
 80005ac:	e006      	b.n	80005bc <u8x8_stm32_gpio_and_delay+0xec>
  case U8X8_MSG_GPIO_RESET:
    HAL_GPIO_WritePin(SPI1_RESET_GPIO_Port, SPI1_RESET_Pin, arg_int);
 80005ae:	7abb      	ldrb	r3, [r7, #10]
 80005b0:	461a      	mov	r2, r3
 80005b2:	2108      	movs	r1, #8
 80005b4:	4804      	ldr	r0, [pc, #16]	; (80005c8 <u8x8_stm32_gpio_and_delay+0xf8>)
 80005b6:	f001 ff4f 	bl	8002458 <HAL_GPIO_WritePin>
    break;
 80005ba:	bf00      	nop
  }
  return 1;
 80005bc:	2301      	movs	r3, #1
}
 80005be:	4618      	mov	r0, r3
 80005c0:	3710      	adds	r7, #16
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	40020000 	.word	0x40020000

080005cc <u8x8_byte_4wire_hw_spi>:

uint8_t u8x8_byte_4wire_hw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int,
                               void *arg_ptr)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	60f8      	str	r0, [r7, #12]
 80005d4:	607b      	str	r3, [r7, #4]
 80005d6:	460b      	mov	r3, r1
 80005d8:	72fb      	strb	r3, [r7, #11]
 80005da:	4613      	mov	r3, r2
 80005dc:	72bb      	strb	r3, [r7, #10]
  switch (msg)
 80005de:	7afb      	ldrb	r3, [r7, #11]
 80005e0:	3b14      	subs	r3, #20
 80005e2:	2b0c      	cmp	r3, #12
 80005e4:	d83e      	bhi.n	8000664 <u8x8_byte_4wire_hw_spi+0x98>
 80005e6:	a201      	add	r2, pc, #4	; (adr r2, 80005ec <u8x8_byte_4wire_hw_spi+0x20>)
 80005e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005ec:	08000669 	.word	0x08000669
 80005f0:	08000665 	.word	0x08000665
 80005f4:	08000665 	.word	0x08000665
 80005f8:	08000621 	.word	0x08000621
 80005fc:	08000641 	.word	0x08000641
 8000600:	08000653 	.word	0x08000653
 8000604:	08000665 	.word	0x08000665
 8000608:	08000665 	.word	0x08000665
 800060c:	08000665 	.word	0x08000665
 8000610:	08000665 	.word	0x08000665
 8000614:	08000665 	.word	0x08000665
 8000618:	08000665 	.word	0x08000665
 800061c:	08000633 	.word	0x08000633
  {
  case U8X8_MSG_BYTE_SEND:
    HAL_SPI_Transmit(&hspi1, (uint8_t *)arg_ptr, arg_int, 10000);
 8000620:	7abb      	ldrb	r3, [r7, #10]
 8000622:	b29a      	uxth	r2, r3
 8000624:	f242 7310 	movw	r3, #10000	; 0x2710
 8000628:	6879      	ldr	r1, [r7, #4]
 800062a:	4812      	ldr	r0, [pc, #72]	; (8000674 <u8x8_byte_4wire_hw_spi+0xa8>)
 800062c:	f002 fc27 	bl	8002e7e <HAL_SPI_Transmit>
    break;
 8000630:	e01b      	b.n	800066a <u8x8_byte_4wire_hw_spi+0x9e>
  case U8X8_MSG_BYTE_INIT:
    break;
  case U8X8_MSG_BYTE_SET_DC:
    u8x8_gpio_SetDC(u8x8, arg_int);
 8000632:	7abb      	ldrb	r3, [r7, #10]
 8000634:	461a      	mov	r2, r3
 8000636:	214a      	movs	r1, #74	; 0x4a
 8000638:	68f8      	ldr	r0, [r7, #12]
 800063a:	f005 fe2e 	bl	800629a <u8x8_gpio_call>
    break;
 800063e:	e014      	b.n	800066a <u8x8_byte_4wire_hw_spi+0x9e>
  case U8X8_MSG_BYTE_START_TRANSFER:
    u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_enable_level);
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	461a      	mov	r2, r3
 8000648:	2149      	movs	r1, #73	; 0x49
 800064a:	68f8      	ldr	r0, [r7, #12]
 800064c:	f005 fe25 	bl	800629a <u8x8_gpio_call>
    break;
 8000650:	e00b      	b.n	800066a <u8x8_byte_4wire_hw_spi+0x9e>
  case U8X8_MSG_BYTE_END_TRANSFER:
    u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	785b      	ldrb	r3, [r3, #1]
 8000658:	461a      	mov	r2, r3
 800065a:	2149      	movs	r1, #73	; 0x49
 800065c:	68f8      	ldr	r0, [r7, #12]
 800065e:	f005 fe1c 	bl	800629a <u8x8_gpio_call>
    break;
 8000662:	e002      	b.n	800066a <u8x8_byte_4wire_hw_spi+0x9e>
  default:
    return 0;
 8000664:	2300      	movs	r3, #0
 8000666:	e001      	b.n	800066c <u8x8_byte_4wire_hw_spi+0xa0>
    break;
 8000668:	bf00      	nop
  }
  return 1;
 800066a:	2301      	movs	r3, #1
}
 800066c:	4618      	mov	r0, r3
 800066e:	3710      	adds	r7, #16
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	200000a4 	.word	0x200000a4

08000678 <setFirstHour>:
  {
  } while (u8g2_NextPage(&u8g2));
}

void setFirstHour()
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
  // Read the value from the serial
  char serial_value[6];                                               // Buffer to store the serial value
  HAL_UART_Receive(&huart1, (uint8_t *)serial_value, 6, HAL_MAX_DELAY);
 800067e:	4639      	mov	r1, r7
 8000680:	f04f 33ff 	mov.w	r3, #4294967295
 8000684:	2206      	movs	r2, #6
 8000686:	4810      	ldr	r0, [pc, #64]	; (80006c8 <setFirstHour+0x50>)
 8000688:	f002 fef3 	bl	8003472 <HAL_UART_Receive>

  // Set the hour and minute
  hours = (serial_value[0] - '0') * 10 + (serial_value[1] - '0');     // Convert the ASCII value to integer
 800068c:	783b      	ldrb	r3, [r7, #0]
 800068e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000692:	4613      	mov	r3, r2
 8000694:	009b      	lsls	r3, r3, #2
 8000696:	4413      	add	r3, r2
 8000698:	005b      	lsls	r3, r3, #1
 800069a:	461a      	mov	r2, r3
 800069c:	787b      	ldrb	r3, [r7, #1]
 800069e:	3b30      	subs	r3, #48	; 0x30
 80006a0:	4413      	add	r3, r2
 80006a2:	4a0a      	ldr	r2, [pc, #40]	; (80006cc <setFirstHour+0x54>)
 80006a4:	6013      	str	r3, [r2, #0]
  minutes = (serial_value[3] - '0') * 10 + (serial_value[4] - '0');   // Convert the ASCII value to integer
 80006a6:	78fb      	ldrb	r3, [r7, #3]
 80006a8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80006ac:	4613      	mov	r3, r2
 80006ae:	009b      	lsls	r3, r3, #2
 80006b0:	4413      	add	r3, r2
 80006b2:	005b      	lsls	r3, r3, #1
 80006b4:	461a      	mov	r2, r3
 80006b6:	793b      	ldrb	r3, [r7, #4]
 80006b8:	3b30      	subs	r3, #48	; 0x30
 80006ba:	4413      	add	r3, r2
 80006bc:	4a04      	ldr	r2, [pc, #16]	; (80006d0 <setFirstHour+0x58>)
 80006be:	6013      	str	r3, [r2, #0]
}
 80006c0:	bf00      	nop
 80006c2:	3708      	adds	r7, #8
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	200000fc 	.word	0x200000fc
 80006cc:	200001f4 	.word	0x200001f4
 80006d0:	200001f8 	.word	0x200001f8

080006d4 <getHour>:

void getHour()
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
  hoursandminutes[0] = (hours / 10) + 48;
 80006d8:	4b24      	ldr	r3, [pc, #144]	; (800076c <getHour+0x98>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a24      	ldr	r2, [pc, #144]	; (8000770 <getHour+0x9c>)
 80006de:	fb82 1203 	smull	r1, r2, r2, r3
 80006e2:	1092      	asrs	r2, r2, #2
 80006e4:	17db      	asrs	r3, r3, #31
 80006e6:	1ad3      	subs	r3, r2, r3
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	3330      	adds	r3, #48	; 0x30
 80006ec:	b2da      	uxtb	r2, r3
 80006ee:	4b21      	ldr	r3, [pc, #132]	; (8000774 <getHour+0xa0>)
 80006f0:	701a      	strb	r2, [r3, #0]
  hoursandminutes[1] = (hours % 10) + 48;
 80006f2:	4b1e      	ldr	r3, [pc, #120]	; (800076c <getHour+0x98>)
 80006f4:	681a      	ldr	r2, [r3, #0]
 80006f6:	4b1e      	ldr	r3, [pc, #120]	; (8000770 <getHour+0x9c>)
 80006f8:	fb83 1302 	smull	r1, r3, r3, r2
 80006fc:	1099      	asrs	r1, r3, #2
 80006fe:	17d3      	asrs	r3, r2, #31
 8000700:	1ac9      	subs	r1, r1, r3
 8000702:	460b      	mov	r3, r1
 8000704:	009b      	lsls	r3, r3, #2
 8000706:	440b      	add	r3, r1
 8000708:	005b      	lsls	r3, r3, #1
 800070a:	1ad1      	subs	r1, r2, r3
 800070c:	b2cb      	uxtb	r3, r1
 800070e:	3330      	adds	r3, #48	; 0x30
 8000710:	b2da      	uxtb	r2, r3
 8000712:	4b18      	ldr	r3, [pc, #96]	; (8000774 <getHour+0xa0>)
 8000714:	705a      	strb	r2, [r3, #1]
  hoursandminutes[2] = ':';
 8000716:	4b17      	ldr	r3, [pc, #92]	; (8000774 <getHour+0xa0>)
 8000718:	223a      	movs	r2, #58	; 0x3a
 800071a:	709a      	strb	r2, [r3, #2]
  hoursandminutes[3] = (minutes / 10) + 48;
 800071c:	4b16      	ldr	r3, [pc, #88]	; (8000778 <getHour+0xa4>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a13      	ldr	r2, [pc, #76]	; (8000770 <getHour+0x9c>)
 8000722:	fb82 1203 	smull	r1, r2, r2, r3
 8000726:	1092      	asrs	r2, r2, #2
 8000728:	17db      	asrs	r3, r3, #31
 800072a:	1ad3      	subs	r3, r2, r3
 800072c:	b2db      	uxtb	r3, r3
 800072e:	3330      	adds	r3, #48	; 0x30
 8000730:	b2da      	uxtb	r2, r3
 8000732:	4b10      	ldr	r3, [pc, #64]	; (8000774 <getHour+0xa0>)
 8000734:	70da      	strb	r2, [r3, #3]
  hoursandminutes[4] = (minutes % 10) + 48;
 8000736:	4b10      	ldr	r3, [pc, #64]	; (8000778 <getHour+0xa4>)
 8000738:	681a      	ldr	r2, [r3, #0]
 800073a:	4b0d      	ldr	r3, [pc, #52]	; (8000770 <getHour+0x9c>)
 800073c:	fb83 1302 	smull	r1, r3, r3, r2
 8000740:	1099      	asrs	r1, r3, #2
 8000742:	17d3      	asrs	r3, r2, #31
 8000744:	1ac9      	subs	r1, r1, r3
 8000746:	460b      	mov	r3, r1
 8000748:	009b      	lsls	r3, r3, #2
 800074a:	440b      	add	r3, r1
 800074c:	005b      	lsls	r3, r3, #1
 800074e:	1ad1      	subs	r1, r2, r3
 8000750:	b2cb      	uxtb	r3, r1
 8000752:	3330      	adds	r3, #48	; 0x30
 8000754:	b2da      	uxtb	r2, r3
 8000756:	4b07      	ldr	r3, [pc, #28]	; (8000774 <getHour+0xa0>)
 8000758:	711a      	strb	r2, [r3, #4]
  hoursandminutes[5] = '\0';
 800075a:	4b06      	ldr	r3, [pc, #24]	; (8000774 <getHour+0xa0>)
 800075c:	2200      	movs	r2, #0
 800075e:	715a      	strb	r2, [r3, #5]
}
 8000760:	bf00      	nop
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	200001f4 	.word	0x200001f4
 8000770:	66666667 	.word	0x66666667
 8000774:	200001ec 	.word	0x200001ec
 8000778:	200001f8 	.word	0x200001f8

0800077c <updateHour>:
 * 
 * This function is responsible for updating the hour value every minute.
 * It checks the current time and updates the hour and minute variables accordingly.
 */
void updateHour()
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
  static uint32_t last_update_time_2 = 0;
  uint32_t current_time_2 = HAL_GetTick();
 8000782:	f000 ff63 	bl	800164c <HAL_GetTick>
 8000786:	6078      	str	r0, [r7, #4]

  if (current_time_2 - last_update_time_2 >= 60000) // Update every minute
 8000788:	4b14      	ldr	r3, [pc, #80]	; (80007dc <updateHour+0x60>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	687a      	ldr	r2, [r7, #4]
 800078e:	1ad3      	subs	r3, r2, r3
 8000790:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8000794:	4293      	cmp	r3, r2
 8000796:	d91c      	bls.n	80007d2 <updateHour+0x56>
  {
    last_update_time_2 = current_time_2;
 8000798:	4a10      	ldr	r2, [pc, #64]	; (80007dc <updateHour+0x60>)
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	6013      	str	r3, [r2, #0]

    if (minutes == 59)
 800079e:	4b10      	ldr	r3, [pc, #64]	; (80007e0 <updateHour+0x64>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	2b3b      	cmp	r3, #59	; 0x3b
 80007a4:	d110      	bne.n	80007c8 <updateHour+0x4c>
    {
      minutes = 0;
 80007a6:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <updateHour+0x64>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
      if (hours == 23)
 80007ac:	4b0d      	ldr	r3, [pc, #52]	; (80007e4 <updateHour+0x68>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	2b17      	cmp	r3, #23
 80007b2:	d103      	bne.n	80007bc <updateHour+0x40>
      {
        hours = 0;
 80007b4:	4b0b      	ldr	r3, [pc, #44]	; (80007e4 <updateHour+0x68>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
    else
    {
      minutes++;
    }
  }
}
 80007ba:	e00a      	b.n	80007d2 <updateHour+0x56>
        hours++;
 80007bc:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <updateHour+0x68>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	3301      	adds	r3, #1
 80007c2:	4a08      	ldr	r2, [pc, #32]	; (80007e4 <updateHour+0x68>)
 80007c4:	6013      	str	r3, [r2, #0]
}
 80007c6:	e004      	b.n	80007d2 <updateHour+0x56>
      minutes++;
 80007c8:	4b05      	ldr	r3, [pc, #20]	; (80007e0 <updateHour+0x64>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	3301      	adds	r3, #1
 80007ce:	4a04      	ldr	r2, [pc, #16]	; (80007e0 <updateHour+0x64>)
 80007d0:	6013      	str	r3, [r2, #0]
}
 80007d2:	bf00      	nop
 80007d4:	3708      	adds	r7, #8
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	20000260 	.word	0x20000260
 80007e0:	200001f8 	.word	0x200001f8
 80007e4:	200001f4 	.word	0x200001f4

080007e8 <ADC_read>:
 * It starts the ADC conversion, polls for the conversion to complete,
 * and then reads the conversion result. The ADC values are then converted
 * to a 0-100 range and stored in display_values1, display_values2, and display_values3 arrays.
 */
void ADC_read(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b084      	sub	sp, #16
 80007ec:	af00      	add	r7, sp, #0
  static uint32_t last_update_time_4 = 0;
  uint32_t current_time_4 = HAL_GetTick();
 80007ee:	f000 ff2d 	bl	800164c <HAL_GetTick>
 80007f2:	60f8      	str	r0, [r7, #12]

  if (current_time_4 - last_update_time_4 >= 100) 
 80007f4:	4b76      	ldr	r3, [pc, #472]	; (80009d0 <ADC_read+0x1e8>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	68fa      	ldr	r2, [r7, #12]
 80007fa:	1ad3      	subs	r3, r2, r3
 80007fc:	2b63      	cmp	r3, #99	; 0x63
 80007fe:	f240 80e3 	bls.w	80009c8 <ADC_read+0x1e0>
  {
    last_update_time_4 = current_time_4;
 8000802:	4a73      	ldr	r2, [pc, #460]	; (80009d0 <ADC_read+0x1e8>)
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	6013      	str	r3, [r2, #0]

    HAL_ADC_Start(&hadc1);                // Start ADC Conversion
 8000808:	4872      	ldr	r0, [pc, #456]	; (80009d4 <ADC_read+0x1ec>)
 800080a:	f000 ff93 	bl	8001734 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 1); // Poll ADC1 Peripheral & TimeOut = 1mSec
 800080e:	2101      	movs	r1, #1
 8000810:	4870      	ldr	r0, [pc, #448]	; (80009d4 <ADC_read+0x1ec>)
 8000812:	f001 f843 	bl	800189c <HAL_ADC_PollForConversion>
    pot1 = HAL_ADC_GetValue(&hadc1);      // Read ADC Conversion Result
 8000816:	486f      	ldr	r0, [pc, #444]	; (80009d4 <ADC_read+0x1ec>)
 8000818:	f001 f8cb 	bl	80019b2 <HAL_ADC_GetValue>
 800081c:	4603      	mov	r3, r0
 800081e:	b29a      	uxth	r2, r3
 8000820:	4b6d      	ldr	r3, [pc, #436]	; (80009d8 <ADC_read+0x1f0>)
 8000822:	801a      	strh	r2, [r3, #0]
    HAL_ADC_Start(&hadc1);                // Start ADC Conversion
 8000824:	486b      	ldr	r0, [pc, #428]	; (80009d4 <ADC_read+0x1ec>)
 8000826:	f000 ff85 	bl	8001734 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 1); // Poll ADC1 Peripheral & TimeOut = 1mSec
 800082a:	2101      	movs	r1, #1
 800082c:	4869      	ldr	r0, [pc, #420]	; (80009d4 <ADC_read+0x1ec>)
 800082e:	f001 f835 	bl	800189c <HAL_ADC_PollForConversion>
    pot2 = HAL_ADC_GetValue(&hadc1);      // Read ADC Conversion Result
 8000832:	4868      	ldr	r0, [pc, #416]	; (80009d4 <ADC_read+0x1ec>)
 8000834:	f001 f8bd 	bl	80019b2 <HAL_ADC_GetValue>
 8000838:	4603      	mov	r3, r0
 800083a:	b29a      	uxth	r2, r3
 800083c:	4b67      	ldr	r3, [pc, #412]	; (80009dc <ADC_read+0x1f4>)
 800083e:	801a      	strh	r2, [r3, #0]
    HAL_ADC_Start(&hadc1);                // Start ADC Conversion
 8000840:	4864      	ldr	r0, [pc, #400]	; (80009d4 <ADC_read+0x1ec>)
 8000842:	f000 ff77 	bl	8001734 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 1); // Poll ADC1 Peripheral & TimeOut = 1mSec
 8000846:	2101      	movs	r1, #1
 8000848:	4862      	ldr	r0, [pc, #392]	; (80009d4 <ADC_read+0x1ec>)
 800084a:	f001 f827 	bl	800189c <HAL_ADC_PollForConversion>
    pot3 = HAL_ADC_GetValue(&hadc1);      // Read ADC Conversion Result
 800084e:	4861      	ldr	r0, [pc, #388]	; (80009d4 <ADC_read+0x1ec>)
 8000850:	f001 f8af 	bl	80019b2 <HAL_ADC_GetValue>
 8000854:	4603      	mov	r3, r0
 8000856:	b29a      	uxth	r2, r3
 8000858:	4b61      	ldr	r3, [pc, #388]	; (80009e0 <ADC_read+0x1f8>)
 800085a:	801a      	strh	r2, [r3, #0]

    // Convert ADC value to 0-100 range
    float converted_result1 = 99 - ((pot1 * 100) / 256);
 800085c:	4b5e      	ldr	r3, [pc, #376]	; (80009d8 <ADC_read+0x1f0>)
 800085e:	881b      	ldrh	r3, [r3, #0]
 8000860:	461a      	mov	r2, r3
 8000862:	2364      	movs	r3, #100	; 0x64
 8000864:	fb02 f303 	mul.w	r3, r2, r3
 8000868:	2b00      	cmp	r3, #0
 800086a:	da00      	bge.n	800086e <ADC_read+0x86>
 800086c:	33ff      	adds	r3, #255	; 0xff
 800086e:	121b      	asrs	r3, r3, #8
 8000870:	425b      	negs	r3, r3
 8000872:	3363      	adds	r3, #99	; 0x63
 8000874:	ee07 3a90 	vmov	s15, r3
 8000878:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800087c:	edc7 7a02 	vstr	s15, [r7, #8]
    float converted_result2 = 99 - ((pot2 * 100) / 256);
 8000880:	4b56      	ldr	r3, [pc, #344]	; (80009dc <ADC_read+0x1f4>)
 8000882:	881b      	ldrh	r3, [r3, #0]
 8000884:	461a      	mov	r2, r3
 8000886:	2364      	movs	r3, #100	; 0x64
 8000888:	fb02 f303 	mul.w	r3, r2, r3
 800088c:	2b00      	cmp	r3, #0
 800088e:	da00      	bge.n	8000892 <ADC_read+0xaa>
 8000890:	33ff      	adds	r3, #255	; 0xff
 8000892:	121b      	asrs	r3, r3, #8
 8000894:	425b      	negs	r3, r3
 8000896:	3363      	adds	r3, #99	; 0x63
 8000898:	ee07 3a90 	vmov	s15, r3
 800089c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008a0:	edc7 7a01 	vstr	s15, [r7, #4]
    float converted_result3 = 99 - ((pot3 * 100) / 256);
 80008a4:	4b4e      	ldr	r3, [pc, #312]	; (80009e0 <ADC_read+0x1f8>)
 80008a6:	881b      	ldrh	r3, [r3, #0]
 80008a8:	461a      	mov	r2, r3
 80008aa:	2364      	movs	r3, #100	; 0x64
 80008ac:	fb02 f303 	mul.w	r3, r2, r3
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	da00      	bge.n	80008b6 <ADC_read+0xce>
 80008b4:	33ff      	adds	r3, #255	; 0xff
 80008b6:	121b      	asrs	r3, r3, #8
 80008b8:	425b      	negs	r3, r3
 80008ba:	3363      	adds	r3, #99	; 0x63
 80008bc:	ee07 3a90 	vmov	s15, r3
 80008c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008c4:	edc7 7a00 	vstr	s15, [r7]

    // Convert the result to a string
    display_values1[0] = (int)converted_result1 / 10 + 48;  // Convert the result to a string
 80008c8:	edd7 7a02 	vldr	s15, [r7, #8]
 80008cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008d0:	ee17 1a90 	vmov	r1, s15
 80008d4:	4b43      	ldr	r3, [pc, #268]	; (80009e4 <ADC_read+0x1fc>)
 80008d6:	fb83 2301 	smull	r2, r3, r3, r1
 80008da:	109a      	asrs	r2, r3, #2
 80008dc:	17cb      	asrs	r3, r1, #31
 80008de:	1ad3      	subs	r3, r2, r3
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	3330      	adds	r3, #48	; 0x30
 80008e4:	b2da      	uxtb	r2, r3
 80008e6:	4b40      	ldr	r3, [pc, #256]	; (80009e8 <ADC_read+0x200>)
 80008e8:	701a      	strb	r2, [r3, #0]
    display_values1[1] = (int)converted_result1 % 10 + 48;  // Convert the result to a string
 80008ea:	edd7 7a02 	vldr	s15, [r7, #8]
 80008ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008f2:	ee17 1a90 	vmov	r1, s15
 80008f6:	4b3b      	ldr	r3, [pc, #236]	; (80009e4 <ADC_read+0x1fc>)
 80008f8:	fb83 2301 	smull	r2, r3, r3, r1
 80008fc:	109a      	asrs	r2, r3, #2
 80008fe:	17cb      	asrs	r3, r1, #31
 8000900:	1ad2      	subs	r2, r2, r3
 8000902:	4613      	mov	r3, r2
 8000904:	009b      	lsls	r3, r3, #2
 8000906:	4413      	add	r3, r2
 8000908:	005b      	lsls	r3, r3, #1
 800090a:	1aca      	subs	r2, r1, r3
 800090c:	b2d3      	uxtb	r3, r2
 800090e:	3330      	adds	r3, #48	; 0x30
 8000910:	b2da      	uxtb	r2, r3
 8000912:	4b35      	ldr	r3, [pc, #212]	; (80009e8 <ADC_read+0x200>)
 8000914:	705a      	strb	r2, [r3, #1]
    display_values1[2] = '\0';                              // Null-terminate the string
 8000916:	4b34      	ldr	r3, [pc, #208]	; (80009e8 <ADC_read+0x200>)
 8000918:	2200      	movs	r2, #0
 800091a:	709a      	strb	r2, [r3, #2]

    display_values2[0] = (int)converted_result2 / 10 + 48;  // Convert the result to a string
 800091c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000920:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000924:	ee17 1a90 	vmov	r1, s15
 8000928:	4b2e      	ldr	r3, [pc, #184]	; (80009e4 <ADC_read+0x1fc>)
 800092a:	fb83 2301 	smull	r2, r3, r3, r1
 800092e:	109a      	asrs	r2, r3, #2
 8000930:	17cb      	asrs	r3, r1, #31
 8000932:	1ad3      	subs	r3, r2, r3
 8000934:	b2db      	uxtb	r3, r3
 8000936:	3330      	adds	r3, #48	; 0x30
 8000938:	b2da      	uxtb	r2, r3
 800093a:	4b2c      	ldr	r3, [pc, #176]	; (80009ec <ADC_read+0x204>)
 800093c:	701a      	strb	r2, [r3, #0]
    display_values2[1] = (int)converted_result2 % 10 + 48;  // Convert the result to a string
 800093e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000942:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000946:	ee17 1a90 	vmov	r1, s15
 800094a:	4b26      	ldr	r3, [pc, #152]	; (80009e4 <ADC_read+0x1fc>)
 800094c:	fb83 2301 	smull	r2, r3, r3, r1
 8000950:	109a      	asrs	r2, r3, #2
 8000952:	17cb      	asrs	r3, r1, #31
 8000954:	1ad2      	subs	r2, r2, r3
 8000956:	4613      	mov	r3, r2
 8000958:	009b      	lsls	r3, r3, #2
 800095a:	4413      	add	r3, r2
 800095c:	005b      	lsls	r3, r3, #1
 800095e:	1aca      	subs	r2, r1, r3
 8000960:	b2d3      	uxtb	r3, r2
 8000962:	3330      	adds	r3, #48	; 0x30
 8000964:	b2da      	uxtb	r2, r3
 8000966:	4b21      	ldr	r3, [pc, #132]	; (80009ec <ADC_read+0x204>)
 8000968:	705a      	strb	r2, [r3, #1]
    display_values2[2] = '\0';                              // Null-terminate the string
 800096a:	4b20      	ldr	r3, [pc, #128]	; (80009ec <ADC_read+0x204>)
 800096c:	2200      	movs	r2, #0
 800096e:	709a      	strb	r2, [r3, #2]

    display_values3[0] = (int)converted_result3 / 10 + 48;  // Convert the result to a string
 8000970:	edd7 7a00 	vldr	s15, [r7]
 8000974:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000978:	ee17 1a90 	vmov	r1, s15
 800097c:	4b19      	ldr	r3, [pc, #100]	; (80009e4 <ADC_read+0x1fc>)
 800097e:	fb83 2301 	smull	r2, r3, r3, r1
 8000982:	109a      	asrs	r2, r3, #2
 8000984:	17cb      	asrs	r3, r1, #31
 8000986:	1ad3      	subs	r3, r2, r3
 8000988:	b2db      	uxtb	r3, r3
 800098a:	3330      	adds	r3, #48	; 0x30
 800098c:	b2da      	uxtb	r2, r3
 800098e:	4b18      	ldr	r3, [pc, #96]	; (80009f0 <ADC_read+0x208>)
 8000990:	701a      	strb	r2, [r3, #0]
    display_values3[1] = (int)converted_result3 % 10 + 48;  // Convert the result to a string
 8000992:	edd7 7a00 	vldr	s15, [r7]
 8000996:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800099a:	ee17 1a90 	vmov	r1, s15
 800099e:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <ADC_read+0x1fc>)
 80009a0:	fb83 2301 	smull	r2, r3, r3, r1
 80009a4:	109a      	asrs	r2, r3, #2
 80009a6:	17cb      	asrs	r3, r1, #31
 80009a8:	1ad2      	subs	r2, r2, r3
 80009aa:	4613      	mov	r3, r2
 80009ac:	009b      	lsls	r3, r3, #2
 80009ae:	4413      	add	r3, r2
 80009b0:	005b      	lsls	r3, r3, #1
 80009b2:	1aca      	subs	r2, r1, r3
 80009b4:	b2d3      	uxtb	r3, r2
 80009b6:	3330      	adds	r3, #48	; 0x30
 80009b8:	b2da      	uxtb	r2, r3
 80009ba:	4b0d      	ldr	r3, [pc, #52]	; (80009f0 <ADC_read+0x208>)
 80009bc:	705a      	strb	r2, [r3, #1]
    display_values3[2] = '\0';                              // Null-terminate the string
 80009be:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <ADC_read+0x208>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	709a      	strb	r2, [r3, #2]

    sendThroughUART();
 80009c4:	f000 f9f0 	bl	8000da8 <sendThroughUART>
  }
}
 80009c8:	bf00      	nop
 80009ca:	3710      	adds	r7, #16
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	20000264 	.word	0x20000264
 80009d4:	2000005c 	.word	0x2000005c
 80009d8:	200001e4 	.word	0x200001e4
 80009dc:	200001e6 	.word	0x200001e6
 80009e0:	200001e8 	.word	0x200001e8
 80009e4:	66666667 	.word	0x66666667
 80009e8:	200001d8 	.word	0x200001d8
 80009ec:	200001dc 	.word	0x200001dc
 80009f0:	200001e0 	.word	0x200001e0

080009f4 <HAL_UART_RxCpltCallback>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(&huart1, RX_DATA, 44);
 80009fc:	222c      	movs	r2, #44	; 0x2c
 80009fe:	4914      	ldr	r1, [pc, #80]	; (8000a50 <HAL_UART_RxCpltCallback+0x5c>)
 8000a00:	4814      	ldr	r0, [pc, #80]	; (8000a54 <HAL_UART_RxCpltCallback+0x60>)
 8000a02:	f002 fdcd 	bl	80035a0 <HAL_UART_Receive_IT>

  // Extract song and artist from RX_DATA
  strncpy(song, (char *)RX_DATA, 22);
 8000a06:	2216      	movs	r2, #22
 8000a08:	4911      	ldr	r1, [pc, #68]	; (8000a50 <HAL_UART_RxCpltCallback+0x5c>)
 8000a0a:	4813      	ldr	r0, [pc, #76]	; (8000a58 <HAL_UART_RxCpltCallback+0x64>)
 8000a0c:	f005 fcbb 	bl	8006386 <strncpy>
  strncpy(artist, (char *)RX_DATA + 22, 22);
 8000a10:	4b12      	ldr	r3, [pc, #72]	; (8000a5c <HAL_UART_RxCpltCallback+0x68>)
 8000a12:	2216      	movs	r2, #22
 8000a14:	4619      	mov	r1, r3
 8000a16:	4812      	ldr	r0, [pc, #72]	; (8000a60 <HAL_UART_RxCpltCallback+0x6c>)
 8000a18:	f005 fcb5 	bl	8006386 <strncpy>

  // Null-terminate the strings
  song[22] = '\0';    // Null-terminate the string
 8000a1c:	4b0e      	ldr	r3, [pc, #56]	; (8000a58 <HAL_UART_RxCpltCallback+0x64>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	759a      	strb	r2, [r3, #22]
  artist[22] = '\0';  // Null-terminate the string
 8000a22:	4b0f      	ldr	r3, [pc, #60]	; (8000a60 <HAL_UART_RxCpltCallback+0x6c>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	759a      	strb	r2, [r3, #22]

  // Clear RX_DATA
  for (int i = 0; i < 44; i++)
 8000a28:	2300      	movs	r3, #0
 8000a2a:	60fb      	str	r3, [r7, #12]
 8000a2c:	e007      	b.n	8000a3e <HAL_UART_RxCpltCallback+0x4a>
  {
    RX_DATA[i] = 0;
 8000a2e:	4a08      	ldr	r2, [pc, #32]	; (8000a50 <HAL_UART_RxCpltCallback+0x5c>)
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	4413      	add	r3, r2
 8000a34:	2200      	movs	r2, #0
 8000a36:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < 44; i++)
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	60fb      	str	r3, [r7, #12]
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	2b2b      	cmp	r3, #43	; 0x2b
 8000a42:	ddf4      	ble.n	8000a2e <HAL_UART_RxCpltCallback+0x3a>
  }
}
 8000a44:	bf00      	nop
 8000a46:	bf00      	nop
 8000a48:	3710      	adds	r7, #16
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	20000234 	.word	0x20000234
 8000a54:	200000fc 	.word	0x200000fc
 8000a58:	20000204 	.word	0x20000204
 8000a5c:	2000024a 	.word	0x2000024a
 8000a60:	2000021c 	.word	0x2000021c

08000a64 <updateScreen>:
 * It uses the u8g2 library to draw various elements on the screen, such as the current time,
 * the currently playing song and artist, and some display values.
 * The screen is updated every 100 milliseconds.
 */
void updateScreen()
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af02      	add	r7, sp, #8
  static uint32_t last_update_time_3 = 0;
  uint32_t current_time_3 = HAL_GetTick();
 8000a6a:	f000 fdef 	bl	800164c <HAL_GetTick>
 8000a6e:	6078      	str	r0, [r7, #4]

  if (current_time_3 - last_update_time_3 >= 100)
 8000a70:	4b43      	ldr	r3, [pc, #268]	; (8000b80 <updateScreen+0x11c>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	687a      	ldr	r2, [r7, #4]
 8000a76:	1ad3      	subs	r3, r2, r3
 8000a78:	2b63      	cmp	r3, #99	; 0x63
 8000a7a:	d97d      	bls.n	8000b78 <updateScreen+0x114>
  {
    last_update_time_3 = current_time_3;
 8000a7c:	4a40      	ldr	r2, [pc, #256]	; (8000b80 <updateScreen+0x11c>)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	6013      	str	r3, [r2, #0]

    u8g2_FirstPage(&u8g2);
 8000a82:	4840      	ldr	r0, [pc, #256]	; (8000b84 <updateScreen+0x120>)
 8000a84:	f003 fd93 	bl	80045ae <u8g2_FirstPage>
    do
    {
      u8g2_SetFont(&u8g2, u8g2_font_ncenB14_tr);
 8000a88:	493f      	ldr	r1, [pc, #252]	; (8000b88 <updateScreen+0x124>)
 8000a8a:	483e      	ldr	r0, [pc, #248]	; (8000b84 <updateScreen+0x120>)
 8000a8c:	f004 fcb2 	bl	80053f4 <u8g2_SetFont>
      getHour();
 8000a90:	f7ff fe20 	bl	80006d4 <getHour>
      u8g2_DrawStr(&u8g2, 50, 18, hoursandminutes);
 8000a94:	4b3d      	ldr	r3, [pc, #244]	; (8000b8c <updateScreen+0x128>)
 8000a96:	2212      	movs	r2, #18
 8000a98:	2132      	movs	r1, #50	; 0x32
 8000a9a:	483a      	ldr	r0, [pc, #232]	; (8000b84 <updateScreen+0x120>)
 8000a9c:	f004 fc08 	bl	80052b0 <u8g2_DrawStr>
      u8g2_DrawLine(&u8g2, 0, 20, 128, 20);
 8000aa0:	2314      	movs	r3, #20
 8000aa2:	9300      	str	r3, [sp, #0]
 8000aa4:	2380      	movs	r3, #128	; 0x80
 8000aa6:	2214      	movs	r2, #20
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	4836      	ldr	r0, [pc, #216]	; (8000b84 <updateScreen+0x120>)
 8000aac:	f004 fe47 	bl	800573e <u8g2_DrawLine>
      u8g2_DrawLine(&u8g2, 20, 0, 20, 20);
 8000ab0:	2314      	movs	r3, #20
 8000ab2:	9300      	str	r3, [sp, #0]
 8000ab4:	2314      	movs	r3, #20
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	2114      	movs	r1, #20
 8000aba:	4832      	ldr	r0, [pc, #200]	; (8000b84 <updateScreen+0x120>)
 8000abc:	f004 fe3f 	bl	800573e <u8g2_DrawLine>
      u8g2_SetFont(&u8g2, u8g2_font_t0_12b_tf);
 8000ac0:	4933      	ldr	r1, [pc, #204]	; (8000b90 <updateScreen+0x12c>)
 8000ac2:	4830      	ldr	r0, [pc, #192]	; (8000b84 <updateScreen+0x120>)
 8000ac4:	f004 fc96 	bl	80053f4 <u8g2_SetFont>
      u8g2_DrawCircle(&u8g2, 10, 10, 7, U8G2_DRAW_ALL);
 8000ac8:	230f      	movs	r3, #15
 8000aca:	9300      	str	r3, [sp, #0]
 8000acc:	2307      	movs	r3, #7
 8000ace:	220a      	movs	r2, #10
 8000ad0:	210a      	movs	r1, #10
 8000ad2:	482c      	ldr	r0, [pc, #176]	; (8000b84 <updateScreen+0x120>)
 8000ad4:	f003 fe95 	bl	8004802 <u8g2_DrawCircle>
      u8g2_DrawStr(&u8g2, 8, 13, last_key);
 8000ad8:	4b2e      	ldr	r3, [pc, #184]	; (8000b94 <updateScreen+0x130>)
 8000ada:	220d      	movs	r2, #13
 8000adc:	2108      	movs	r1, #8
 8000ade:	4829      	ldr	r0, [pc, #164]	; (8000b84 <updateScreen+0x120>)
 8000ae0:	f004 fbe6 	bl	80052b0 <u8g2_DrawStr>
      u8g2_DrawStr(&u8g2, 20, 55, "Listening to:");
 8000ae4:	4b2c      	ldr	r3, [pc, #176]	; (8000b98 <updateScreen+0x134>)
 8000ae6:	2237      	movs	r2, #55	; 0x37
 8000ae8:	2114      	movs	r1, #20
 8000aea:	4826      	ldr	r0, [pc, #152]	; (8000b84 <updateScreen+0x120>)
 8000aec:	f004 fbe0 	bl	80052b0 <u8g2_DrawStr>
      u8g2_DrawStr(&u8g2, 2, 70, song);
 8000af0:	4b2a      	ldr	r3, [pc, #168]	; (8000b9c <updateScreen+0x138>)
 8000af2:	2246      	movs	r2, #70	; 0x46
 8000af4:	2102      	movs	r1, #2
 8000af6:	4823      	ldr	r0, [pc, #140]	; (8000b84 <updateScreen+0x120>)
 8000af8:	f004 fbda 	bl	80052b0 <u8g2_DrawStr>
      u8g2_DrawStr(&u8g2, 50, 80, "by");
 8000afc:	4b28      	ldr	r3, [pc, #160]	; (8000ba0 <updateScreen+0x13c>)
 8000afe:	2250      	movs	r2, #80	; 0x50
 8000b00:	2132      	movs	r1, #50	; 0x32
 8000b02:	4820      	ldr	r0, [pc, #128]	; (8000b84 <updateScreen+0x120>)
 8000b04:	f004 fbd4 	bl	80052b0 <u8g2_DrawStr>
      u8g2_DrawStr(&u8g2, 2, 90, artist);
 8000b08:	4b26      	ldr	r3, [pc, #152]	; (8000ba4 <updateScreen+0x140>)
 8000b0a:	225a      	movs	r2, #90	; 0x5a
 8000b0c:	2102      	movs	r1, #2
 8000b0e:	481d      	ldr	r0, [pc, #116]	; (8000b84 <updateScreen+0x120>)
 8000b10:	f004 fbce 	bl	80052b0 <u8g2_DrawStr>
      u8g2_DrawLine(&u8g2, 0, 108, 128, 108);
 8000b14:	236c      	movs	r3, #108	; 0x6c
 8000b16:	9300      	str	r3, [sp, #0]
 8000b18:	2380      	movs	r3, #128	; 0x80
 8000b1a:	226c      	movs	r2, #108	; 0x6c
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	4819      	ldr	r0, [pc, #100]	; (8000b84 <updateScreen+0x120>)
 8000b20:	f004 fe0d 	bl	800573e <u8g2_DrawLine>
      u8g2_DrawStr(&u8g2, 2, 122, "1-");
 8000b24:	4b20      	ldr	r3, [pc, #128]	; (8000ba8 <updateScreen+0x144>)
 8000b26:	227a      	movs	r2, #122	; 0x7a
 8000b28:	2102      	movs	r1, #2
 8000b2a:	4816      	ldr	r0, [pc, #88]	; (8000b84 <updateScreen+0x120>)
 8000b2c:	f004 fbc0 	bl	80052b0 <u8g2_DrawStr>
      u8g2_DrawStr(&u8g2, 14, 122, display_values1);
 8000b30:	4b1e      	ldr	r3, [pc, #120]	; (8000bac <updateScreen+0x148>)
 8000b32:	227a      	movs	r2, #122	; 0x7a
 8000b34:	210e      	movs	r1, #14
 8000b36:	4813      	ldr	r0, [pc, #76]	; (8000b84 <updateScreen+0x120>)
 8000b38:	f004 fbba 	bl	80052b0 <u8g2_DrawStr>
      u8g2_DrawStr(&u8g2, 54, 122, "2-");
 8000b3c:	4b1c      	ldr	r3, [pc, #112]	; (8000bb0 <updateScreen+0x14c>)
 8000b3e:	227a      	movs	r2, #122	; 0x7a
 8000b40:	2136      	movs	r1, #54	; 0x36
 8000b42:	4810      	ldr	r0, [pc, #64]	; (8000b84 <updateScreen+0x120>)
 8000b44:	f004 fbb4 	bl	80052b0 <u8g2_DrawStr>
      u8g2_DrawStr(&u8g2, 66, 122, display_values2);
 8000b48:	4b1a      	ldr	r3, [pc, #104]	; (8000bb4 <updateScreen+0x150>)
 8000b4a:	227a      	movs	r2, #122	; 0x7a
 8000b4c:	2142      	movs	r1, #66	; 0x42
 8000b4e:	480d      	ldr	r0, [pc, #52]	; (8000b84 <updateScreen+0x120>)
 8000b50:	f004 fbae 	bl	80052b0 <u8g2_DrawStr>
      u8g2_DrawStr(&u8g2, 102, 122, "3-");
 8000b54:	4b18      	ldr	r3, [pc, #96]	; (8000bb8 <updateScreen+0x154>)
 8000b56:	227a      	movs	r2, #122	; 0x7a
 8000b58:	2166      	movs	r1, #102	; 0x66
 8000b5a:	480a      	ldr	r0, [pc, #40]	; (8000b84 <updateScreen+0x120>)
 8000b5c:	f004 fba8 	bl	80052b0 <u8g2_DrawStr>
      u8g2_DrawStr(&u8g2, 114, 122, display_values3);
 8000b60:	4b16      	ldr	r3, [pc, #88]	; (8000bbc <updateScreen+0x158>)
 8000b62:	227a      	movs	r2, #122	; 0x7a
 8000b64:	2172      	movs	r1, #114	; 0x72
 8000b66:	4807      	ldr	r0, [pc, #28]	; (8000b84 <updateScreen+0x120>)
 8000b68:	f004 fba2 	bl	80052b0 <u8g2_DrawStr>
      // clear the string
    } while (u8g2_NextPage(&u8g2));
 8000b6c:	4805      	ldr	r0, [pc, #20]	; (8000b84 <updateScreen+0x120>)
 8000b6e:	f003 fd32 	bl	80045d6 <u8g2_NextPage>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d187      	bne.n	8000a88 <updateScreen+0x24>
  }
}
 8000b78:	bf00      	nop
 8000b7a:	3708      	adds	r7, #8
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	20000268 	.word	0x20000268
 8000b84:	20000144 	.word	0x20000144
 8000b88:	0800fdcc 	.word	0x0800fdcc
 8000b8c:	200001ec 	.word	0x200001ec
 8000b90:	0800f59c 	.word	0x0800f59c
 8000b94:	20000030 	.word	0x20000030
 8000b98:	0800640c 	.word	0x0800640c
 8000b9c:	20000204 	.word	0x20000204
 8000ba0:	0800641c 	.word	0x0800641c
 8000ba4:	2000021c 	.word	0x2000021c
 8000ba8:	08006420 	.word	0x08006420
 8000bac:	200001d8 	.word	0x200001d8
 8000bb0:	08006424 	.word	0x08006424
 8000bb4:	200001dc 	.word	0x200001dc
 8000bb8:	08006428 	.word	0x08006428
 8000bbc:	200001e0 	.word	0x200001e0

08000bc0 <constructSkeleton>:
 * It uses the u8g2 library to control the display and draw text.
 * 
 * @note This function assumes that the u8g2 library has been properly initialized.
 */
void constructSkeleton()
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  u8g2_FirstPage(&u8g2);
 8000bc4:	4813      	ldr	r0, [pc, #76]	; (8000c14 <constructSkeleton+0x54>)
 8000bc6:	f003 fcf2 	bl	80045ae <u8g2_FirstPage>

  do
  {
    // Draw the waiting message
    u8g2_SetFont(&u8g2, u8g2_font_t0_11_t_all);
 8000bca:	4913      	ldr	r1, [pc, #76]	; (8000c18 <constructSkeleton+0x58>)
 8000bcc:	4811      	ldr	r0, [pc, #68]	; (8000c14 <constructSkeleton+0x54>)
 8000bce:	f004 fc11 	bl	80053f4 <u8g2_SetFont>
    u8g2_DrawStr(&u8g2, 10, 30, "Waiting for serial");
 8000bd2:	4b12      	ldr	r3, [pc, #72]	; (8000c1c <constructSkeleton+0x5c>)
 8000bd4:	221e      	movs	r2, #30
 8000bd6:	210a      	movs	r1, #10
 8000bd8:	480e      	ldr	r0, [pc, #56]	; (8000c14 <constructSkeleton+0x54>)
 8000bda:	f004 fb69 	bl	80052b0 <u8g2_DrawStr>
    u8g2_DrawStr(&u8g2, 10, 50, "connection...");
 8000bde:	4b10      	ldr	r3, [pc, #64]	; (8000c20 <constructSkeleton+0x60>)
 8000be0:	2232      	movs	r2, #50	; 0x32
 8000be2:	210a      	movs	r1, #10
 8000be4:	480b      	ldr	r0, [pc, #44]	; (8000c14 <constructSkeleton+0x54>)
 8000be6:	f004 fb63 	bl	80052b0 <u8g2_DrawStr>
    u8g2_DrawStr(&u8g2, 10, 70, "Please set the time");
 8000bea:	4b0e      	ldr	r3, [pc, #56]	; (8000c24 <constructSkeleton+0x64>)
 8000bec:	2246      	movs	r2, #70	; 0x46
 8000bee:	210a      	movs	r1, #10
 8000bf0:	4808      	ldr	r0, [pc, #32]	; (8000c14 <constructSkeleton+0x54>)
 8000bf2:	f004 fb5d 	bl	80052b0 <u8g2_DrawStr>
    u8g2_DrawStr(&u8g2, 10, 90, "on your PC");
 8000bf6:	4b0c      	ldr	r3, [pc, #48]	; (8000c28 <constructSkeleton+0x68>)
 8000bf8:	225a      	movs	r2, #90	; 0x5a
 8000bfa:	210a      	movs	r1, #10
 8000bfc:	4805      	ldr	r0, [pc, #20]	; (8000c14 <constructSkeleton+0x54>)
 8000bfe:	f004 fb57 	bl	80052b0 <u8g2_DrawStr>
  } while (u8g2_NextPage(&u8g2));
 8000c02:	4804      	ldr	r0, [pc, #16]	; (8000c14 <constructSkeleton+0x54>)
 8000c04:	f003 fce7 	bl	80045d6 <u8g2_NextPage>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d1dd      	bne.n	8000bca <constructSkeleton+0xa>
}
 8000c0e:	bf00      	nop
 8000c10:	bf00      	nop
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	20000144 	.word	0x20000144
 8000c18:	080064d4 	.word	0x080064d4
 8000c1c:	0800642c 	.word	0x0800642c
 8000c20:	08006440 	.word	0x08006440
 8000c24:	08006450 	.word	0x08006450
 8000c28:	08006464 	.word	0x08006464

08000c2c <HAL_GPIO_EXTI_Callback>:
  * @brief  GPIO EXTI callback function.
  * @param  GPIO_Pin: Specifies the pin connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4603      	mov	r3, r0
 8000c34:	80fb      	strh	r3, [r7, #6]
  static uint32_t last_interrupt_time_1 = 0;
  uint32_t interrupt_time_1 = HAL_GetTick();
 8000c36:	f000 fd09 	bl	800164c <HAL_GetTick>
 8000c3a:	60f8      	str	r0, [r7, #12]

  if (interrupt_time_1 - last_interrupt_time_1 > 200) // Debounce time of 200ms
 8000c3c:	4b4e      	ldr	r3, [pc, #312]	; (8000d78 <HAL_GPIO_EXTI_Callback+0x14c>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	68fa      	ldr	r2, [r7, #12]
 8000c42:	1ad3      	subs	r3, r2, r3
 8000c44:	2bc8      	cmp	r3, #200	; 0xc8
 8000c46:	f240 808f 	bls.w	8000d68 <HAL_GPIO_EXTI_Callback+0x13c>
  {
    switch (GPIO_Pin)
 8000c4a:	88fb      	ldrh	r3, [r7, #6]
 8000c4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000c50:	d073      	beq.n	8000d3a <HAL_GPIO_EXTI_Callback+0x10e>
 8000c52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000c56:	f300 8086 	bgt.w	8000d66 <HAL_GPIO_EXTI_Callback+0x13a>
 8000c5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000c5e:	d077      	beq.n	8000d50 <HAL_GPIO_EXTI_Callback+0x124>
 8000c60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000c64:	dc7f      	bgt.n	8000d66 <HAL_GPIO_EXTI_Callback+0x13a>
 8000c66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c6a:	d019      	beq.n	8000ca0 <HAL_GPIO_EXTI_Callback+0x74>
 8000c6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c70:	dc79      	bgt.n	8000d66 <HAL_GPIO_EXTI_Callback+0x13a>
 8000c72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c76:	d01e      	beq.n	8000cb6 <HAL_GPIO_EXTI_Callback+0x8a>
 8000c78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c7c:	dc73      	bgt.n	8000d66 <HAL_GPIO_EXTI_Callback+0x13a>
 8000c7e:	2b80      	cmp	r3, #128	; 0x80
 8000c80:	d024      	beq.n	8000ccc <HAL_GPIO_EXTI_Callback+0xa0>
 8000c82:	2b80      	cmp	r3, #128	; 0x80
 8000c84:	dc6f      	bgt.n	8000d66 <HAL_GPIO_EXTI_Callback+0x13a>
 8000c86:	2b40      	cmp	r3, #64	; 0x40
 8000c88:	d02b      	beq.n	8000ce2 <HAL_GPIO_EXTI_Callback+0xb6>
 8000c8a:	2b40      	cmp	r3, #64	; 0x40
 8000c8c:	dc6b      	bgt.n	8000d66 <HAL_GPIO_EXTI_Callback+0x13a>
 8000c8e:	2b20      	cmp	r3, #32
 8000c90:	d032      	beq.n	8000cf8 <HAL_GPIO_EXTI_Callback+0xcc>
 8000c92:	2b20      	cmp	r3, #32
 8000c94:	dc67      	bgt.n	8000d66 <HAL_GPIO_EXTI_Callback+0x13a>
 8000c96:	2b08      	cmp	r3, #8
 8000c98:	d044      	beq.n	8000d24 <HAL_GPIO_EXTI_Callback+0xf8>
 8000c9a:	2b10      	cmp	r3, #16
 8000c9c:	d037      	beq.n	8000d0e <HAL_GPIO_EXTI_Callback+0xe2>
    case BUT9_Pin:
      HAL_UART_Transmit(&huart1, (uint8_t *)"key9\0", 5, 1000);
      last_key[0] = '9';
      break;
    default:
      break;
 8000c9e:	e062      	b.n	8000d66 <HAL_GPIO_EXTI_Callback+0x13a>
      HAL_UART_Transmit(&huart1, (uint8_t *)"key1\0", 5, 1000);
 8000ca0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ca4:	2205      	movs	r2, #5
 8000ca6:	4935      	ldr	r1, [pc, #212]	; (8000d7c <HAL_GPIO_EXTI_Callback+0x150>)
 8000ca8:	4835      	ldr	r0, [pc, #212]	; (8000d80 <HAL_GPIO_EXTI_Callback+0x154>)
 8000caa:	f002 fb57 	bl	800335c <HAL_UART_Transmit>
      last_key[0] = '1';
 8000cae:	4b35      	ldr	r3, [pc, #212]	; (8000d84 <HAL_GPIO_EXTI_Callback+0x158>)
 8000cb0:	2231      	movs	r2, #49	; 0x31
 8000cb2:	701a      	strb	r2, [r3, #0]
      break;
 8000cb4:	e058      	b.n	8000d68 <HAL_GPIO_EXTI_Callback+0x13c>
      HAL_UART_Transmit(&huart1, (uint8_t *)"key2\0", 5, 1000);
 8000cb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cba:	2205      	movs	r2, #5
 8000cbc:	4932      	ldr	r1, [pc, #200]	; (8000d88 <HAL_GPIO_EXTI_Callback+0x15c>)
 8000cbe:	4830      	ldr	r0, [pc, #192]	; (8000d80 <HAL_GPIO_EXTI_Callback+0x154>)
 8000cc0:	f002 fb4c 	bl	800335c <HAL_UART_Transmit>
      last_key[0] = '2';
 8000cc4:	4b2f      	ldr	r3, [pc, #188]	; (8000d84 <HAL_GPIO_EXTI_Callback+0x158>)
 8000cc6:	2232      	movs	r2, #50	; 0x32
 8000cc8:	701a      	strb	r2, [r3, #0]
      break;
 8000cca:	e04d      	b.n	8000d68 <HAL_GPIO_EXTI_Callback+0x13c>
      HAL_UART_Transmit(&huart1, (uint8_t *)"key3\0", 5, 1000);
 8000ccc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cd0:	2205      	movs	r2, #5
 8000cd2:	492e      	ldr	r1, [pc, #184]	; (8000d8c <HAL_GPIO_EXTI_Callback+0x160>)
 8000cd4:	482a      	ldr	r0, [pc, #168]	; (8000d80 <HAL_GPIO_EXTI_Callback+0x154>)
 8000cd6:	f002 fb41 	bl	800335c <HAL_UART_Transmit>
      last_key[0] = '3';
 8000cda:	4b2a      	ldr	r3, [pc, #168]	; (8000d84 <HAL_GPIO_EXTI_Callback+0x158>)
 8000cdc:	2233      	movs	r2, #51	; 0x33
 8000cde:	701a      	strb	r2, [r3, #0]
      break;
 8000ce0:	e042      	b.n	8000d68 <HAL_GPIO_EXTI_Callback+0x13c>
      HAL_UART_Transmit(&huart1, (uint8_t *)"key4\0", 5, 1000);
 8000ce2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ce6:	2205      	movs	r2, #5
 8000ce8:	4929      	ldr	r1, [pc, #164]	; (8000d90 <HAL_GPIO_EXTI_Callback+0x164>)
 8000cea:	4825      	ldr	r0, [pc, #148]	; (8000d80 <HAL_GPIO_EXTI_Callback+0x154>)
 8000cec:	f002 fb36 	bl	800335c <HAL_UART_Transmit>
      last_key[0] = '4';
 8000cf0:	4b24      	ldr	r3, [pc, #144]	; (8000d84 <HAL_GPIO_EXTI_Callback+0x158>)
 8000cf2:	2234      	movs	r2, #52	; 0x34
 8000cf4:	701a      	strb	r2, [r3, #0]
      break;
 8000cf6:	e037      	b.n	8000d68 <HAL_GPIO_EXTI_Callback+0x13c>
      HAL_UART_Transmit(&huart1, (uint8_t *)"key5\0", 5, 1000);
 8000cf8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cfc:	2205      	movs	r2, #5
 8000cfe:	4925      	ldr	r1, [pc, #148]	; (8000d94 <HAL_GPIO_EXTI_Callback+0x168>)
 8000d00:	481f      	ldr	r0, [pc, #124]	; (8000d80 <HAL_GPIO_EXTI_Callback+0x154>)
 8000d02:	f002 fb2b 	bl	800335c <HAL_UART_Transmit>
      last_key[0] = '5';
 8000d06:	4b1f      	ldr	r3, [pc, #124]	; (8000d84 <HAL_GPIO_EXTI_Callback+0x158>)
 8000d08:	2235      	movs	r2, #53	; 0x35
 8000d0a:	701a      	strb	r2, [r3, #0]
      break;
 8000d0c:	e02c      	b.n	8000d68 <HAL_GPIO_EXTI_Callback+0x13c>
      HAL_UART_Transmit(&huart1, (uint8_t *)"key6\0", 5, 1000);
 8000d0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d12:	2205      	movs	r2, #5
 8000d14:	4920      	ldr	r1, [pc, #128]	; (8000d98 <HAL_GPIO_EXTI_Callback+0x16c>)
 8000d16:	481a      	ldr	r0, [pc, #104]	; (8000d80 <HAL_GPIO_EXTI_Callback+0x154>)
 8000d18:	f002 fb20 	bl	800335c <HAL_UART_Transmit>
      last_key[0] = '6';
 8000d1c:	4b19      	ldr	r3, [pc, #100]	; (8000d84 <HAL_GPIO_EXTI_Callback+0x158>)
 8000d1e:	2236      	movs	r2, #54	; 0x36
 8000d20:	701a      	strb	r2, [r3, #0]
      break;
 8000d22:	e021      	b.n	8000d68 <HAL_GPIO_EXTI_Callback+0x13c>
      HAL_UART_Transmit(&huart1, (uint8_t *)"key7\0", 5, 1000);
 8000d24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d28:	2205      	movs	r2, #5
 8000d2a:	491c      	ldr	r1, [pc, #112]	; (8000d9c <HAL_GPIO_EXTI_Callback+0x170>)
 8000d2c:	4814      	ldr	r0, [pc, #80]	; (8000d80 <HAL_GPIO_EXTI_Callback+0x154>)
 8000d2e:	f002 fb15 	bl	800335c <HAL_UART_Transmit>
      last_key[0] = '7';
 8000d32:	4b14      	ldr	r3, [pc, #80]	; (8000d84 <HAL_GPIO_EXTI_Callback+0x158>)
 8000d34:	2237      	movs	r2, #55	; 0x37
 8000d36:	701a      	strb	r2, [r3, #0]
      break;
 8000d38:	e016      	b.n	8000d68 <HAL_GPIO_EXTI_Callback+0x13c>
      HAL_UART_Transmit(&huart1, (uint8_t *)"key8\0", 5, 1000);
 8000d3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d3e:	2205      	movs	r2, #5
 8000d40:	4917      	ldr	r1, [pc, #92]	; (8000da0 <HAL_GPIO_EXTI_Callback+0x174>)
 8000d42:	480f      	ldr	r0, [pc, #60]	; (8000d80 <HAL_GPIO_EXTI_Callback+0x154>)
 8000d44:	f002 fb0a 	bl	800335c <HAL_UART_Transmit>
      last_key[0] = '8';
 8000d48:	4b0e      	ldr	r3, [pc, #56]	; (8000d84 <HAL_GPIO_EXTI_Callback+0x158>)
 8000d4a:	2238      	movs	r2, #56	; 0x38
 8000d4c:	701a      	strb	r2, [r3, #0]
      break;
 8000d4e:	e00b      	b.n	8000d68 <HAL_GPIO_EXTI_Callback+0x13c>
      HAL_UART_Transmit(&huart1, (uint8_t *)"key9\0", 5, 1000);
 8000d50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d54:	2205      	movs	r2, #5
 8000d56:	4913      	ldr	r1, [pc, #76]	; (8000da4 <HAL_GPIO_EXTI_Callback+0x178>)
 8000d58:	4809      	ldr	r0, [pc, #36]	; (8000d80 <HAL_GPIO_EXTI_Callback+0x154>)
 8000d5a:	f002 faff 	bl	800335c <HAL_UART_Transmit>
      last_key[0] = '9';
 8000d5e:	4b09      	ldr	r3, [pc, #36]	; (8000d84 <HAL_GPIO_EXTI_Callback+0x158>)
 8000d60:	2239      	movs	r2, #57	; 0x39
 8000d62:	701a      	strb	r2, [r3, #0]
      break;
 8000d64:	e000      	b.n	8000d68 <HAL_GPIO_EXTI_Callback+0x13c>
      break;
 8000d66:	bf00      	nop
    }
  }

  last_interrupt_time_1 = interrupt_time_1;
 8000d68:	4a03      	ldr	r2, [pc, #12]	; (8000d78 <HAL_GPIO_EXTI_Callback+0x14c>)
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	6013      	str	r3, [r2, #0]
}
 8000d6e:	bf00      	nop
 8000d70:	3710      	adds	r7, #16
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	2000026c 	.word	0x2000026c
 8000d7c:	08006470 	.word	0x08006470
 8000d80:	200000fc 	.word	0x200000fc
 8000d84:	20000030 	.word	0x20000030
 8000d88:	08006478 	.word	0x08006478
 8000d8c:	08006480 	.word	0x08006480
 8000d90:	08006488 	.word	0x08006488
 8000d94:	08006490 	.word	0x08006490
 8000d98:	08006498 	.word	0x08006498
 8000d9c:	080064a0 	.word	0x080064a0
 8000da0:	080064a8 	.word	0x080064a8
 8000da4:	080064b0 	.word	0x080064b0

08000da8 <sendThroughUART>:
 * This function sends data through UART using the HAL_UART_Transmit function.
 * It populates the 'packet' array with data from 'pot1', 'pot2', and 'pot3' variables,
 * and then transmits the packet through UART.
 */
void sendThroughUART()
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  packet[0] = 'p';  // Packet type
 8000dac:	4b0e      	ldr	r3, [pc, #56]	; (8000de8 <sendThroughUART+0x40>)
 8000dae:	2270      	movs	r2, #112	; 0x70
 8000db0:	701a      	strb	r2, [r3, #0]
  packet[1] = pot1; // Potentiometer values
 8000db2:	4b0e      	ldr	r3, [pc, #56]	; (8000dec <sendThroughUART+0x44>)
 8000db4:	881b      	ldrh	r3, [r3, #0]
 8000db6:	b2da      	uxtb	r2, r3
 8000db8:	4b0b      	ldr	r3, [pc, #44]	; (8000de8 <sendThroughUART+0x40>)
 8000dba:	705a      	strb	r2, [r3, #1]
  packet[2] = pot2; // Potentiometer values
 8000dbc:	4b0c      	ldr	r3, [pc, #48]	; (8000df0 <sendThroughUART+0x48>)
 8000dbe:	881b      	ldrh	r3, [r3, #0]
 8000dc0:	b2da      	uxtb	r2, r3
 8000dc2:	4b09      	ldr	r3, [pc, #36]	; (8000de8 <sendThroughUART+0x40>)
 8000dc4:	709a      	strb	r2, [r3, #2]
  packet[3] = pot3; // Potentiometer values
 8000dc6:	4b0b      	ldr	r3, [pc, #44]	; (8000df4 <sendThroughUART+0x4c>)
 8000dc8:	881b      	ldrh	r3, [r3, #0]
 8000dca:	b2da      	uxtb	r2, r3
 8000dcc:	4b06      	ldr	r3, [pc, #24]	; (8000de8 <sendThroughUART+0x40>)
 8000dce:	70da      	strb	r2, [r3, #3]
  packet[4] = '\0'; // Null-terminate the string
 8000dd0:	4b05      	ldr	r3, [pc, #20]	; (8000de8 <sendThroughUART+0x40>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	711a      	strb	r2, [r3, #4]

  // Send the packet through UART
  HAL_UART_Transmit(&huart1, (uint8_t *)packet, 5, 1000);
 8000dd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dda:	2205      	movs	r2, #5
 8000ddc:	4902      	ldr	r1, [pc, #8]	; (8000de8 <sendThroughUART+0x40>)
 8000dde:	4806      	ldr	r0, [pc, #24]	; (8000df8 <sendThroughUART+0x50>)
 8000de0:	f002 fabc 	bl	800335c <HAL_UART_Transmit>
}
 8000de4:	bf00      	nop
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	200001fc 	.word	0x200001fc
 8000dec:	200001e4 	.word	0x200001e4
 8000df0:	200001e6 	.word	0x200001e6
 8000df4:	200001e8 	.word	0x200001e8
 8000df8:	200000fc 	.word	0x200000fc

08000dfc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e00:	f000 fbbe 	bl	8001580 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e04:	f000 f854 	bl	8000eb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e08:	f000 f990 	bl	800112c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000e0c:	f000 f92e 	bl	800106c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000e10:	f000 f962 	bl	80010d8 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000e14:	f000 f8b6 	bl	8000f84 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  // Initialize the OLED display
  u8g2_Setup_sh1107_pimoroni_128x128_1(&u8g2, U8G2_R2, u8x8_byte_4wire_hw_spi,
 8000e18:	4b1a      	ldr	r3, [pc, #104]	; (8000e84 <main+0x88>)
 8000e1a:	4a1b      	ldr	r2, [pc, #108]	; (8000e88 <main+0x8c>)
 8000e1c:	491b      	ldr	r1, [pc, #108]	; (8000e8c <main+0x90>)
 8000e1e:	481c      	ldr	r0, [pc, #112]	; (8000e90 <main+0x94>)
 8000e20:	f003 fd38 	bl	8004894 <u8g2_Setup_sh1107_pimoroni_128x128_1>
                                       u8x8_stm32_gpio_and_delay);
  u8g2_InitDisplay(&u8g2);
 8000e24:	481a      	ldr	r0, [pc, #104]	; (8000e90 <main+0x94>)
 8000e26:	f005 fa09 	bl	800623c <u8x8_InitDisplay>
  u8g2_SetPowerSave(&u8g2, 0);
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	4818      	ldr	r0, [pc, #96]	; (8000e90 <main+0x94>)
 8000e2e:	f005 fa14 	bl	800625a <u8x8_SetPowerSave>

  // Construct the skeleton of the display
  constructSkeleton();
 8000e32:	f7ff fec5 	bl	8000bc0 <constructSkeleton>

  // Get the first hour from the serial
  setFirstHour();
 8000e36:	f7ff fc1f 	bl	8000678 <setFirstHour>

  // Send the first packet for handshake
  HAL_UART_Transmit(&huart1, (uint8_t *)"p\0", 2, 1000);
 8000e3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e3e:	2202      	movs	r2, #2
 8000e40:	4914      	ldr	r1, [pc, #80]	; (8000e94 <main+0x98>)
 8000e42:	4815      	ldr	r0, [pc, #84]	; (8000e98 <main+0x9c>)
 8000e44:	f002 fa8a 	bl	800335c <HAL_UART_Transmit>

  // Start the UART receive interrupt
  HAL_UART_Receive_IT(&huart1, RX_DATA, 44);
 8000e48:	222c      	movs	r2, #44	; 0x2c
 8000e4a:	4914      	ldr	r1, [pc, #80]	; (8000e9c <main+0xa0>)
 8000e4c:	4812      	ldr	r0, [pc, #72]	; (8000e98 <main+0x9c>)
 8000e4e:	f002 fba7 	bl	80035a0 <HAL_UART_Receive_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    // take the first 2 values from potentiometers and convert them to string
    ADC_read();
 8000e52:	f7ff fcc9 	bl	80007e8 <ADC_read>

    // handle the case when the song and artist are empty
    if (song[0] == '\0')
 8000e56:	4b12      	ldr	r3, [pc, #72]	; (8000ea0 <main+0xa4>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d104      	bne.n	8000e68 <main+0x6c>
    {
      strncpy(song, default_song, 23);
 8000e5e:	2217      	movs	r2, #23
 8000e60:	4910      	ldr	r1, [pc, #64]	; (8000ea4 <main+0xa8>)
 8000e62:	480f      	ldr	r0, [pc, #60]	; (8000ea0 <main+0xa4>)
 8000e64:	f005 fa8f 	bl	8006386 <strncpy>
    }
    if (artist[0] == '\0')
 8000e68:	4b0f      	ldr	r3, [pc, #60]	; (8000ea8 <main+0xac>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d104      	bne.n	8000e7a <main+0x7e>
    {
      strncpy(artist, default_artist, 23);
 8000e70:	2217      	movs	r2, #23
 8000e72:	490e      	ldr	r1, [pc, #56]	; (8000eac <main+0xb0>)
 8000e74:	480c      	ldr	r0, [pc, #48]	; (8000ea8 <main+0xac>)
 8000e76:	f005 fa86 	bl	8006386 <strncpy>
    }

    // update the screen
    updateScreen();
 8000e7a:	f7ff fdf3 	bl	8000a64 <updateScreen>

    updateHour();
 8000e7e:	f7ff fc7d 	bl	800077c <updateHour>
    ADC_read();
 8000e82:	e7e6      	b.n	8000e52 <main+0x56>
 8000e84:	080004d1 	.word	0x080004d1
 8000e88:	080005cd 	.word	0x080005cd
 8000e8c:	080105f4 	.word	0x080105f4
 8000e90:	20000144 	.word	0x20000144
 8000e94:	080064b8 	.word	0x080064b8
 8000e98:	200000fc 	.word	0x200000fc
 8000e9c:	20000234 	.word	0x20000234
 8000ea0:	20000204 	.word	0x20000204
 8000ea4:	20000000 	.word	0x20000000
 8000ea8:	2000021c 	.word	0x2000021c
 8000eac:	20000018 	.word	0x20000018

08000eb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b094      	sub	sp, #80	; 0x50
 8000eb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eb6:	f107 0320 	add.w	r3, r7, #32
 8000eba:	2230      	movs	r2, #48	; 0x30
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f005 fa59 	bl	8006376 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ec4:	f107 030c 	add.w	r3, r7, #12
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]
 8000ed0:	60da      	str	r2, [r3, #12]
 8000ed2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	60bb      	str	r3, [r7, #8]
 8000ed8:	4b28      	ldr	r3, [pc, #160]	; (8000f7c <SystemClock_Config+0xcc>)
 8000eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000edc:	4a27      	ldr	r2, [pc, #156]	; (8000f7c <SystemClock_Config+0xcc>)
 8000ede:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ee2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ee4:	4b25      	ldr	r3, [pc, #148]	; (8000f7c <SystemClock_Config+0xcc>)
 8000ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eec:	60bb      	str	r3, [r7, #8]
 8000eee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	607b      	str	r3, [r7, #4]
 8000ef4:	4b22      	ldr	r3, [pc, #136]	; (8000f80 <SystemClock_Config+0xd0>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000efc:	4a20      	ldr	r2, [pc, #128]	; (8000f80 <SystemClock_Config+0xd0>)
 8000efe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f02:	6013      	str	r3, [r2, #0]
 8000f04:	4b1e      	ldr	r3, [pc, #120]	; (8000f80 <SystemClock_Config+0xd0>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f0c:	607b      	str	r3, [r7, #4]
 8000f0e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f10:	2302      	movs	r3, #2
 8000f12:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f14:	2301      	movs	r3, #1
 8000f16:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f18:	2310      	movs	r3, #16
 8000f1a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f20:	2300      	movs	r3, #0
 8000f22:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f24:	2308      	movs	r3, #8
 8000f26:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000f28:	2340      	movs	r3, #64	; 0x40
 8000f2a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f30:	2304      	movs	r3, #4
 8000f32:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f34:	f107 0320 	add.w	r3, r7, #32
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f001 fabf 	bl	80024bc <HAL_RCC_OscConfig>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000f44:	f000 f972 	bl	800122c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f48:	230f      	movs	r3, #15
 8000f4a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f50:	2300      	movs	r3, #0
 8000f52:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f58:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f5e:	f107 030c 	add.w	r3, r7, #12
 8000f62:	2102      	movs	r1, #2
 8000f64:	4618      	mov	r0, r3
 8000f66:	f001 fd21 	bl	80029ac <HAL_RCC_ClockConfig>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000f70:	f000 f95c 	bl	800122c <Error_Handler>
  }
}
 8000f74:	bf00      	nop
 8000f76:	3750      	adds	r7, #80	; 0x50
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	40023800 	.word	0x40023800
 8000f80:	40007000 	.word	0x40007000

08000f84 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f8a:	463b      	mov	r3, r7
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f96:	4b32      	ldr	r3, [pc, #200]	; (8001060 <MX_ADC1_Init+0xdc>)
 8000f98:	4a32      	ldr	r2, [pc, #200]	; (8001064 <MX_ADC1_Init+0xe0>)
 8000f9a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000f9c:	4b30      	ldr	r3, [pc, #192]	; (8001060 <MX_ADC1_Init+0xdc>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000fa2:	4b2f      	ldr	r3, [pc, #188]	; (8001060 <MX_ADC1_Init+0xdc>)
 8000fa4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000fa8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000faa:	4b2d      	ldr	r3, [pc, #180]	; (8001060 <MX_ADC1_Init+0xdc>)
 8000fac:	2201      	movs	r2, #1
 8000fae:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fb0:	4b2b      	ldr	r3, [pc, #172]	; (8001060 <MX_ADC1_Init+0xdc>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8000fb6:	4b2a      	ldr	r3, [pc, #168]	; (8001060 <MX_ADC1_Init+0xdc>)
 8000fb8:	2201      	movs	r2, #1
 8000fba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8000fbe:	4b28      	ldr	r3, [pc, #160]	; (8001060 <MX_ADC1_Init+0xdc>)
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fc4:	4b26      	ldr	r3, [pc, #152]	; (8001060 <MX_ADC1_Init+0xdc>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fca:	4b25      	ldr	r3, [pc, #148]	; (8001060 <MX_ADC1_Init+0xdc>)
 8000fcc:	4a26      	ldr	r2, [pc, #152]	; (8001068 <MX_ADC1_Init+0xe4>)
 8000fce:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fd0:	4b23      	ldr	r3, [pc, #140]	; (8001060 <MX_ADC1_Init+0xdc>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8000fd6:	4b22      	ldr	r3, [pc, #136]	; (8001060 <MX_ADC1_Init+0xdc>)
 8000fd8:	2203      	movs	r2, #3
 8000fda:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fdc:	4b20      	ldr	r3, [pc, #128]	; (8001060 <MX_ADC1_Init+0xdc>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fe4:	4b1e      	ldr	r3, [pc, #120]	; (8001060 <MX_ADC1_Init+0xdc>)
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fea:	481d      	ldr	r0, [pc, #116]	; (8001060 <MX_ADC1_Init+0xdc>)
 8000fec:	f000 fb5e 	bl	80016ac <HAL_ADC_Init>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_ADC1_Init+0x76>
  {
    Error_Handler();
 8000ff6:	f000 f919 	bl	800122c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ffe:	2301      	movs	r3, #1
 8001000:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8001002:	2304      	movs	r3, #4
 8001004:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001006:	463b      	mov	r3, r7
 8001008:	4619      	mov	r1, r3
 800100a:	4815      	ldr	r0, [pc, #84]	; (8001060 <MX_ADC1_Init+0xdc>)
 800100c:	f000 fcde 	bl	80019cc <HAL_ADC_ConfigChannel>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8001016:	f000 f909 	bl	800122c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800101a:	2301      	movs	r3, #1
 800101c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800101e:	2302      	movs	r3, #2
 8001020:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001022:	463b      	mov	r3, r7
 8001024:	4619      	mov	r1, r3
 8001026:	480e      	ldr	r0, [pc, #56]	; (8001060 <MX_ADC1_Init+0xdc>)
 8001028:	f000 fcd0 	bl	80019cc <HAL_ADC_ConfigChannel>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001032:	f000 f8fb 	bl	800122c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001036:	2302      	movs	r3, #2
 8001038:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800103a:	2303      	movs	r3, #3
 800103c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800103e:	2303      	movs	r3, #3
 8001040:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001042:	463b      	mov	r3, r7
 8001044:	4619      	mov	r1, r3
 8001046:	4806      	ldr	r0, [pc, #24]	; (8001060 <MX_ADC1_Init+0xdc>)
 8001048:	f000 fcc0 	bl	80019cc <HAL_ADC_ConfigChannel>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8001052:	f000 f8eb 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001056:	bf00      	nop
 8001058:	3710      	adds	r7, #16
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	2000005c 	.word	0x2000005c
 8001064:	40012000 	.word	0x40012000
 8001068:	0f000001 	.word	0x0f000001

0800106c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001070:	4b17      	ldr	r3, [pc, #92]	; (80010d0 <MX_SPI1_Init+0x64>)
 8001072:	4a18      	ldr	r2, [pc, #96]	; (80010d4 <MX_SPI1_Init+0x68>)
 8001074:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001076:	4b16      	ldr	r3, [pc, #88]	; (80010d0 <MX_SPI1_Init+0x64>)
 8001078:	f44f 7282 	mov.w	r2, #260	; 0x104
 800107c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800107e:	4b14      	ldr	r3, [pc, #80]	; (80010d0 <MX_SPI1_Init+0x64>)
 8001080:	2200      	movs	r2, #0
 8001082:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001084:	4b12      	ldr	r3, [pc, #72]	; (80010d0 <MX_SPI1_Init+0x64>)
 8001086:	2200      	movs	r2, #0
 8001088:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800108a:	4b11      	ldr	r3, [pc, #68]	; (80010d0 <MX_SPI1_Init+0x64>)
 800108c:	2200      	movs	r2, #0
 800108e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001090:	4b0f      	ldr	r3, [pc, #60]	; (80010d0 <MX_SPI1_Init+0x64>)
 8001092:	2200      	movs	r2, #0
 8001094:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001096:	4b0e      	ldr	r3, [pc, #56]	; (80010d0 <MX_SPI1_Init+0x64>)
 8001098:	f44f 7200 	mov.w	r2, #512	; 0x200
 800109c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800109e:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <MX_SPI1_Init+0x64>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010a4:	4b0a      	ldr	r3, [pc, #40]	; (80010d0 <MX_SPI1_Init+0x64>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010aa:	4b09      	ldr	r3, [pc, #36]	; (80010d0 <MX_SPI1_Init+0x64>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010b0:	4b07      	ldr	r3, [pc, #28]	; (80010d0 <MX_SPI1_Init+0x64>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80010b6:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <MX_SPI1_Init+0x64>)
 80010b8:	220a      	movs	r2, #10
 80010ba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010bc:	4804      	ldr	r0, [pc, #16]	; (80010d0 <MX_SPI1_Init+0x64>)
 80010be:	f001 fe55 	bl	8002d6c <HAL_SPI_Init>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80010c8:	f000 f8b0 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80010cc:	bf00      	nop
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	200000a4 	.word	0x200000a4
 80010d4:	40013000 	.word	0x40013000

080010d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010dc:	4b11      	ldr	r3, [pc, #68]	; (8001124 <MX_USART1_UART_Init+0x4c>)
 80010de:	4a12      	ldr	r2, [pc, #72]	; (8001128 <MX_USART1_UART_Init+0x50>)
 80010e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80010e2:	4b10      	ldr	r3, [pc, #64]	; (8001124 <MX_USART1_UART_Init+0x4c>)
 80010e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010ea:	4b0e      	ldr	r3, [pc, #56]	; (8001124 <MX_USART1_UART_Init+0x4c>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010f0:	4b0c      	ldr	r3, [pc, #48]	; (8001124 <MX_USART1_UART_Init+0x4c>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010f6:	4b0b      	ldr	r3, [pc, #44]	; (8001124 <MX_USART1_UART_Init+0x4c>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010fc:	4b09      	ldr	r3, [pc, #36]	; (8001124 <MX_USART1_UART_Init+0x4c>)
 80010fe:	220c      	movs	r2, #12
 8001100:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001102:	4b08      	ldr	r3, [pc, #32]	; (8001124 <MX_USART1_UART_Init+0x4c>)
 8001104:	2200      	movs	r2, #0
 8001106:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001108:	4b06      	ldr	r3, [pc, #24]	; (8001124 <MX_USART1_UART_Init+0x4c>)
 800110a:	2200      	movs	r2, #0
 800110c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800110e:	4805      	ldr	r0, [pc, #20]	; (8001124 <MX_USART1_UART_Init+0x4c>)
 8001110:	f002 f8d4 	bl	80032bc <HAL_UART_Init>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800111a:	f000 f887 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	200000fc 	.word	0x200000fc
 8001128:	40011000 	.word	0x40011000

0800112c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b088      	sub	sp, #32
 8001130:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001132:	f107 030c 	add.w	r3, r7, #12
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	605a      	str	r2, [r3, #4]
 800113c:	609a      	str	r2, [r3, #8]
 800113e:	60da      	str	r2, [r3, #12]
 8001140:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	60bb      	str	r3, [r7, #8]
 8001146:	4b36      	ldr	r3, [pc, #216]	; (8001220 <MX_GPIO_Init+0xf4>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	4a35      	ldr	r2, [pc, #212]	; (8001220 <MX_GPIO_Init+0xf4>)
 800114c:	f043 0301 	orr.w	r3, r3, #1
 8001150:	6313      	str	r3, [r2, #48]	; 0x30
 8001152:	4b33      	ldr	r3, [pc, #204]	; (8001220 <MX_GPIO_Init+0xf4>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	f003 0301 	and.w	r3, r3, #1
 800115a:	60bb      	str	r3, [r7, #8]
 800115c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800115e:	2300      	movs	r3, #0
 8001160:	607b      	str	r3, [r7, #4]
 8001162:	4b2f      	ldr	r3, [pc, #188]	; (8001220 <MX_GPIO_Init+0xf4>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	4a2e      	ldr	r2, [pc, #184]	; (8001220 <MX_GPIO_Init+0xf4>)
 8001168:	f043 0302 	orr.w	r3, r3, #2
 800116c:	6313      	str	r3, [r2, #48]	; 0x30
 800116e:	4b2c      	ldr	r3, [pc, #176]	; (8001220 <MX_GPIO_Init+0xf4>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	f003 0302 	and.w	r3, r3, #2
 8001176:	607b      	str	r3, [r7, #4]
 8001178:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_RESET_Pin|SPI1_CS_Pin|SPI1_DC_Pin, GPIO_PIN_RESET);
 800117a:	2200      	movs	r2, #0
 800117c:	2158      	movs	r1, #88	; 0x58
 800117e:	4829      	ldr	r0, [pc, #164]	; (8001224 <MX_GPIO_Init+0xf8>)
 8001180:	f001 f96a 	bl	8002458 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI1_RESET_Pin SPI1_CS_Pin SPI1_DC_Pin */
  GPIO_InitStruct.Pin = SPI1_RESET_Pin|SPI1_CS_Pin|SPI1_DC_Pin;
 8001184:	2358      	movs	r3, #88	; 0x58
 8001186:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001188:	2301      	movs	r3, #1
 800118a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118c:	2300      	movs	r3, #0
 800118e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001190:	2300      	movs	r3, #0
 8001192:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001194:	f107 030c 	add.w	r3, r7, #12
 8001198:	4619      	mov	r1, r3
 800119a:	4822      	ldr	r0, [pc, #136]	; (8001224 <MX_GPIO_Init+0xf8>)
 800119c:	f000 ffd8 	bl	8002150 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUT9_Pin BUT8_Pin */
  GPIO_InitStruct.Pin = BUT9_Pin|BUT8_Pin;
 80011a0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80011a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011a6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80011aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011ac:	2301      	movs	r3, #1
 80011ae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b0:	f107 030c 	add.w	r3, r7, #12
 80011b4:	4619      	mov	r1, r3
 80011b6:	481b      	ldr	r0, [pc, #108]	; (8001224 <MX_GPIO_Init+0xf8>)
 80011b8:	f000 ffca 	bl	8002150 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUT7_Pin BUT6_Pin BUT5_Pin BUT4_Pin
                           BUT3_Pin BUT2_Pin BUT1_Pin */
  GPIO_InitStruct.Pin = BUT7_Pin|BUT6_Pin|BUT5_Pin|BUT4_Pin
 80011bc:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 80011c0:	60fb      	str	r3, [r7, #12]
                          |BUT3_Pin|BUT2_Pin|BUT1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011c2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80011c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011c8:	2301      	movs	r3, #1
 80011ca:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011cc:	f107 030c 	add.w	r3, r7, #12
 80011d0:	4619      	mov	r1, r3
 80011d2:	4815      	ldr	r0, [pc, #84]	; (8001228 <MX_GPIO_Init+0xfc>)
 80011d4:	f000 ffbc 	bl	8002150 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80011d8:	2200      	movs	r2, #0
 80011da:	2100      	movs	r1, #0
 80011dc:	2009      	movs	r0, #9
 80011de:	f000 feee 	bl	8001fbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80011e2:	2009      	movs	r0, #9
 80011e4:	f000 ff07 	bl	8001ff6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80011e8:	2200      	movs	r2, #0
 80011ea:	2100      	movs	r1, #0
 80011ec:	200a      	movs	r0, #10
 80011ee:	f000 fee6 	bl	8001fbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80011f2:	200a      	movs	r0, #10
 80011f4:	f000 feff 	bl	8001ff6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80011f8:	2200      	movs	r2, #0
 80011fa:	2100      	movs	r1, #0
 80011fc:	2017      	movs	r0, #23
 80011fe:	f000 fede 	bl	8001fbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001202:	2017      	movs	r0, #23
 8001204:	f000 fef7 	bl	8001ff6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001208:	2200      	movs	r2, #0
 800120a:	2100      	movs	r1, #0
 800120c:	2028      	movs	r0, #40	; 0x28
 800120e:	f000 fed6 	bl	8001fbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001212:	2028      	movs	r0, #40	; 0x28
 8001214:	f000 feef 	bl	8001ff6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001218:	bf00      	nop
 800121a:	3720      	adds	r7, #32
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	40023800 	.word	0x40023800
 8001224:	40020000 	.word	0x40020000
 8001228:	40020400 	.word	0x40020400

0800122c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001230:	b672      	cpsid	i
}
 8001232:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001234:	e7fe      	b.n	8001234 <Error_Handler+0x8>
	...

08001238 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	607b      	str	r3, [r7, #4]
 8001242:	4b10      	ldr	r3, [pc, #64]	; (8001284 <HAL_MspInit+0x4c>)
 8001244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001246:	4a0f      	ldr	r2, [pc, #60]	; (8001284 <HAL_MspInit+0x4c>)
 8001248:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800124c:	6453      	str	r3, [r2, #68]	; 0x44
 800124e:	4b0d      	ldr	r3, [pc, #52]	; (8001284 <HAL_MspInit+0x4c>)
 8001250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001252:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001256:	607b      	str	r3, [r7, #4]
 8001258:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	603b      	str	r3, [r7, #0]
 800125e:	4b09      	ldr	r3, [pc, #36]	; (8001284 <HAL_MspInit+0x4c>)
 8001260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001262:	4a08      	ldr	r2, [pc, #32]	; (8001284 <HAL_MspInit+0x4c>)
 8001264:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001268:	6413      	str	r3, [r2, #64]	; 0x40
 800126a:	4b06      	ldr	r3, [pc, #24]	; (8001284 <HAL_MspInit+0x4c>)
 800126c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001272:	603b      	str	r3, [r7, #0]
 8001274:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001276:	bf00      	nop
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	40023800 	.word	0x40023800

08001288 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b08a      	sub	sp, #40	; 0x28
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001290:	f107 0314 	add.w	r3, r7, #20
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	60da      	str	r2, [r3, #12]
 800129e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a17      	ldr	r2, [pc, #92]	; (8001304 <HAL_ADC_MspInit+0x7c>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d127      	bne.n	80012fa <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	613b      	str	r3, [r7, #16]
 80012ae:	4b16      	ldr	r3, [pc, #88]	; (8001308 <HAL_ADC_MspInit+0x80>)
 80012b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b2:	4a15      	ldr	r2, [pc, #84]	; (8001308 <HAL_ADC_MspInit+0x80>)
 80012b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012b8:	6453      	str	r3, [r2, #68]	; 0x44
 80012ba:	4b13      	ldr	r3, [pc, #76]	; (8001308 <HAL_ADC_MspInit+0x80>)
 80012bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012c2:	613b      	str	r3, [r7, #16]
 80012c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	60fb      	str	r3, [r7, #12]
 80012ca:	4b0f      	ldr	r3, [pc, #60]	; (8001308 <HAL_ADC_MspInit+0x80>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	4a0e      	ldr	r2, [pc, #56]	; (8001308 <HAL_ADC_MspInit+0x80>)
 80012d0:	f043 0301 	orr.w	r3, r3, #1
 80012d4:	6313      	str	r3, [r2, #48]	; 0x30
 80012d6:	4b0c      	ldr	r3, [pc, #48]	; (8001308 <HAL_ADC_MspInit+0x80>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80012e2:	2307      	movs	r3, #7
 80012e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012e6:	2303      	movs	r3, #3
 80012e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ea:	2300      	movs	r3, #0
 80012ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ee:	f107 0314 	add.w	r3, r7, #20
 80012f2:	4619      	mov	r1, r3
 80012f4:	4805      	ldr	r0, [pc, #20]	; (800130c <HAL_ADC_MspInit+0x84>)
 80012f6:	f000 ff2b 	bl	8002150 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80012fa:	bf00      	nop
 80012fc:	3728      	adds	r7, #40	; 0x28
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	40012000 	.word	0x40012000
 8001308:	40023800 	.word	0x40023800
 800130c:	40020000 	.word	0x40020000

08001310 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b08a      	sub	sp, #40	; 0x28
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001318:	f107 0314 	add.w	r3, r7, #20
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
 8001322:	609a      	str	r2, [r3, #8]
 8001324:	60da      	str	r2, [r3, #12]
 8001326:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a19      	ldr	r2, [pc, #100]	; (8001394 <HAL_SPI_MspInit+0x84>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d12b      	bne.n	800138a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	613b      	str	r3, [r7, #16]
 8001336:	4b18      	ldr	r3, [pc, #96]	; (8001398 <HAL_SPI_MspInit+0x88>)
 8001338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133a:	4a17      	ldr	r2, [pc, #92]	; (8001398 <HAL_SPI_MspInit+0x88>)
 800133c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001340:	6453      	str	r3, [r2, #68]	; 0x44
 8001342:	4b15      	ldr	r3, [pc, #84]	; (8001398 <HAL_SPI_MspInit+0x88>)
 8001344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001346:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800134a:	613b      	str	r3, [r7, #16]
 800134c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	60fb      	str	r3, [r7, #12]
 8001352:	4b11      	ldr	r3, [pc, #68]	; (8001398 <HAL_SPI_MspInit+0x88>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	4a10      	ldr	r2, [pc, #64]	; (8001398 <HAL_SPI_MspInit+0x88>)
 8001358:	f043 0301 	orr.w	r3, r3, #1
 800135c:	6313      	str	r3, [r2, #48]	; 0x30
 800135e:	4b0e      	ldr	r3, [pc, #56]	; (8001398 <HAL_SPI_MspInit+0x88>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	60fb      	str	r3, [r7, #12]
 8001368:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800136a:	23a0      	movs	r3, #160	; 0xa0
 800136c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136e:	2302      	movs	r3, #2
 8001370:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	2300      	movs	r3, #0
 8001374:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001376:	2303      	movs	r3, #3
 8001378:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800137a:	2305      	movs	r3, #5
 800137c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137e:	f107 0314 	add.w	r3, r7, #20
 8001382:	4619      	mov	r1, r3
 8001384:	4805      	ldr	r0, [pc, #20]	; (800139c <HAL_SPI_MspInit+0x8c>)
 8001386:	f000 fee3 	bl	8002150 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800138a:	bf00      	nop
 800138c:	3728      	adds	r7, #40	; 0x28
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40013000 	.word	0x40013000
 8001398:	40023800 	.word	0x40023800
 800139c:	40020000 	.word	0x40020000

080013a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b08a      	sub	sp, #40	; 0x28
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a8:	f107 0314 	add.w	r3, r7, #20
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	609a      	str	r2, [r3, #8]
 80013b4:	60da      	str	r2, [r3, #12]
 80013b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a1d      	ldr	r2, [pc, #116]	; (8001434 <HAL_UART_MspInit+0x94>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d134      	bne.n	800142c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	613b      	str	r3, [r7, #16]
 80013c6:	4b1c      	ldr	r3, [pc, #112]	; (8001438 <HAL_UART_MspInit+0x98>)
 80013c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ca:	4a1b      	ldr	r2, [pc, #108]	; (8001438 <HAL_UART_MspInit+0x98>)
 80013cc:	f043 0310 	orr.w	r3, r3, #16
 80013d0:	6453      	str	r3, [r2, #68]	; 0x44
 80013d2:	4b19      	ldr	r3, [pc, #100]	; (8001438 <HAL_UART_MspInit+0x98>)
 80013d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d6:	f003 0310 	and.w	r3, r3, #16
 80013da:	613b      	str	r3, [r7, #16]
 80013dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013de:	2300      	movs	r3, #0
 80013e0:	60fb      	str	r3, [r7, #12]
 80013e2:	4b15      	ldr	r3, [pc, #84]	; (8001438 <HAL_UART_MspInit+0x98>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	4a14      	ldr	r2, [pc, #80]	; (8001438 <HAL_UART_MspInit+0x98>)
 80013e8:	f043 0301 	orr.w	r3, r3, #1
 80013ec:	6313      	str	r3, [r2, #48]	; 0x30
 80013ee:	4b12      	ldr	r3, [pc, #72]	; (8001438 <HAL_UART_MspInit+0x98>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80013fa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80013fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001400:	2302      	movs	r3, #2
 8001402:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001404:	2300      	movs	r3, #0
 8001406:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001408:	2303      	movs	r3, #3
 800140a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800140c:	2307      	movs	r3, #7
 800140e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001410:	f107 0314 	add.w	r3, r7, #20
 8001414:	4619      	mov	r1, r3
 8001416:	4809      	ldr	r0, [pc, #36]	; (800143c <HAL_UART_MspInit+0x9c>)
 8001418:	f000 fe9a 	bl	8002150 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800141c:	2200      	movs	r2, #0
 800141e:	2100      	movs	r1, #0
 8001420:	2025      	movs	r0, #37	; 0x25
 8001422:	f000 fdcc 	bl	8001fbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001426:	2025      	movs	r0, #37	; 0x25
 8001428:	f000 fde5 	bl	8001ff6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800142c:	bf00      	nop
 800142e:	3728      	adds	r7, #40	; 0x28
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	40011000 	.word	0x40011000
 8001438:	40023800 	.word	0x40023800
 800143c:	40020000 	.word	0x40020000

08001440 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001444:	e7fe      	b.n	8001444 <NMI_Handler+0x4>

08001446 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001446:	b480      	push	{r7}
 8001448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800144a:	e7fe      	b.n	800144a <HardFault_Handler+0x4>

0800144c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001450:	e7fe      	b.n	8001450 <MemManage_Handler+0x4>

08001452 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001452:	b480      	push	{r7}
 8001454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001456:	e7fe      	b.n	8001456 <BusFault_Handler+0x4>

08001458 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800145c:	e7fe      	b.n	800145c <UsageFault_Handler+0x4>

0800145e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800145e:	b480      	push	{r7}
 8001460:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001462:	bf00      	nop
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001470:	bf00      	nop
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr

0800147a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800147a:	b480      	push	{r7}
 800147c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800147e:	bf00      	nop
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800148c:	f000 f8ca 	bl	8001624 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001490:	bf00      	nop
 8001492:	bd80      	pop	{r7, pc}

08001494 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT7_Pin);
 8001498:	2008      	movs	r0, #8
 800149a:	f000 fff7 	bl	800248c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800149e:	bf00      	nop
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80014a2:	b580      	push	{r7, lr}
 80014a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT6_Pin);
 80014a6:	2010      	movs	r0, #16
 80014a8:	f000 fff0 	bl	800248c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80014ac:	bf00      	nop
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT5_Pin);
 80014b4:	2020      	movs	r0, #32
 80014b6:	f000 ffe9 	bl	800248c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUT4_Pin);
 80014ba:	2040      	movs	r0, #64	; 0x40
 80014bc:	f000 ffe6 	bl	800248c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUT3_Pin);
 80014c0:	2080      	movs	r0, #128	; 0x80
 80014c2:	f000 ffe3 	bl	800248c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUT2_Pin);
 80014c6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80014ca:	f000 ffdf 	bl	800248c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUT1_Pin);
 80014ce:	f44f 7000 	mov.w	r0, #512	; 0x200
 80014d2:	f000 ffdb 	bl	800248c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}
	...

080014dc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80014e0:	4802      	ldr	r0, [pc, #8]	; (80014ec <USART1_IRQHandler+0x10>)
 80014e2:	f002 f883 	bl	80035ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80014e6:	bf00      	nop
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	200000fc 	.word	0x200000fc

080014f0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT9_Pin);
 80014f4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80014f8:	f000 ffc8 	bl	800248c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUT8_Pin);
 80014fc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001500:	f000 ffc4 	bl	800248c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001504:	bf00      	nop
 8001506:	bd80      	pop	{r7, pc}

08001508 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800150c:	4b06      	ldr	r3, [pc, #24]	; (8001528 <SystemInit+0x20>)
 800150e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001512:	4a05      	ldr	r2, [pc, #20]	; (8001528 <SystemInit+0x20>)
 8001514:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001518:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800151c:	bf00      	nop
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	e000ed00 	.word	0xe000ed00

0800152c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

 800152c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001564 <LoopFillZerobss+0xe>
3.  ldr   sp, =_estack      /* set stack pointer */
  
/* Call the clock system initialization function.*/
 8001530:	f7ff ffea 	bl	8001508 <SystemInit>
  bl  SystemInit  

/* Copy the data segment initializers from flash to SRAM */  
 8001534:	480c      	ldr	r0, [pc, #48]	; (8001568 <LoopFillZerobss+0x12>)
  ldr r0, =_sdata
 8001536:	490d      	ldr	r1, [pc, #52]	; (800156c <LoopFillZerobss+0x16>)

 8001538:	4a0d      	ldr	r2, [pc, #52]	; (8001570 <LoopFillZerobss+0x1a>)
  ldr r1, =_edata
 800153a:	2300      	movs	r3, #0
  ldr r2, =_sidata
 800153c:	e002      	b.n	8001544 <LoopCopyDataInit>

0800153e <CopyDataInit>:
  movs r3, #0
  b LoopCopyDataInit

 800153e:	58d4      	ldr	r4, [r2, r3]
CopyDataInit:
 8001540:	50c4      	str	r4, [r0, r3]
  ldr r4, [r2, r3]
 8001542:	3304      	adds	r3, #4

08001544 <LoopCopyDataInit>:
  str r4, [r0, r3]
  adds r3, r3, #4

 8001544:	18c4      	adds	r4, r0, r3
LoopCopyDataInit:
 8001546:	428c      	cmp	r4, r1
  adds r4, r0, r3
 8001548:	d3f9      	bcc.n	800153e <CopyDataInit>
  cmp r4, r1
  bcc CopyDataInit
  
 800154a:	4a0a      	ldr	r2, [pc, #40]	; (8001574 <LoopFillZerobss+0x1e>)
/* Zero fill the bss segment. */
 800154c:	4c0a      	ldr	r4, [pc, #40]	; (8001578 <LoopFillZerobss+0x22>)
  ldr r2, =_sbss
 800154e:	2300      	movs	r3, #0
  ldr r4, =_ebss
 8001550:	e001      	b.n	8001556 <LoopFillZerobss>

08001552 <FillZerobss>:
  movs r3, #0
  b LoopFillZerobss

 8001552:	6013      	str	r3, [r2, #0]
FillZerobss:
 8001554:	3204      	adds	r2, #4

08001556 <LoopFillZerobss>:
  str  r3, [r2]
  adds r2, r2, #4

 8001556:	42a2      	cmp	r2, r4
LoopFillZerobss:
 8001558:	d3fb      	bcc.n	8001552 <FillZerobss>
  cmp r2, r4
  bcc FillZerobss

 800155a:	f004 ff27 	bl	80063ac <__libc_init_array>
/* Call static constructors */
    bl __libc_init_array
 800155e:	f7ff fc4d 	bl	8000dfc <main>
/* Call the application's entry point.*/
 8001562:	4770      	bx	lr

 8001564:	20010000 	.word	0x20010000
/* Copy the data segment initializers from flash to SRAM */  
 8001568:	20000000 	.word	0x20000000
  ldr r0, =_sdata
 800156c:	20000040 	.word	0x20000040

 8001570:	08010678 	.word	0x08010678
  
 8001574:	20000040 	.word	0x20000040
/* Zero fill the bss segment. */
 8001578:	200002f4 	.word	0x200002f4

0800157c <ADC_IRQHandler>:
 *         the system state for examination by a debugger.
 * @param  None     
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
 800157c:	e7fe      	b.n	800157c <ADC_IRQHandler>
	...

08001580 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001584:	4b0e      	ldr	r3, [pc, #56]	; (80015c0 <HAL_Init+0x40>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a0d      	ldr	r2, [pc, #52]	; (80015c0 <HAL_Init+0x40>)
 800158a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800158e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001590:	4b0b      	ldr	r3, [pc, #44]	; (80015c0 <HAL_Init+0x40>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a0a      	ldr	r2, [pc, #40]	; (80015c0 <HAL_Init+0x40>)
 8001596:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800159a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800159c:	4b08      	ldr	r3, [pc, #32]	; (80015c0 <HAL_Init+0x40>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a07      	ldr	r2, [pc, #28]	; (80015c0 <HAL_Init+0x40>)
 80015a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015a8:	2003      	movs	r0, #3
 80015aa:	f000 fcfd 	bl	8001fa8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015ae:	200f      	movs	r0, #15
 80015b0:	f000 f808 	bl	80015c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015b4:	f7ff fe40 	bl	8001238 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	40023c00 	.word	0x40023c00

080015c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015cc:	4b12      	ldr	r3, [pc, #72]	; (8001618 <HAL_InitTick+0x54>)
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	4b12      	ldr	r3, [pc, #72]	; (800161c <HAL_InitTick+0x58>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	4619      	mov	r1, r3
 80015d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015da:	fbb3 f3f1 	udiv	r3, r3, r1
 80015de:	fbb2 f3f3 	udiv	r3, r2, r3
 80015e2:	4618      	mov	r0, r3
 80015e4:	f000 fd15 	bl	8002012 <HAL_SYSTICK_Config>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e00e      	b.n	8001610 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2b0f      	cmp	r3, #15
 80015f6:	d80a      	bhi.n	800160e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015f8:	2200      	movs	r2, #0
 80015fa:	6879      	ldr	r1, [r7, #4]
 80015fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001600:	f000 fcdd 	bl	8001fbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001604:	4a06      	ldr	r2, [pc, #24]	; (8001620 <HAL_InitTick+0x5c>)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800160a:	2300      	movs	r3, #0
 800160c:	e000      	b.n	8001610 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
}
 8001610:	4618      	mov	r0, r3
 8001612:	3708      	adds	r7, #8
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	20000034 	.word	0x20000034
 800161c:	2000003c 	.word	0x2000003c
 8001620:	20000038 	.word	0x20000038

08001624 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001628:	4b06      	ldr	r3, [pc, #24]	; (8001644 <HAL_IncTick+0x20>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	461a      	mov	r2, r3
 800162e:	4b06      	ldr	r3, [pc, #24]	; (8001648 <HAL_IncTick+0x24>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4413      	add	r3, r2
 8001634:	4a04      	ldr	r2, [pc, #16]	; (8001648 <HAL_IncTick+0x24>)
 8001636:	6013      	str	r3, [r2, #0]
}
 8001638:	bf00      	nop
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	2000003c 	.word	0x2000003c
 8001648:	20000270 	.word	0x20000270

0800164c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  return uwTick;
 8001650:	4b03      	ldr	r3, [pc, #12]	; (8001660 <HAL_GetTick+0x14>)
 8001652:	681b      	ldr	r3, [r3, #0]
}
 8001654:	4618      	mov	r0, r3
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	20000270 	.word	0x20000270

08001664 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800166c:	f7ff ffee 	bl	800164c <HAL_GetTick>
 8001670:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800167c:	d005      	beq.n	800168a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800167e:	4b0a      	ldr	r3, [pc, #40]	; (80016a8 <HAL_Delay+0x44>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	461a      	mov	r2, r3
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	4413      	add	r3, r2
 8001688:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800168a:	bf00      	nop
 800168c:	f7ff ffde 	bl	800164c <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	68fa      	ldr	r2, [r7, #12]
 8001698:	429a      	cmp	r2, r3
 800169a:	d8f7      	bhi.n	800168c <HAL_Delay+0x28>
  {
  }
}
 800169c:	bf00      	nop
 800169e:	bf00      	nop
 80016a0:	3710      	adds	r7, #16
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	2000003c 	.word	0x2000003c

080016ac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016b4:	2300      	movs	r3, #0
 80016b6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d101      	bne.n	80016c2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e033      	b.n	800172a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d109      	bne.n	80016de <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f7ff fddc 	bl	8001288 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2200      	movs	r2, #0
 80016d4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2200      	movs	r2, #0
 80016da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e2:	f003 0310 	and.w	r3, r3, #16
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d118      	bne.n	800171c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ee:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80016f2:	f023 0302 	bic.w	r3, r3, #2
 80016f6:	f043 0202 	orr.w	r2, r3, #2
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f000 fa86 	bl	8001c10 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2200      	movs	r2, #0
 8001708:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170e:	f023 0303 	bic.w	r3, r3, #3
 8001712:	f043 0201 	orr.w	r2, r3, #1
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	641a      	str	r2, [r3, #64]	; 0x40
 800171a:	e001      	b.n	8001720 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2200      	movs	r2, #0
 8001724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001728:	7bfb      	ldrb	r3, [r7, #15]
}
 800172a:	4618      	mov	r0, r3
 800172c:	3710      	adds	r7, #16
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
	...

08001734 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001734:	b480      	push	{r7}
 8001736:	b085      	sub	sp, #20
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800173c:	2300      	movs	r3, #0
 800173e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001746:	2b01      	cmp	r3, #1
 8001748:	d101      	bne.n	800174e <HAL_ADC_Start+0x1a>
 800174a:	2302      	movs	r3, #2
 800174c:	e097      	b.n	800187e <HAL_ADC_Start+0x14a>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2201      	movs	r2, #1
 8001752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	f003 0301 	and.w	r3, r3, #1
 8001760:	2b01      	cmp	r3, #1
 8001762:	d018      	beq.n	8001796 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	689a      	ldr	r2, [r3, #8]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f042 0201 	orr.w	r2, r2, #1
 8001772:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001774:	4b45      	ldr	r3, [pc, #276]	; (800188c <HAL_ADC_Start+0x158>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a45      	ldr	r2, [pc, #276]	; (8001890 <HAL_ADC_Start+0x15c>)
 800177a:	fba2 2303 	umull	r2, r3, r2, r3
 800177e:	0c9a      	lsrs	r2, r3, #18
 8001780:	4613      	mov	r3, r2
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	4413      	add	r3, r2
 8001786:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001788:	e002      	b.n	8001790 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	3b01      	subs	r3, #1
 800178e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d1f9      	bne.n	800178a <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	f003 0301 	and.w	r3, r3, #1
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d15f      	bne.n	8001864 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80017ac:	f023 0301 	bic.w	r3, r3, #1
 80017b0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d007      	beq.n	80017d6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80017ce:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017e2:	d106      	bne.n	80017f2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e8:	f023 0206 	bic.w	r2, r3, #6
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	645a      	str	r2, [r3, #68]	; 0x44
 80017f0:	e002      	b.n	80017f8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2200      	movs	r2, #0
 80017f6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2200      	movs	r2, #0
 80017fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001800:	4b24      	ldr	r3, [pc, #144]	; (8001894 <HAL_ADC_Start+0x160>)
 8001802:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800180c:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f003 031f 	and.w	r3, r3, #31
 8001816:	2b00      	cmp	r3, #0
 8001818:	d10f      	bne.n	800183a <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001824:	2b00      	cmp	r3, #0
 8001826:	d129      	bne.n	800187c <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	689a      	ldr	r2, [r3, #8]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001836:	609a      	str	r2, [r3, #8]
 8001838:	e020      	b.n	800187c <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a16      	ldr	r2, [pc, #88]	; (8001898 <HAL_ADC_Start+0x164>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d11b      	bne.n	800187c <HAL_ADC_Start+0x148>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d114      	bne.n	800187c <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	689a      	ldr	r2, [r3, #8]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001860:	609a      	str	r2, [r3, #8]
 8001862:	e00b      	b.n	800187c <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001868:	f043 0210 	orr.w	r2, r3, #16
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001874:	f043 0201 	orr.w	r2, r3, #1
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	3714      	adds	r7, #20
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	20000034 	.word	0x20000034
 8001890:	431bde83 	.word	0x431bde83
 8001894:	40012300 	.word	0x40012300
 8001898:	40012000 	.word	0x40012000

0800189c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80018a6:	2300      	movs	r3, #0
 80018a8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018b8:	d113      	bne.n	80018e2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80018c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018c8:	d10b      	bne.n	80018e2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ce:	f043 0220 	orr.w	r2, r3, #32
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2200      	movs	r2, #0
 80018da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e063      	b.n	80019aa <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80018e2:	f7ff feb3 	bl	800164c <HAL_GetTick>
 80018e6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80018e8:	e021      	b.n	800192e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018f0:	d01d      	beq.n	800192e <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d007      	beq.n	8001908 <HAL_ADC_PollForConversion+0x6c>
 80018f8:	f7ff fea8 	bl	800164c <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	683a      	ldr	r2, [r7, #0]
 8001904:	429a      	cmp	r2, r3
 8001906:	d212      	bcs.n	800192e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0302 	and.w	r3, r3, #2
 8001912:	2b02      	cmp	r3, #2
 8001914:	d00b      	beq.n	800192e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191a:	f043 0204 	orr.w	r2, r3, #4
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2200      	movs	r2, #0
 8001926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	e03d      	b.n	80019aa <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0302 	and.w	r3, r3, #2
 8001938:	2b02      	cmp	r3, #2
 800193a:	d1d6      	bne.n	80018ea <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f06f 0212 	mvn.w	r2, #18
 8001944:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800195c:	2b00      	cmp	r3, #0
 800195e:	d123      	bne.n	80019a8 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001964:	2b00      	cmp	r3, #0
 8001966:	d11f      	bne.n	80019a8 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800196e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001972:	2b00      	cmp	r3, #0
 8001974:	d006      	beq.n	8001984 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001980:	2b00      	cmp	r3, #0
 8001982:	d111      	bne.n	80019a8 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001988:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	641a      	str	r2, [r3, #64]	; 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001994:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d105      	bne.n	80019a8 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a0:	f043 0201 	orr.w	r2, r3, #1
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3710      	adds	r7, #16
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80019b2:	b480      	push	{r7}
 80019b4:	b083      	sub	sp, #12
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b085      	sub	sp, #20
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80019d6:	2300      	movs	r3, #0
 80019d8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d101      	bne.n	80019e8 <HAL_ADC_ConfigChannel+0x1c>
 80019e4:	2302      	movs	r3, #2
 80019e6:	e105      	b.n	8001bf4 <HAL_ADC_ConfigChannel+0x228>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2201      	movs	r2, #1
 80019ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2b09      	cmp	r3, #9
 80019f6:	d925      	bls.n	8001a44 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	68d9      	ldr	r1, [r3, #12]
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	461a      	mov	r2, r3
 8001a06:	4613      	mov	r3, r2
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	4413      	add	r3, r2
 8001a0c:	3b1e      	subs	r3, #30
 8001a0e:	2207      	movs	r2, #7
 8001a10:	fa02 f303 	lsl.w	r3, r2, r3
 8001a14:	43da      	mvns	r2, r3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	400a      	ands	r2, r1
 8001a1c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	68d9      	ldr	r1, [r3, #12]
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	689a      	ldr	r2, [r3, #8]
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	4618      	mov	r0, r3
 8001a30:	4603      	mov	r3, r0
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	4403      	add	r3, r0
 8001a36:	3b1e      	subs	r3, #30
 8001a38:	409a      	lsls	r2, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	430a      	orrs	r2, r1
 8001a40:	60da      	str	r2, [r3, #12]
 8001a42:	e022      	b.n	8001a8a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	6919      	ldr	r1, [r3, #16]
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	b29b      	uxth	r3, r3
 8001a50:	461a      	mov	r2, r3
 8001a52:	4613      	mov	r3, r2
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	4413      	add	r3, r2
 8001a58:	2207      	movs	r2, #7
 8001a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5e:	43da      	mvns	r2, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	400a      	ands	r2, r1
 8001a66:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	6919      	ldr	r1, [r3, #16]
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	689a      	ldr	r2, [r3, #8]
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	4618      	mov	r0, r3
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	4403      	add	r3, r0
 8001a80:	409a      	lsls	r2, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	430a      	orrs	r2, r1
 8001a88:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	2b06      	cmp	r3, #6
 8001a90:	d824      	bhi.n	8001adc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685a      	ldr	r2, [r3, #4]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	4413      	add	r3, r2
 8001aa2:	3b05      	subs	r3, #5
 8001aa4:	221f      	movs	r2, #31
 8001aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aaa:	43da      	mvns	r2, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	400a      	ands	r2, r1
 8001ab2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685a      	ldr	r2, [r3, #4]
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	4413      	add	r3, r2
 8001acc:	3b05      	subs	r3, #5
 8001ace:	fa00 f203 	lsl.w	r2, r0, r3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	430a      	orrs	r2, r1
 8001ad8:	635a      	str	r2, [r3, #52]	; 0x34
 8001ada:	e04c      	b.n	8001b76 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	2b0c      	cmp	r3, #12
 8001ae2:	d824      	bhi.n	8001b2e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685a      	ldr	r2, [r3, #4]
 8001aee:	4613      	mov	r3, r2
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	4413      	add	r3, r2
 8001af4:	3b23      	subs	r3, #35	; 0x23
 8001af6:	221f      	movs	r2, #31
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	43da      	mvns	r2, r3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	400a      	ands	r2, r1
 8001b04:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	4618      	mov	r0, r3
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685a      	ldr	r2, [r3, #4]
 8001b18:	4613      	mov	r3, r2
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	4413      	add	r3, r2
 8001b1e:	3b23      	subs	r3, #35	; 0x23
 8001b20:	fa00 f203 	lsl.w	r2, r0, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	430a      	orrs	r2, r1
 8001b2a:	631a      	str	r2, [r3, #48]	; 0x30
 8001b2c:	e023      	b.n	8001b76 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685a      	ldr	r2, [r3, #4]
 8001b38:	4613      	mov	r3, r2
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	4413      	add	r3, r2
 8001b3e:	3b41      	subs	r3, #65	; 0x41
 8001b40:	221f      	movs	r2, #31
 8001b42:	fa02 f303 	lsl.w	r3, r2, r3
 8001b46:	43da      	mvns	r2, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	400a      	ands	r2, r1
 8001b4e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	685a      	ldr	r2, [r3, #4]
 8001b62:	4613      	mov	r3, r2
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	4413      	add	r3, r2
 8001b68:	3b41      	subs	r3, #65	; 0x41
 8001b6a:	fa00 f203 	lsl.w	r2, r0, r3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	430a      	orrs	r2, r1
 8001b74:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b76:	4b22      	ldr	r3, [pc, #136]	; (8001c00 <HAL_ADC_ConfigChannel+0x234>)
 8001b78:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a21      	ldr	r2, [pc, #132]	; (8001c04 <HAL_ADC_ConfigChannel+0x238>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d109      	bne.n	8001b98 <HAL_ADC_ConfigChannel+0x1cc>
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2b12      	cmp	r3, #18
 8001b8a:	d105      	bne.n	8001b98 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a19      	ldr	r2, [pc, #100]	; (8001c04 <HAL_ADC_ConfigChannel+0x238>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d123      	bne.n	8001bea <HAL_ADC_ConfigChannel+0x21e>
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	2b10      	cmp	r3, #16
 8001ba8:	d003      	beq.n	8001bb2 <HAL_ADC_ConfigChannel+0x1e6>
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	2b11      	cmp	r3, #17
 8001bb0:	d11b      	bne.n	8001bea <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	2b10      	cmp	r3, #16
 8001bc4:	d111      	bne.n	8001bea <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001bc6:	4b10      	ldr	r3, [pc, #64]	; (8001c08 <HAL_ADC_ConfigChannel+0x23c>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a10      	ldr	r2, [pc, #64]	; (8001c0c <HAL_ADC_ConfigChannel+0x240>)
 8001bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8001bd0:	0c9a      	lsrs	r2, r3, #18
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	4413      	add	r3, r2
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001bdc:	e002      	b.n	8001be4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	3b01      	subs	r3, #1
 8001be2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d1f9      	bne.n	8001bde <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2200      	movs	r2, #0
 8001bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8001bf2:	2300      	movs	r3, #0
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3714      	adds	r7, #20
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr
 8001c00:	40012300 	.word	0x40012300
 8001c04:	40012000 	.word	0x40012000
 8001c08:	20000034 	.word	0x20000034
 8001c0c:	431bde83 	.word	0x431bde83

08001c10 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b085      	sub	sp, #20
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c18:	4b79      	ldr	r3, [pc, #484]	; (8001e00 <ADC_Init+0x1f0>)
 8001c1a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	685a      	ldr	r2, [r3, #4]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	431a      	orrs	r2, r3
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	685a      	ldr	r2, [r3, #4]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c44:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	6859      	ldr	r1, [r3, #4]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	691b      	ldr	r3, [r3, #16]
 8001c50:	021a      	lsls	r2, r3, #8
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	430a      	orrs	r2, r1
 8001c58:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	685a      	ldr	r2, [r3, #4]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001c68:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	6859      	ldr	r1, [r3, #4]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689a      	ldr	r2, [r3, #8]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	430a      	orrs	r2, r1
 8001c7a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	689a      	ldr	r2, [r3, #8]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c8a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	6899      	ldr	r1, [r3, #8]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	68da      	ldr	r2, [r3, #12]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	430a      	orrs	r2, r1
 8001c9c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca2:	4a58      	ldr	r2, [pc, #352]	; (8001e04 <ADC_Init+0x1f4>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d022      	beq.n	8001cee <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	689a      	ldr	r2, [r3, #8]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001cb6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	6899      	ldr	r1, [r3, #8]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	430a      	orrs	r2, r1
 8001cc8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	689a      	ldr	r2, [r3, #8]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001cd8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	6899      	ldr	r1, [r3, #8]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	430a      	orrs	r2, r1
 8001cea:	609a      	str	r2, [r3, #8]
 8001cec:	e00f      	b.n	8001d0e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	689a      	ldr	r2, [r3, #8]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001cfc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	689a      	ldr	r2, [r3, #8]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d0c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	689a      	ldr	r2, [r3, #8]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f022 0202 	bic.w	r2, r2, #2
 8001d1c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	6899      	ldr	r1, [r3, #8]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	7e1b      	ldrb	r3, [r3, #24]
 8001d28:	005a      	lsls	r2, r3, #1
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d01b      	beq.n	8001d74 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	685a      	ldr	r2, [r3, #4]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d4a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	685a      	ldr	r2, [r3, #4]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001d5a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	6859      	ldr	r1, [r3, #4]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d66:	3b01      	subs	r3, #1
 8001d68:	035a      	lsls	r2, r3, #13
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	430a      	orrs	r2, r1
 8001d70:	605a      	str	r2, [r3, #4]
 8001d72:	e007      	b.n	8001d84 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	685a      	ldr	r2, [r3, #4]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d82:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001d92:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	69db      	ldr	r3, [r3, #28]
 8001d9e:	3b01      	subs	r3, #1
 8001da0:	051a      	lsls	r2, r3, #20
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	430a      	orrs	r2, r1
 8001da8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	689a      	ldr	r2, [r3, #8]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001db8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	6899      	ldr	r1, [r3, #8]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001dc6:	025a      	lsls	r2, r3, #9
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	430a      	orrs	r2, r1
 8001dce:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	689a      	ldr	r2, [r3, #8]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dde:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	6899      	ldr	r1, [r3, #8]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	695b      	ldr	r3, [r3, #20]
 8001dea:	029a      	lsls	r2, r3, #10
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	430a      	orrs	r2, r1
 8001df2:	609a      	str	r2, [r3, #8]
}
 8001df4:	bf00      	nop
 8001df6:	3714      	adds	r7, #20
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr
 8001e00:	40012300 	.word	0x40012300
 8001e04:	0f000001 	.word	0x0f000001

08001e08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b085      	sub	sp, #20
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f003 0307 	and.w	r3, r3, #7
 8001e16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e18:	4b0c      	ldr	r3, [pc, #48]	; (8001e4c <__NVIC_SetPriorityGrouping+0x44>)
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e1e:	68ba      	ldr	r2, [r7, #8]
 8001e20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e24:	4013      	ands	r3, r2
 8001e26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e3a:	4a04      	ldr	r2, [pc, #16]	; (8001e4c <__NVIC_SetPriorityGrouping+0x44>)
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	60d3      	str	r3, [r2, #12]
}
 8001e40:	bf00      	nop
 8001e42:	3714      	adds	r7, #20
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr
 8001e4c:	e000ed00 	.word	0xe000ed00

08001e50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e54:	4b04      	ldr	r3, [pc, #16]	; (8001e68 <__NVIC_GetPriorityGrouping+0x18>)
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	0a1b      	lsrs	r3, r3, #8
 8001e5a:	f003 0307 	and.w	r3, r3, #7
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr
 8001e68:	e000ed00 	.word	0xe000ed00

08001e6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	4603      	mov	r3, r0
 8001e74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	db0b      	blt.n	8001e96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e7e:	79fb      	ldrb	r3, [r7, #7]
 8001e80:	f003 021f 	and.w	r2, r3, #31
 8001e84:	4907      	ldr	r1, [pc, #28]	; (8001ea4 <__NVIC_EnableIRQ+0x38>)
 8001e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e8a:	095b      	lsrs	r3, r3, #5
 8001e8c:	2001      	movs	r0, #1
 8001e8e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e96:	bf00      	nop
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	e000e100 	.word	0xe000e100

08001ea8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	4603      	mov	r3, r0
 8001eb0:	6039      	str	r1, [r7, #0]
 8001eb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	db0a      	blt.n	8001ed2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	b2da      	uxtb	r2, r3
 8001ec0:	490c      	ldr	r1, [pc, #48]	; (8001ef4 <__NVIC_SetPriority+0x4c>)
 8001ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec6:	0112      	lsls	r2, r2, #4
 8001ec8:	b2d2      	uxtb	r2, r2
 8001eca:	440b      	add	r3, r1
 8001ecc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ed0:	e00a      	b.n	8001ee8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	b2da      	uxtb	r2, r3
 8001ed6:	4908      	ldr	r1, [pc, #32]	; (8001ef8 <__NVIC_SetPriority+0x50>)
 8001ed8:	79fb      	ldrb	r3, [r7, #7]
 8001eda:	f003 030f 	and.w	r3, r3, #15
 8001ede:	3b04      	subs	r3, #4
 8001ee0:	0112      	lsls	r2, r2, #4
 8001ee2:	b2d2      	uxtb	r2, r2
 8001ee4:	440b      	add	r3, r1
 8001ee6:	761a      	strb	r2, [r3, #24]
}
 8001ee8:	bf00      	nop
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr
 8001ef4:	e000e100 	.word	0xe000e100
 8001ef8:	e000ed00 	.word	0xe000ed00

08001efc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b089      	sub	sp, #36	; 0x24
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	60b9      	str	r1, [r7, #8]
 8001f06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f003 0307 	and.w	r3, r3, #7
 8001f0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	f1c3 0307 	rsb	r3, r3, #7
 8001f16:	2b04      	cmp	r3, #4
 8001f18:	bf28      	it	cs
 8001f1a:	2304      	movcs	r3, #4
 8001f1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	3304      	adds	r3, #4
 8001f22:	2b06      	cmp	r3, #6
 8001f24:	d902      	bls.n	8001f2c <NVIC_EncodePriority+0x30>
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	3b03      	subs	r3, #3
 8001f2a:	e000      	b.n	8001f2e <NVIC_EncodePriority+0x32>
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f30:	f04f 32ff 	mov.w	r2, #4294967295
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3a:	43da      	mvns	r2, r3
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	401a      	ands	r2, r3
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f44:	f04f 31ff 	mov.w	r1, #4294967295
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f4e:	43d9      	mvns	r1, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f54:	4313      	orrs	r3, r2
         );
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3724      	adds	r7, #36	; 0x24
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
	...

08001f64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	3b01      	subs	r3, #1
 8001f70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f74:	d301      	bcc.n	8001f7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f76:	2301      	movs	r3, #1
 8001f78:	e00f      	b.n	8001f9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f7a:	4a0a      	ldr	r2, [pc, #40]	; (8001fa4 <SysTick_Config+0x40>)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	3b01      	subs	r3, #1
 8001f80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f82:	210f      	movs	r1, #15
 8001f84:	f04f 30ff 	mov.w	r0, #4294967295
 8001f88:	f7ff ff8e 	bl	8001ea8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f8c:	4b05      	ldr	r3, [pc, #20]	; (8001fa4 <SysTick_Config+0x40>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f92:	4b04      	ldr	r3, [pc, #16]	; (8001fa4 <SysTick_Config+0x40>)
 8001f94:	2207      	movs	r2, #7
 8001f96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	e000e010 	.word	0xe000e010

08001fa8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f7ff ff29 	bl	8001e08 <__NVIC_SetPriorityGrouping>
}
 8001fb6:	bf00      	nop
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}

08001fbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fbe:	b580      	push	{r7, lr}
 8001fc0:	b086      	sub	sp, #24
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	60b9      	str	r1, [r7, #8]
 8001fc8:	607a      	str	r2, [r7, #4]
 8001fca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fd0:	f7ff ff3e 	bl	8001e50 <__NVIC_GetPriorityGrouping>
 8001fd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	68b9      	ldr	r1, [r7, #8]
 8001fda:	6978      	ldr	r0, [r7, #20]
 8001fdc:	f7ff ff8e 	bl	8001efc <NVIC_EncodePriority>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fe6:	4611      	mov	r1, r2
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7ff ff5d 	bl	8001ea8 <__NVIC_SetPriority>
}
 8001fee:	bf00      	nop
 8001ff0:	3718      	adds	r7, #24
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}

08001ff6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	b082      	sub	sp, #8
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002000:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002004:	4618      	mov	r0, r3
 8002006:	f7ff ff31 	bl	8001e6c <__NVIC_EnableIRQ>
}
 800200a:	bf00      	nop
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}

08002012 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002012:	b580      	push	{r7, lr}
 8002014:	b082      	sub	sp, #8
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f7ff ffa2 	bl	8001f64 <SysTick_Config>
 8002020:	4603      	mov	r3, r0
}
 8002022:	4618      	mov	r0, r3
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800202a:	b580      	push	{r7, lr}
 800202c:	b084      	sub	sp, #16
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002036:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002038:	f7ff fb08 	bl	800164c <HAL_GetTick>
 800203c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002044:	b2db      	uxtb	r3, r3
 8002046:	2b02      	cmp	r3, #2
 8002048:	d008      	beq.n	800205c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2280      	movs	r2, #128	; 0x80
 800204e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e052      	b.n	8002102 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f022 0216 	bic.w	r2, r2, #22
 800206a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	695a      	ldr	r2, [r3, #20]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800207a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002080:	2b00      	cmp	r3, #0
 8002082:	d103      	bne.n	800208c <HAL_DMA_Abort+0x62>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002088:	2b00      	cmp	r3, #0
 800208a:	d007      	beq.n	800209c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f022 0208 	bic.w	r2, r2, #8
 800209a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f022 0201 	bic.w	r2, r2, #1
 80020aa:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020ac:	e013      	b.n	80020d6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020ae:	f7ff facd 	bl	800164c <HAL_GetTick>
 80020b2:	4602      	mov	r2, r0
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	2b05      	cmp	r3, #5
 80020ba:	d90c      	bls.n	80020d6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2220      	movs	r2, #32
 80020c0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2203      	movs	r2, #3
 80020c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e015      	b.n	8002102 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0301 	and.w	r3, r3, #1
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d1e4      	bne.n	80020ae <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020e8:	223f      	movs	r2, #63	; 0x3f
 80020ea:	409a      	lsls	r2, r3
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2201      	movs	r2, #1
 80020f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2200      	movs	r2, #0
 80020fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002100:	2300      	movs	r3, #0
}
 8002102:	4618      	mov	r0, r3
 8002104:	3710      	adds	r7, #16
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}

0800210a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800210a:	b480      	push	{r7}
 800210c:	b083      	sub	sp, #12
 800210e:	af00      	add	r7, sp, #0
 8002110:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002118:	b2db      	uxtb	r3, r3
 800211a:	2b02      	cmp	r3, #2
 800211c:	d004      	beq.n	8002128 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2280      	movs	r2, #128	; 0x80
 8002122:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e00c      	b.n	8002142 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2205      	movs	r2, #5
 800212c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f022 0201 	bic.w	r2, r2, #1
 800213e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002140:	2300      	movs	r3, #0
}
 8002142:	4618      	mov	r0, r3
 8002144:	370c      	adds	r7, #12
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
	...

08002150 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002150:	b480      	push	{r7}
 8002152:	b089      	sub	sp, #36	; 0x24
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800215a:	2300      	movs	r3, #0
 800215c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800215e:	2300      	movs	r3, #0
 8002160:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002162:	2300      	movs	r3, #0
 8002164:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002166:	2300      	movs	r3, #0
 8002168:	61fb      	str	r3, [r7, #28]
 800216a:	e159      	b.n	8002420 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800216c:	2201      	movs	r2, #1
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	697a      	ldr	r2, [r7, #20]
 800217c:	4013      	ands	r3, r2
 800217e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002180:	693a      	ldr	r2, [r7, #16]
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	429a      	cmp	r2, r3
 8002186:	f040 8148 	bne.w	800241a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f003 0303 	and.w	r3, r3, #3
 8002192:	2b01      	cmp	r3, #1
 8002194:	d005      	beq.n	80021a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d130      	bne.n	8002204 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	2203      	movs	r2, #3
 80021ae:	fa02 f303 	lsl.w	r3, r2, r3
 80021b2:	43db      	mvns	r3, r3
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	4013      	ands	r3, r2
 80021b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	68da      	ldr	r2, [r3, #12]
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	fa02 f303 	lsl.w	r3, r2, r3
 80021c6:	69ba      	ldr	r2, [r7, #24]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021d8:	2201      	movs	r2, #1
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	43db      	mvns	r3, r3
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	4013      	ands	r3, r2
 80021e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	091b      	lsrs	r3, r3, #4
 80021ee:	f003 0201 	and.w	r2, r3, #1
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f003 0303 	and.w	r3, r3, #3
 800220c:	2b03      	cmp	r3, #3
 800220e:	d017      	beq.n	8002240 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	005b      	lsls	r3, r3, #1
 800221a:	2203      	movs	r2, #3
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	43db      	mvns	r3, r3
 8002222:	69ba      	ldr	r2, [r7, #24]
 8002224:	4013      	ands	r3, r2
 8002226:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	689a      	ldr	r2, [r3, #8]
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	fa02 f303 	lsl.w	r3, r2, r3
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	4313      	orrs	r3, r2
 8002238:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f003 0303 	and.w	r3, r3, #3
 8002248:	2b02      	cmp	r3, #2
 800224a:	d123      	bne.n	8002294 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	08da      	lsrs	r2, r3, #3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	3208      	adds	r2, #8
 8002254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002258:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	f003 0307 	and.w	r3, r3, #7
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	220f      	movs	r2, #15
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	43db      	mvns	r3, r3
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	4013      	ands	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	691a      	ldr	r2, [r3, #16]
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	f003 0307 	and.w	r3, r3, #7
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	4313      	orrs	r3, r2
 8002284:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	08da      	lsrs	r2, r3, #3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	3208      	adds	r2, #8
 800228e:	69b9      	ldr	r1, [r7, #24]
 8002290:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	2203      	movs	r2, #3
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	43db      	mvns	r3, r3
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	4013      	ands	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f003 0203 	and.w	r2, r3, #3
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	4313      	orrs	r3, r2
 80022c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	f000 80a2 	beq.w	800241a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022d6:	2300      	movs	r3, #0
 80022d8:	60fb      	str	r3, [r7, #12]
 80022da:	4b57      	ldr	r3, [pc, #348]	; (8002438 <HAL_GPIO_Init+0x2e8>)
 80022dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022de:	4a56      	ldr	r2, [pc, #344]	; (8002438 <HAL_GPIO_Init+0x2e8>)
 80022e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022e4:	6453      	str	r3, [r2, #68]	; 0x44
 80022e6:	4b54      	ldr	r3, [pc, #336]	; (8002438 <HAL_GPIO_Init+0x2e8>)
 80022e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022ee:	60fb      	str	r3, [r7, #12]
 80022f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022f2:	4a52      	ldr	r2, [pc, #328]	; (800243c <HAL_GPIO_Init+0x2ec>)
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	089b      	lsrs	r3, r3, #2
 80022f8:	3302      	adds	r3, #2
 80022fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	f003 0303 	and.w	r3, r3, #3
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	220f      	movs	r2, #15
 800230a:	fa02 f303 	lsl.w	r3, r2, r3
 800230e:	43db      	mvns	r3, r3
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	4013      	ands	r3, r2
 8002314:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a49      	ldr	r2, [pc, #292]	; (8002440 <HAL_GPIO_Init+0x2f0>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d019      	beq.n	8002352 <HAL_GPIO_Init+0x202>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a48      	ldr	r2, [pc, #288]	; (8002444 <HAL_GPIO_Init+0x2f4>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d013      	beq.n	800234e <HAL_GPIO_Init+0x1fe>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a47      	ldr	r2, [pc, #284]	; (8002448 <HAL_GPIO_Init+0x2f8>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d00d      	beq.n	800234a <HAL_GPIO_Init+0x1fa>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a46      	ldr	r2, [pc, #280]	; (800244c <HAL_GPIO_Init+0x2fc>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d007      	beq.n	8002346 <HAL_GPIO_Init+0x1f6>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a45      	ldr	r2, [pc, #276]	; (8002450 <HAL_GPIO_Init+0x300>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d101      	bne.n	8002342 <HAL_GPIO_Init+0x1f2>
 800233e:	2304      	movs	r3, #4
 8002340:	e008      	b.n	8002354 <HAL_GPIO_Init+0x204>
 8002342:	2307      	movs	r3, #7
 8002344:	e006      	b.n	8002354 <HAL_GPIO_Init+0x204>
 8002346:	2303      	movs	r3, #3
 8002348:	e004      	b.n	8002354 <HAL_GPIO_Init+0x204>
 800234a:	2302      	movs	r3, #2
 800234c:	e002      	b.n	8002354 <HAL_GPIO_Init+0x204>
 800234e:	2301      	movs	r3, #1
 8002350:	e000      	b.n	8002354 <HAL_GPIO_Init+0x204>
 8002352:	2300      	movs	r3, #0
 8002354:	69fa      	ldr	r2, [r7, #28]
 8002356:	f002 0203 	and.w	r2, r2, #3
 800235a:	0092      	lsls	r2, r2, #2
 800235c:	4093      	lsls	r3, r2
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	4313      	orrs	r3, r2
 8002362:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002364:	4935      	ldr	r1, [pc, #212]	; (800243c <HAL_GPIO_Init+0x2ec>)
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	089b      	lsrs	r3, r3, #2
 800236a:	3302      	adds	r3, #2
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002372:	4b38      	ldr	r3, [pc, #224]	; (8002454 <HAL_GPIO_Init+0x304>)
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	43db      	mvns	r3, r3
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	4013      	ands	r3, r2
 8002380:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d003      	beq.n	8002396 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	4313      	orrs	r3, r2
 8002394:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002396:	4a2f      	ldr	r2, [pc, #188]	; (8002454 <HAL_GPIO_Init+0x304>)
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800239c:	4b2d      	ldr	r3, [pc, #180]	; (8002454 <HAL_GPIO_Init+0x304>)
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	43db      	mvns	r3, r3
 80023a6:	69ba      	ldr	r2, [r7, #24]
 80023a8:	4013      	ands	r3, r2
 80023aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d003      	beq.n	80023c0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	4313      	orrs	r3, r2
 80023be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023c0:	4a24      	ldr	r2, [pc, #144]	; (8002454 <HAL_GPIO_Init+0x304>)
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023c6:	4b23      	ldr	r3, [pc, #140]	; (8002454 <HAL_GPIO_Init+0x304>)
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	43db      	mvns	r3, r3
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	4013      	ands	r3, r2
 80023d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d003      	beq.n	80023ea <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023ea:	4a1a      	ldr	r2, [pc, #104]	; (8002454 <HAL_GPIO_Init+0x304>)
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023f0:	4b18      	ldr	r3, [pc, #96]	; (8002454 <HAL_GPIO_Init+0x304>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	43db      	mvns	r3, r3
 80023fa:	69ba      	ldr	r2, [r7, #24]
 80023fc:	4013      	ands	r3, r2
 80023fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d003      	beq.n	8002414 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	4313      	orrs	r3, r2
 8002412:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002414:	4a0f      	ldr	r2, [pc, #60]	; (8002454 <HAL_GPIO_Init+0x304>)
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	3301      	adds	r3, #1
 800241e:	61fb      	str	r3, [r7, #28]
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	2b0f      	cmp	r3, #15
 8002424:	f67f aea2 	bls.w	800216c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002428:	bf00      	nop
 800242a:	bf00      	nop
 800242c:	3724      	adds	r7, #36	; 0x24
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	40023800 	.word	0x40023800
 800243c:	40013800 	.word	0x40013800
 8002440:	40020000 	.word	0x40020000
 8002444:	40020400 	.word	0x40020400
 8002448:	40020800 	.word	0x40020800
 800244c:	40020c00 	.word	0x40020c00
 8002450:	40021000 	.word	0x40021000
 8002454:	40013c00 	.word	0x40013c00

08002458 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	460b      	mov	r3, r1
 8002462:	807b      	strh	r3, [r7, #2]
 8002464:	4613      	mov	r3, r2
 8002466:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002468:	787b      	ldrb	r3, [r7, #1]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d003      	beq.n	8002476 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800246e:	887a      	ldrh	r2, [r7, #2]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002474:	e003      	b.n	800247e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002476:	887b      	ldrh	r3, [r7, #2]
 8002478:	041a      	lsls	r2, r3, #16
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	619a      	str	r2, [r3, #24]
}
 800247e:	bf00      	nop
 8002480:	370c      	adds	r7, #12
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
	...

0800248c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	4603      	mov	r3, r0
 8002494:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002496:	4b08      	ldr	r3, [pc, #32]	; (80024b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002498:	695a      	ldr	r2, [r3, #20]
 800249a:	88fb      	ldrh	r3, [r7, #6]
 800249c:	4013      	ands	r3, r2
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d006      	beq.n	80024b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80024a2:	4a05      	ldr	r2, [pc, #20]	; (80024b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024a4:	88fb      	ldrh	r3, [r7, #6]
 80024a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80024a8:	88fb      	ldrh	r3, [r7, #6]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7fe fbbe 	bl	8000c2c <HAL_GPIO_EXTI_Callback>
  }
}
 80024b0:	bf00      	nop
 80024b2:	3708      	adds	r7, #8
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	40013c00 	.word	0x40013c00

080024bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b086      	sub	sp, #24
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d101      	bne.n	80024ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e267      	b.n	800299e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d075      	beq.n	80025c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024da:	4b88      	ldr	r3, [pc, #544]	; (80026fc <HAL_RCC_OscConfig+0x240>)
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	f003 030c 	and.w	r3, r3, #12
 80024e2:	2b04      	cmp	r3, #4
 80024e4:	d00c      	beq.n	8002500 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024e6:	4b85      	ldr	r3, [pc, #532]	; (80026fc <HAL_RCC_OscConfig+0x240>)
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024ee:	2b08      	cmp	r3, #8
 80024f0:	d112      	bne.n	8002518 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024f2:	4b82      	ldr	r3, [pc, #520]	; (80026fc <HAL_RCC_OscConfig+0x240>)
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024fe:	d10b      	bne.n	8002518 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002500:	4b7e      	ldr	r3, [pc, #504]	; (80026fc <HAL_RCC_OscConfig+0x240>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d05b      	beq.n	80025c4 <HAL_RCC_OscConfig+0x108>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d157      	bne.n	80025c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e242      	b.n	800299e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002520:	d106      	bne.n	8002530 <HAL_RCC_OscConfig+0x74>
 8002522:	4b76      	ldr	r3, [pc, #472]	; (80026fc <HAL_RCC_OscConfig+0x240>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a75      	ldr	r2, [pc, #468]	; (80026fc <HAL_RCC_OscConfig+0x240>)
 8002528:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800252c:	6013      	str	r3, [r2, #0]
 800252e:	e01d      	b.n	800256c <HAL_RCC_OscConfig+0xb0>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002538:	d10c      	bne.n	8002554 <HAL_RCC_OscConfig+0x98>
 800253a:	4b70      	ldr	r3, [pc, #448]	; (80026fc <HAL_RCC_OscConfig+0x240>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a6f      	ldr	r2, [pc, #444]	; (80026fc <HAL_RCC_OscConfig+0x240>)
 8002540:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002544:	6013      	str	r3, [r2, #0]
 8002546:	4b6d      	ldr	r3, [pc, #436]	; (80026fc <HAL_RCC_OscConfig+0x240>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a6c      	ldr	r2, [pc, #432]	; (80026fc <HAL_RCC_OscConfig+0x240>)
 800254c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002550:	6013      	str	r3, [r2, #0]
 8002552:	e00b      	b.n	800256c <HAL_RCC_OscConfig+0xb0>
 8002554:	4b69      	ldr	r3, [pc, #420]	; (80026fc <HAL_RCC_OscConfig+0x240>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a68      	ldr	r2, [pc, #416]	; (80026fc <HAL_RCC_OscConfig+0x240>)
 800255a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800255e:	6013      	str	r3, [r2, #0]
 8002560:	4b66      	ldr	r3, [pc, #408]	; (80026fc <HAL_RCC_OscConfig+0x240>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a65      	ldr	r2, [pc, #404]	; (80026fc <HAL_RCC_OscConfig+0x240>)
 8002566:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800256a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d013      	beq.n	800259c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002574:	f7ff f86a 	bl	800164c <HAL_GetTick>
 8002578:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800257a:	e008      	b.n	800258e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800257c:	f7ff f866 	bl	800164c <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b64      	cmp	r3, #100	; 0x64
 8002588:	d901      	bls.n	800258e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e207      	b.n	800299e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800258e:	4b5b      	ldr	r3, [pc, #364]	; (80026fc <HAL_RCC_OscConfig+0x240>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d0f0      	beq.n	800257c <HAL_RCC_OscConfig+0xc0>
 800259a:	e014      	b.n	80025c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800259c:	f7ff f856 	bl	800164c <HAL_GetTick>
 80025a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025a2:	e008      	b.n	80025b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025a4:	f7ff f852 	bl	800164c <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b64      	cmp	r3, #100	; 0x64
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e1f3      	b.n	800299e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025b6:	4b51      	ldr	r3, [pc, #324]	; (80026fc <HAL_RCC_OscConfig+0x240>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d1f0      	bne.n	80025a4 <HAL_RCC_OscConfig+0xe8>
 80025c2:	e000      	b.n	80025c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d063      	beq.n	800269a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025d2:	4b4a      	ldr	r3, [pc, #296]	; (80026fc <HAL_RCC_OscConfig+0x240>)
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	f003 030c 	and.w	r3, r3, #12
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d00b      	beq.n	80025f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025de:	4b47      	ldr	r3, [pc, #284]	; (80026fc <HAL_RCC_OscConfig+0x240>)
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025e6:	2b08      	cmp	r3, #8
 80025e8:	d11c      	bne.n	8002624 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025ea:	4b44      	ldr	r3, [pc, #272]	; (80026fc <HAL_RCC_OscConfig+0x240>)
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d116      	bne.n	8002624 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025f6:	4b41      	ldr	r3, [pc, #260]	; (80026fc <HAL_RCC_OscConfig+0x240>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d005      	beq.n	800260e <HAL_RCC_OscConfig+0x152>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d001      	beq.n	800260e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e1c7      	b.n	800299e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800260e:	4b3b      	ldr	r3, [pc, #236]	; (80026fc <HAL_RCC_OscConfig+0x240>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	00db      	lsls	r3, r3, #3
 800261c:	4937      	ldr	r1, [pc, #220]	; (80026fc <HAL_RCC_OscConfig+0x240>)
 800261e:	4313      	orrs	r3, r2
 8002620:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002622:	e03a      	b.n	800269a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d020      	beq.n	800266e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800262c:	4b34      	ldr	r3, [pc, #208]	; (8002700 <HAL_RCC_OscConfig+0x244>)
 800262e:	2201      	movs	r2, #1
 8002630:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002632:	f7ff f80b 	bl	800164c <HAL_GetTick>
 8002636:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002638:	e008      	b.n	800264c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800263a:	f7ff f807 	bl	800164c <HAL_GetTick>
 800263e:	4602      	mov	r2, r0
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	2b02      	cmp	r3, #2
 8002646:	d901      	bls.n	800264c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e1a8      	b.n	800299e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800264c:	4b2b      	ldr	r3, [pc, #172]	; (80026fc <HAL_RCC_OscConfig+0x240>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0302 	and.w	r3, r3, #2
 8002654:	2b00      	cmp	r3, #0
 8002656:	d0f0      	beq.n	800263a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002658:	4b28      	ldr	r3, [pc, #160]	; (80026fc <HAL_RCC_OscConfig+0x240>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	691b      	ldr	r3, [r3, #16]
 8002664:	00db      	lsls	r3, r3, #3
 8002666:	4925      	ldr	r1, [pc, #148]	; (80026fc <HAL_RCC_OscConfig+0x240>)
 8002668:	4313      	orrs	r3, r2
 800266a:	600b      	str	r3, [r1, #0]
 800266c:	e015      	b.n	800269a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800266e:	4b24      	ldr	r3, [pc, #144]	; (8002700 <HAL_RCC_OscConfig+0x244>)
 8002670:	2200      	movs	r2, #0
 8002672:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002674:	f7fe ffea 	bl	800164c <HAL_GetTick>
 8002678:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800267a:	e008      	b.n	800268e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800267c:	f7fe ffe6 	bl	800164c <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	2b02      	cmp	r3, #2
 8002688:	d901      	bls.n	800268e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e187      	b.n	800299e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800268e:	4b1b      	ldr	r3, [pc, #108]	; (80026fc <HAL_RCC_OscConfig+0x240>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0302 	and.w	r3, r3, #2
 8002696:	2b00      	cmp	r3, #0
 8002698:	d1f0      	bne.n	800267c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0308 	and.w	r3, r3, #8
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d036      	beq.n	8002714 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	695b      	ldr	r3, [r3, #20]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d016      	beq.n	80026dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026ae:	4b15      	ldr	r3, [pc, #84]	; (8002704 <HAL_RCC_OscConfig+0x248>)
 80026b0:	2201      	movs	r2, #1
 80026b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026b4:	f7fe ffca 	bl	800164c <HAL_GetTick>
 80026b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026ba:	e008      	b.n	80026ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026bc:	f7fe ffc6 	bl	800164c <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e167      	b.n	800299e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026ce:	4b0b      	ldr	r3, [pc, #44]	; (80026fc <HAL_RCC_OscConfig+0x240>)
 80026d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026d2:	f003 0302 	and.w	r3, r3, #2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d0f0      	beq.n	80026bc <HAL_RCC_OscConfig+0x200>
 80026da:	e01b      	b.n	8002714 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026dc:	4b09      	ldr	r3, [pc, #36]	; (8002704 <HAL_RCC_OscConfig+0x248>)
 80026de:	2200      	movs	r2, #0
 80026e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026e2:	f7fe ffb3 	bl	800164c <HAL_GetTick>
 80026e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026e8:	e00e      	b.n	8002708 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026ea:	f7fe ffaf 	bl	800164c <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d907      	bls.n	8002708 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e150      	b.n	800299e <HAL_RCC_OscConfig+0x4e2>
 80026fc:	40023800 	.word	0x40023800
 8002700:	42470000 	.word	0x42470000
 8002704:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002708:	4b88      	ldr	r3, [pc, #544]	; (800292c <HAL_RCC_OscConfig+0x470>)
 800270a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800270c:	f003 0302 	and.w	r3, r3, #2
 8002710:	2b00      	cmp	r3, #0
 8002712:	d1ea      	bne.n	80026ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0304 	and.w	r3, r3, #4
 800271c:	2b00      	cmp	r3, #0
 800271e:	f000 8097 	beq.w	8002850 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002722:	2300      	movs	r3, #0
 8002724:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002726:	4b81      	ldr	r3, [pc, #516]	; (800292c <HAL_RCC_OscConfig+0x470>)
 8002728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d10f      	bne.n	8002752 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002732:	2300      	movs	r3, #0
 8002734:	60bb      	str	r3, [r7, #8]
 8002736:	4b7d      	ldr	r3, [pc, #500]	; (800292c <HAL_RCC_OscConfig+0x470>)
 8002738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273a:	4a7c      	ldr	r2, [pc, #496]	; (800292c <HAL_RCC_OscConfig+0x470>)
 800273c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002740:	6413      	str	r3, [r2, #64]	; 0x40
 8002742:	4b7a      	ldr	r3, [pc, #488]	; (800292c <HAL_RCC_OscConfig+0x470>)
 8002744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800274a:	60bb      	str	r3, [r7, #8]
 800274c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800274e:	2301      	movs	r3, #1
 8002750:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002752:	4b77      	ldr	r3, [pc, #476]	; (8002930 <HAL_RCC_OscConfig+0x474>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800275a:	2b00      	cmp	r3, #0
 800275c:	d118      	bne.n	8002790 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800275e:	4b74      	ldr	r3, [pc, #464]	; (8002930 <HAL_RCC_OscConfig+0x474>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a73      	ldr	r2, [pc, #460]	; (8002930 <HAL_RCC_OscConfig+0x474>)
 8002764:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002768:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800276a:	f7fe ff6f 	bl	800164c <HAL_GetTick>
 800276e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002770:	e008      	b.n	8002784 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002772:	f7fe ff6b 	bl	800164c <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	2b02      	cmp	r3, #2
 800277e:	d901      	bls.n	8002784 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e10c      	b.n	800299e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002784:	4b6a      	ldr	r3, [pc, #424]	; (8002930 <HAL_RCC_OscConfig+0x474>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800278c:	2b00      	cmp	r3, #0
 800278e:	d0f0      	beq.n	8002772 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	2b01      	cmp	r3, #1
 8002796:	d106      	bne.n	80027a6 <HAL_RCC_OscConfig+0x2ea>
 8002798:	4b64      	ldr	r3, [pc, #400]	; (800292c <HAL_RCC_OscConfig+0x470>)
 800279a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800279c:	4a63      	ldr	r2, [pc, #396]	; (800292c <HAL_RCC_OscConfig+0x470>)
 800279e:	f043 0301 	orr.w	r3, r3, #1
 80027a2:	6713      	str	r3, [r2, #112]	; 0x70
 80027a4:	e01c      	b.n	80027e0 <HAL_RCC_OscConfig+0x324>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	2b05      	cmp	r3, #5
 80027ac:	d10c      	bne.n	80027c8 <HAL_RCC_OscConfig+0x30c>
 80027ae:	4b5f      	ldr	r3, [pc, #380]	; (800292c <HAL_RCC_OscConfig+0x470>)
 80027b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b2:	4a5e      	ldr	r2, [pc, #376]	; (800292c <HAL_RCC_OscConfig+0x470>)
 80027b4:	f043 0304 	orr.w	r3, r3, #4
 80027b8:	6713      	str	r3, [r2, #112]	; 0x70
 80027ba:	4b5c      	ldr	r3, [pc, #368]	; (800292c <HAL_RCC_OscConfig+0x470>)
 80027bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027be:	4a5b      	ldr	r2, [pc, #364]	; (800292c <HAL_RCC_OscConfig+0x470>)
 80027c0:	f043 0301 	orr.w	r3, r3, #1
 80027c4:	6713      	str	r3, [r2, #112]	; 0x70
 80027c6:	e00b      	b.n	80027e0 <HAL_RCC_OscConfig+0x324>
 80027c8:	4b58      	ldr	r3, [pc, #352]	; (800292c <HAL_RCC_OscConfig+0x470>)
 80027ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027cc:	4a57      	ldr	r2, [pc, #348]	; (800292c <HAL_RCC_OscConfig+0x470>)
 80027ce:	f023 0301 	bic.w	r3, r3, #1
 80027d2:	6713      	str	r3, [r2, #112]	; 0x70
 80027d4:	4b55      	ldr	r3, [pc, #340]	; (800292c <HAL_RCC_OscConfig+0x470>)
 80027d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d8:	4a54      	ldr	r2, [pc, #336]	; (800292c <HAL_RCC_OscConfig+0x470>)
 80027da:	f023 0304 	bic.w	r3, r3, #4
 80027de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d015      	beq.n	8002814 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027e8:	f7fe ff30 	bl	800164c <HAL_GetTick>
 80027ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ee:	e00a      	b.n	8002806 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027f0:	f7fe ff2c 	bl	800164c <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80027fe:	4293      	cmp	r3, r2
 8002800:	d901      	bls.n	8002806 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e0cb      	b.n	800299e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002806:	4b49      	ldr	r3, [pc, #292]	; (800292c <HAL_RCC_OscConfig+0x470>)
 8002808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800280a:	f003 0302 	and.w	r3, r3, #2
 800280e:	2b00      	cmp	r3, #0
 8002810:	d0ee      	beq.n	80027f0 <HAL_RCC_OscConfig+0x334>
 8002812:	e014      	b.n	800283e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002814:	f7fe ff1a 	bl	800164c <HAL_GetTick>
 8002818:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800281a:	e00a      	b.n	8002832 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800281c:	f7fe ff16 	bl	800164c <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	f241 3288 	movw	r2, #5000	; 0x1388
 800282a:	4293      	cmp	r3, r2
 800282c:	d901      	bls.n	8002832 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e0b5      	b.n	800299e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002832:	4b3e      	ldr	r3, [pc, #248]	; (800292c <HAL_RCC_OscConfig+0x470>)
 8002834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002836:	f003 0302 	and.w	r3, r3, #2
 800283a:	2b00      	cmp	r3, #0
 800283c:	d1ee      	bne.n	800281c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800283e:	7dfb      	ldrb	r3, [r7, #23]
 8002840:	2b01      	cmp	r3, #1
 8002842:	d105      	bne.n	8002850 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002844:	4b39      	ldr	r3, [pc, #228]	; (800292c <HAL_RCC_OscConfig+0x470>)
 8002846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002848:	4a38      	ldr	r2, [pc, #224]	; (800292c <HAL_RCC_OscConfig+0x470>)
 800284a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800284e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	699b      	ldr	r3, [r3, #24]
 8002854:	2b00      	cmp	r3, #0
 8002856:	f000 80a1 	beq.w	800299c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800285a:	4b34      	ldr	r3, [pc, #208]	; (800292c <HAL_RCC_OscConfig+0x470>)
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	f003 030c 	and.w	r3, r3, #12
 8002862:	2b08      	cmp	r3, #8
 8002864:	d05c      	beq.n	8002920 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	699b      	ldr	r3, [r3, #24]
 800286a:	2b02      	cmp	r3, #2
 800286c:	d141      	bne.n	80028f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800286e:	4b31      	ldr	r3, [pc, #196]	; (8002934 <HAL_RCC_OscConfig+0x478>)
 8002870:	2200      	movs	r2, #0
 8002872:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002874:	f7fe feea 	bl	800164c <HAL_GetTick>
 8002878:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800287a:	e008      	b.n	800288e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800287c:	f7fe fee6 	bl	800164c <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b02      	cmp	r3, #2
 8002888:	d901      	bls.n	800288e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e087      	b.n	800299e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800288e:	4b27      	ldr	r3, [pc, #156]	; (800292c <HAL_RCC_OscConfig+0x470>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d1f0      	bne.n	800287c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	69da      	ldr	r2, [r3, #28]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a1b      	ldr	r3, [r3, #32]
 80028a2:	431a      	orrs	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a8:	019b      	lsls	r3, r3, #6
 80028aa:	431a      	orrs	r2, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b0:	085b      	lsrs	r3, r3, #1
 80028b2:	3b01      	subs	r3, #1
 80028b4:	041b      	lsls	r3, r3, #16
 80028b6:	431a      	orrs	r2, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028bc:	061b      	lsls	r3, r3, #24
 80028be:	491b      	ldr	r1, [pc, #108]	; (800292c <HAL_RCC_OscConfig+0x470>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028c4:	4b1b      	ldr	r3, [pc, #108]	; (8002934 <HAL_RCC_OscConfig+0x478>)
 80028c6:	2201      	movs	r2, #1
 80028c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ca:	f7fe febf 	bl	800164c <HAL_GetTick>
 80028ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028d0:	e008      	b.n	80028e4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028d2:	f7fe febb 	bl	800164c <HAL_GetTick>
 80028d6:	4602      	mov	r2, r0
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d901      	bls.n	80028e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80028e0:	2303      	movs	r3, #3
 80028e2:	e05c      	b.n	800299e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028e4:	4b11      	ldr	r3, [pc, #68]	; (800292c <HAL_RCC_OscConfig+0x470>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d0f0      	beq.n	80028d2 <HAL_RCC_OscConfig+0x416>
 80028f0:	e054      	b.n	800299c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028f2:	4b10      	ldr	r3, [pc, #64]	; (8002934 <HAL_RCC_OscConfig+0x478>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f8:	f7fe fea8 	bl	800164c <HAL_GetTick>
 80028fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028fe:	e008      	b.n	8002912 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002900:	f7fe fea4 	bl	800164c <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b02      	cmp	r3, #2
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e045      	b.n	800299e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002912:	4b06      	ldr	r3, [pc, #24]	; (800292c <HAL_RCC_OscConfig+0x470>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d1f0      	bne.n	8002900 <HAL_RCC_OscConfig+0x444>
 800291e:	e03d      	b.n	800299c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	699b      	ldr	r3, [r3, #24]
 8002924:	2b01      	cmp	r3, #1
 8002926:	d107      	bne.n	8002938 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e038      	b.n	800299e <HAL_RCC_OscConfig+0x4e2>
 800292c:	40023800 	.word	0x40023800
 8002930:	40007000 	.word	0x40007000
 8002934:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002938:	4b1b      	ldr	r3, [pc, #108]	; (80029a8 <HAL_RCC_OscConfig+0x4ec>)
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	699b      	ldr	r3, [r3, #24]
 8002942:	2b01      	cmp	r3, #1
 8002944:	d028      	beq.n	8002998 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002950:	429a      	cmp	r2, r3
 8002952:	d121      	bne.n	8002998 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800295e:	429a      	cmp	r2, r3
 8002960:	d11a      	bne.n	8002998 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002962:	68fa      	ldr	r2, [r7, #12]
 8002964:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002968:	4013      	ands	r3, r2
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800296e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002970:	4293      	cmp	r3, r2
 8002972:	d111      	bne.n	8002998 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800297e:	085b      	lsrs	r3, r3, #1
 8002980:	3b01      	subs	r3, #1
 8002982:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002984:	429a      	cmp	r2, r3
 8002986:	d107      	bne.n	8002998 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002992:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002994:	429a      	cmp	r2, r3
 8002996:	d001      	beq.n	800299c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e000      	b.n	800299e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3718      	adds	r7, #24
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	40023800 	.word	0x40023800

080029ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d101      	bne.n	80029c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e0cc      	b.n	8002b5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029c0:	4b68      	ldr	r3, [pc, #416]	; (8002b64 <HAL_RCC_ClockConfig+0x1b8>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0307 	and.w	r3, r3, #7
 80029c8:	683a      	ldr	r2, [r7, #0]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d90c      	bls.n	80029e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ce:	4b65      	ldr	r3, [pc, #404]	; (8002b64 <HAL_RCC_ClockConfig+0x1b8>)
 80029d0:	683a      	ldr	r2, [r7, #0]
 80029d2:	b2d2      	uxtb	r2, r2
 80029d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029d6:	4b63      	ldr	r3, [pc, #396]	; (8002b64 <HAL_RCC_ClockConfig+0x1b8>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0307 	and.w	r3, r3, #7
 80029de:	683a      	ldr	r2, [r7, #0]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d001      	beq.n	80029e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e0b8      	b.n	8002b5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0302 	and.w	r3, r3, #2
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d020      	beq.n	8002a36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0304 	and.w	r3, r3, #4
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d005      	beq.n	8002a0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a00:	4b59      	ldr	r3, [pc, #356]	; (8002b68 <HAL_RCC_ClockConfig+0x1bc>)
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	4a58      	ldr	r2, [pc, #352]	; (8002b68 <HAL_RCC_ClockConfig+0x1bc>)
 8002a06:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a0a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0308 	and.w	r3, r3, #8
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d005      	beq.n	8002a24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a18:	4b53      	ldr	r3, [pc, #332]	; (8002b68 <HAL_RCC_ClockConfig+0x1bc>)
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	4a52      	ldr	r2, [pc, #328]	; (8002b68 <HAL_RCC_ClockConfig+0x1bc>)
 8002a1e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a24:	4b50      	ldr	r3, [pc, #320]	; (8002b68 <HAL_RCC_ClockConfig+0x1bc>)
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	494d      	ldr	r1, [pc, #308]	; (8002b68 <HAL_RCC_ClockConfig+0x1bc>)
 8002a32:	4313      	orrs	r3, r2
 8002a34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0301 	and.w	r3, r3, #1
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d044      	beq.n	8002acc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d107      	bne.n	8002a5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a4a:	4b47      	ldr	r3, [pc, #284]	; (8002b68 <HAL_RCC_ClockConfig+0x1bc>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d119      	bne.n	8002a8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e07f      	b.n	8002b5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d003      	beq.n	8002a6a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a66:	2b03      	cmp	r3, #3
 8002a68:	d107      	bne.n	8002a7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a6a:	4b3f      	ldr	r3, [pc, #252]	; (8002b68 <HAL_RCC_ClockConfig+0x1bc>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d109      	bne.n	8002a8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e06f      	b.n	8002b5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a7a:	4b3b      	ldr	r3, [pc, #236]	; (8002b68 <HAL_RCC_ClockConfig+0x1bc>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0302 	and.w	r3, r3, #2
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d101      	bne.n	8002a8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e067      	b.n	8002b5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a8a:	4b37      	ldr	r3, [pc, #220]	; (8002b68 <HAL_RCC_ClockConfig+0x1bc>)
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	f023 0203 	bic.w	r2, r3, #3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	4934      	ldr	r1, [pc, #208]	; (8002b68 <HAL_RCC_ClockConfig+0x1bc>)
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a9c:	f7fe fdd6 	bl	800164c <HAL_GetTick>
 8002aa0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aa2:	e00a      	b.n	8002aba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002aa4:	f7fe fdd2 	bl	800164c <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e04f      	b.n	8002b5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aba:	4b2b      	ldr	r3, [pc, #172]	; (8002b68 <HAL_RCC_ClockConfig+0x1bc>)
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	f003 020c 	and.w	r2, r3, #12
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d1eb      	bne.n	8002aa4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002acc:	4b25      	ldr	r3, [pc, #148]	; (8002b64 <HAL_RCC_ClockConfig+0x1b8>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0307 	and.w	r3, r3, #7
 8002ad4:	683a      	ldr	r2, [r7, #0]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d20c      	bcs.n	8002af4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ada:	4b22      	ldr	r3, [pc, #136]	; (8002b64 <HAL_RCC_ClockConfig+0x1b8>)
 8002adc:	683a      	ldr	r2, [r7, #0]
 8002ade:	b2d2      	uxtb	r2, r2
 8002ae0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ae2:	4b20      	ldr	r3, [pc, #128]	; (8002b64 <HAL_RCC_ClockConfig+0x1b8>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0307 	and.w	r3, r3, #7
 8002aea:	683a      	ldr	r2, [r7, #0]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d001      	beq.n	8002af4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e032      	b.n	8002b5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0304 	and.w	r3, r3, #4
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d008      	beq.n	8002b12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b00:	4b19      	ldr	r3, [pc, #100]	; (8002b68 <HAL_RCC_ClockConfig+0x1bc>)
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	4916      	ldr	r1, [pc, #88]	; (8002b68 <HAL_RCC_ClockConfig+0x1bc>)
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0308 	and.w	r3, r3, #8
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d009      	beq.n	8002b32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b1e:	4b12      	ldr	r3, [pc, #72]	; (8002b68 <HAL_RCC_ClockConfig+0x1bc>)
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	00db      	lsls	r3, r3, #3
 8002b2c:	490e      	ldr	r1, [pc, #56]	; (8002b68 <HAL_RCC_ClockConfig+0x1bc>)
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b32:	f000 f821 	bl	8002b78 <HAL_RCC_GetSysClockFreq>
 8002b36:	4602      	mov	r2, r0
 8002b38:	4b0b      	ldr	r3, [pc, #44]	; (8002b68 <HAL_RCC_ClockConfig+0x1bc>)
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	091b      	lsrs	r3, r3, #4
 8002b3e:	f003 030f 	and.w	r3, r3, #15
 8002b42:	490a      	ldr	r1, [pc, #40]	; (8002b6c <HAL_RCC_ClockConfig+0x1c0>)
 8002b44:	5ccb      	ldrb	r3, [r1, r3]
 8002b46:	fa22 f303 	lsr.w	r3, r2, r3
 8002b4a:	4a09      	ldr	r2, [pc, #36]	; (8002b70 <HAL_RCC_ClockConfig+0x1c4>)
 8002b4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b4e:	4b09      	ldr	r3, [pc, #36]	; (8002b74 <HAL_RCC_ClockConfig+0x1c8>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7fe fd36 	bl	80015c4 <HAL_InitTick>

  return HAL_OK;
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3710      	adds	r7, #16
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	40023c00 	.word	0x40023c00
 8002b68:	40023800 	.word	0x40023800
 8002b6c:	080064bc 	.word	0x080064bc
 8002b70:	20000034 	.word	0x20000034
 8002b74:	20000038 	.word	0x20000038

08002b78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b7c:	b090      	sub	sp, #64	; 0x40
 8002b7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b80:	2300      	movs	r3, #0
 8002b82:	637b      	str	r3, [r7, #52]	; 0x34
 8002b84:	2300      	movs	r3, #0
 8002b86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b88:	2300      	movs	r3, #0
 8002b8a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b90:	4b59      	ldr	r3, [pc, #356]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	f003 030c 	and.w	r3, r3, #12
 8002b98:	2b08      	cmp	r3, #8
 8002b9a:	d00d      	beq.n	8002bb8 <HAL_RCC_GetSysClockFreq+0x40>
 8002b9c:	2b08      	cmp	r3, #8
 8002b9e:	f200 80a1 	bhi.w	8002ce4 <HAL_RCC_GetSysClockFreq+0x16c>
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d002      	beq.n	8002bac <HAL_RCC_GetSysClockFreq+0x34>
 8002ba6:	2b04      	cmp	r3, #4
 8002ba8:	d003      	beq.n	8002bb2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002baa:	e09b      	b.n	8002ce4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002bac:	4b53      	ldr	r3, [pc, #332]	; (8002cfc <HAL_RCC_GetSysClockFreq+0x184>)
 8002bae:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002bb0:	e09b      	b.n	8002cea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bb2:	4b53      	ldr	r3, [pc, #332]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x188>)
 8002bb4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002bb6:	e098      	b.n	8002cea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bb8:	4b4f      	ldr	r3, [pc, #316]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002bc0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bc2:	4b4d      	ldr	r3, [pc, #308]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d028      	beq.n	8002c20 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bce:	4b4a      	ldr	r3, [pc, #296]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	099b      	lsrs	r3, r3, #6
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	623b      	str	r3, [r7, #32]
 8002bd8:	627a      	str	r2, [r7, #36]	; 0x24
 8002bda:	6a3b      	ldr	r3, [r7, #32]
 8002bdc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002be0:	2100      	movs	r1, #0
 8002be2:	4b47      	ldr	r3, [pc, #284]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x188>)
 8002be4:	fb03 f201 	mul.w	r2, r3, r1
 8002be8:	2300      	movs	r3, #0
 8002bea:	fb00 f303 	mul.w	r3, r0, r3
 8002bee:	4413      	add	r3, r2
 8002bf0:	4a43      	ldr	r2, [pc, #268]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x188>)
 8002bf2:	fba0 1202 	umull	r1, r2, r0, r2
 8002bf6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002bf8:	460a      	mov	r2, r1
 8002bfa:	62ba      	str	r2, [r7, #40]	; 0x28
 8002bfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bfe:	4413      	add	r3, r2
 8002c00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c04:	2200      	movs	r2, #0
 8002c06:	61bb      	str	r3, [r7, #24]
 8002c08:	61fa      	str	r2, [r7, #28]
 8002c0a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c0e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002c12:	f7fd fadf 	bl	80001d4 <__aeabi_uldivmod>
 8002c16:	4602      	mov	r2, r0
 8002c18:	460b      	mov	r3, r1
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c1e:	e053      	b.n	8002cc8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c20:	4b35      	ldr	r3, [pc, #212]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	099b      	lsrs	r3, r3, #6
 8002c26:	2200      	movs	r2, #0
 8002c28:	613b      	str	r3, [r7, #16]
 8002c2a:	617a      	str	r2, [r7, #20]
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002c32:	f04f 0b00 	mov.w	fp, #0
 8002c36:	4652      	mov	r2, sl
 8002c38:	465b      	mov	r3, fp
 8002c3a:	f04f 0000 	mov.w	r0, #0
 8002c3e:	f04f 0100 	mov.w	r1, #0
 8002c42:	0159      	lsls	r1, r3, #5
 8002c44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c48:	0150      	lsls	r0, r2, #5
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	460b      	mov	r3, r1
 8002c4e:	ebb2 080a 	subs.w	r8, r2, sl
 8002c52:	eb63 090b 	sbc.w	r9, r3, fp
 8002c56:	f04f 0200 	mov.w	r2, #0
 8002c5a:	f04f 0300 	mov.w	r3, #0
 8002c5e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002c62:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002c66:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002c6a:	ebb2 0408 	subs.w	r4, r2, r8
 8002c6e:	eb63 0509 	sbc.w	r5, r3, r9
 8002c72:	f04f 0200 	mov.w	r2, #0
 8002c76:	f04f 0300 	mov.w	r3, #0
 8002c7a:	00eb      	lsls	r3, r5, #3
 8002c7c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c80:	00e2      	lsls	r2, r4, #3
 8002c82:	4614      	mov	r4, r2
 8002c84:	461d      	mov	r5, r3
 8002c86:	eb14 030a 	adds.w	r3, r4, sl
 8002c8a:	603b      	str	r3, [r7, #0]
 8002c8c:	eb45 030b 	adc.w	r3, r5, fp
 8002c90:	607b      	str	r3, [r7, #4]
 8002c92:	f04f 0200 	mov.w	r2, #0
 8002c96:	f04f 0300 	mov.w	r3, #0
 8002c9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c9e:	4629      	mov	r1, r5
 8002ca0:	028b      	lsls	r3, r1, #10
 8002ca2:	4621      	mov	r1, r4
 8002ca4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ca8:	4621      	mov	r1, r4
 8002caa:	028a      	lsls	r2, r1, #10
 8002cac:	4610      	mov	r0, r2
 8002cae:	4619      	mov	r1, r3
 8002cb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	60bb      	str	r3, [r7, #8]
 8002cb6:	60fa      	str	r2, [r7, #12]
 8002cb8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002cbc:	f7fd fa8a 	bl	80001d4 <__aeabi_uldivmod>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	460b      	mov	r3, r1
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002cc8:	4b0b      	ldr	r3, [pc, #44]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	0c1b      	lsrs	r3, r3, #16
 8002cce:	f003 0303 	and.w	r3, r3, #3
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	005b      	lsls	r3, r3, #1
 8002cd6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002cd8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ce0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002ce2:	e002      	b.n	8002cea <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ce4:	4b05      	ldr	r3, [pc, #20]	; (8002cfc <HAL_RCC_GetSysClockFreq+0x184>)
 8002ce6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002ce8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3740      	adds	r7, #64	; 0x40
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cf6:	bf00      	nop
 8002cf8:	40023800 	.word	0x40023800
 8002cfc:	00f42400 	.word	0x00f42400
 8002d00:	017d7840 	.word	0x017d7840

08002d04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d08:	4b03      	ldr	r3, [pc, #12]	; (8002d18 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
 8002d16:	bf00      	nop
 8002d18:	20000034 	.word	0x20000034

08002d1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d20:	f7ff fff0 	bl	8002d04 <HAL_RCC_GetHCLKFreq>
 8002d24:	4602      	mov	r2, r0
 8002d26:	4b05      	ldr	r3, [pc, #20]	; (8002d3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	0a9b      	lsrs	r3, r3, #10
 8002d2c:	f003 0307 	and.w	r3, r3, #7
 8002d30:	4903      	ldr	r1, [pc, #12]	; (8002d40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d32:	5ccb      	ldrb	r3, [r1, r3]
 8002d34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	40023800 	.word	0x40023800
 8002d40:	080064cc 	.word	0x080064cc

08002d44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002d48:	f7ff ffdc 	bl	8002d04 <HAL_RCC_GetHCLKFreq>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	4b05      	ldr	r3, [pc, #20]	; (8002d64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	0b5b      	lsrs	r3, r3, #13
 8002d54:	f003 0307 	and.w	r3, r3, #7
 8002d58:	4903      	ldr	r1, [pc, #12]	; (8002d68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d5a:	5ccb      	ldrb	r3, [r1, r3]
 8002d5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	40023800 	.word	0x40023800
 8002d68:	080064cc 	.word	0x080064cc

08002d6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d101      	bne.n	8002d7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e07b      	b.n	8002e76 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d108      	bne.n	8002d98 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d8e:	d009      	beq.n	8002da4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	61da      	str	r2, [r3, #28]
 8002d96:	e005      	b.n	8002da4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d106      	bne.n	8002dc4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f7fe faa6 	bl	8001310 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2202      	movs	r2, #2
 8002dc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dda:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002dec:	431a      	orrs	r2, r3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002df6:	431a      	orrs	r2, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	691b      	ldr	r3, [r3, #16]
 8002dfc:	f003 0302 	and.w	r3, r3, #2
 8002e00:	431a      	orrs	r2, r3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	f003 0301 	and.w	r3, r3, #1
 8002e0a:	431a      	orrs	r2, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	699b      	ldr	r3, [r3, #24]
 8002e10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e14:	431a      	orrs	r2, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	69db      	ldr	r3, [r3, #28]
 8002e1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e1e:	431a      	orrs	r2, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6a1b      	ldr	r3, [r3, #32]
 8002e24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e28:	ea42 0103 	orr.w	r1, r2, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e30:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	430a      	orrs	r2, r1
 8002e3a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	699b      	ldr	r3, [r3, #24]
 8002e40:	0c1b      	lsrs	r3, r3, #16
 8002e42:	f003 0104 	and.w	r1, r3, #4
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4a:	f003 0210 	and.w	r2, r3, #16
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	430a      	orrs	r2, r1
 8002e54:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	69da      	ldr	r2, [r3, #28]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e64:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3708      	adds	r7, #8
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	b088      	sub	sp, #32
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	60f8      	str	r0, [r7, #12]
 8002e86:	60b9      	str	r1, [r7, #8]
 8002e88:	603b      	str	r3, [r7, #0]
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d101      	bne.n	8002ea0 <HAL_SPI_Transmit+0x22>
 8002e9c:	2302      	movs	r3, #2
 8002e9e:	e12d      	b.n	80030fc <HAL_SPI_Transmit+0x27e>
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ea8:	f7fe fbd0 	bl	800164c <HAL_GetTick>
 8002eac:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002eae:	88fb      	ldrh	r3, [r7, #6]
 8002eb0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d002      	beq.n	8002ec4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002ebe:	2302      	movs	r3, #2
 8002ec0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ec2:	e116      	b.n	80030f2 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d002      	beq.n	8002ed0 <HAL_SPI_Transmit+0x52>
 8002eca:	88fb      	ldrh	r3, [r7, #6]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d102      	bne.n	8002ed6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ed4:	e10d      	b.n	80030f2 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2203      	movs	r2, #3
 8002eda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	68ba      	ldr	r2, [r7, #8]
 8002ee8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	88fa      	ldrh	r2, [r7, #6]
 8002eee:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	88fa      	ldrh	r2, [r7, #6]
 8002ef4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2200      	movs	r2, #0
 8002f00:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2200      	movs	r2, #0
 8002f06:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2200      	movs	r2, #0
 8002f12:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f1c:	d10f      	bne.n	8002f3e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f2c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f3c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f48:	2b40      	cmp	r3, #64	; 0x40
 8002f4a:	d007      	beq.n	8002f5c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f5a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f64:	d14f      	bne.n	8003006 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d002      	beq.n	8002f74 <HAL_SPI_Transmit+0xf6>
 8002f6e:	8afb      	ldrh	r3, [r7, #22]
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d142      	bne.n	8002ffa <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f78:	881a      	ldrh	r2, [r3, #0]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f84:	1c9a      	adds	r2, r3, #2
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	3b01      	subs	r3, #1
 8002f92:	b29a      	uxth	r2, r3
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002f98:	e02f      	b.n	8002ffa <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f003 0302 	and.w	r3, r3, #2
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d112      	bne.n	8002fce <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fac:	881a      	ldrh	r2, [r3, #0]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb8:	1c9a      	adds	r2, r3, #2
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	3b01      	subs	r3, #1
 8002fc6:	b29a      	uxth	r2, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	86da      	strh	r2, [r3, #54]	; 0x36
 8002fcc:	e015      	b.n	8002ffa <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fce:	f7fe fb3d 	bl	800164c <HAL_GetTick>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	683a      	ldr	r2, [r7, #0]
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d803      	bhi.n	8002fe6 <HAL_SPI_Transmit+0x168>
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe4:	d102      	bne.n	8002fec <HAL_SPI_Transmit+0x16e>
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d106      	bne.n	8002ffa <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002fec:	2303      	movs	r3, #3
 8002fee:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002ff8:	e07b      	b.n	80030f2 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	2b00      	cmp	r3, #0
 8003002:	d1ca      	bne.n	8002f9a <HAL_SPI_Transmit+0x11c>
 8003004:	e050      	b.n	80030a8 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d002      	beq.n	8003014 <HAL_SPI_Transmit+0x196>
 800300e:	8afb      	ldrh	r3, [r7, #22]
 8003010:	2b01      	cmp	r3, #1
 8003012:	d144      	bne.n	800309e <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	330c      	adds	r3, #12
 800301e:	7812      	ldrb	r2, [r2, #0]
 8003020:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003026:	1c5a      	adds	r2, r3, #1
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003030:	b29b      	uxth	r3, r3
 8003032:	3b01      	subs	r3, #1
 8003034:	b29a      	uxth	r2, r3
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800303a:	e030      	b.n	800309e <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	f003 0302 	and.w	r3, r3, #2
 8003046:	2b02      	cmp	r3, #2
 8003048:	d113      	bne.n	8003072 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	330c      	adds	r3, #12
 8003054:	7812      	ldrb	r2, [r2, #0]
 8003056:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305c:	1c5a      	adds	r2, r3, #1
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003066:	b29b      	uxth	r3, r3
 8003068:	3b01      	subs	r3, #1
 800306a:	b29a      	uxth	r2, r3
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003070:	e015      	b.n	800309e <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003072:	f7fe faeb 	bl	800164c <HAL_GetTick>
 8003076:	4602      	mov	r2, r0
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	683a      	ldr	r2, [r7, #0]
 800307e:	429a      	cmp	r2, r3
 8003080:	d803      	bhi.n	800308a <HAL_SPI_Transmit+0x20c>
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003088:	d102      	bne.n	8003090 <HAL_SPI_Transmit+0x212>
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d106      	bne.n	800309e <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800309c:	e029      	b.n	80030f2 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d1c9      	bne.n	800303c <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80030a8:	69ba      	ldr	r2, [r7, #24]
 80030aa:	6839      	ldr	r1, [r7, #0]
 80030ac:	68f8      	ldr	r0, [r7, #12]
 80030ae:	f000 f8b1 	bl	8003214 <SPI_EndRxTxTransaction>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d002      	beq.n	80030be <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2220      	movs	r2, #32
 80030bc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d10a      	bne.n	80030dc <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80030c6:	2300      	movs	r3, #0
 80030c8:	613b      	str	r3, [r7, #16]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	613b      	str	r3, [r7, #16]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	613b      	str	r3, [r7, #16]
 80030da:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d002      	beq.n	80030ea <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	77fb      	strb	r3, [r7, #31]
 80030e8:	e003      	b.n	80030f2 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2201      	movs	r2, #1
 80030ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80030fa:	7ffb      	ldrb	r3, [r7, #31]
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3720      	adds	r7, #32
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}

08003104 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b088      	sub	sp, #32
 8003108:	af00      	add	r7, sp, #0
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	60b9      	str	r1, [r7, #8]
 800310e:	603b      	str	r3, [r7, #0]
 8003110:	4613      	mov	r3, r2
 8003112:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003114:	f7fe fa9a 	bl	800164c <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800311c:	1a9b      	subs	r3, r3, r2
 800311e:	683a      	ldr	r2, [r7, #0]
 8003120:	4413      	add	r3, r2
 8003122:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003124:	f7fe fa92 	bl	800164c <HAL_GetTick>
 8003128:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800312a:	4b39      	ldr	r3, [pc, #228]	; (8003210 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	015b      	lsls	r3, r3, #5
 8003130:	0d1b      	lsrs	r3, r3, #20
 8003132:	69fa      	ldr	r2, [r7, #28]
 8003134:	fb02 f303 	mul.w	r3, r2, r3
 8003138:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800313a:	e054      	b.n	80031e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003142:	d050      	beq.n	80031e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003144:	f7fe fa82 	bl	800164c <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	69fa      	ldr	r2, [r7, #28]
 8003150:	429a      	cmp	r2, r3
 8003152:	d902      	bls.n	800315a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d13d      	bne.n	80031d6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	685a      	ldr	r2, [r3, #4]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003168:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003172:	d111      	bne.n	8003198 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800317c:	d004      	beq.n	8003188 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003186:	d107      	bne.n	8003198 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003196:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800319c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031a0:	d10f      	bne.n	80031c2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031b0:	601a      	str	r2, [r3, #0]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2201      	movs	r2, #1
 80031c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	e017      	b.n	8003206 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d101      	bne.n	80031e0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80031dc:	2300      	movs	r3, #0
 80031de:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	3b01      	subs	r3, #1
 80031e4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	689a      	ldr	r2, [r3, #8]
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	4013      	ands	r3, r2
 80031f0:	68ba      	ldr	r2, [r7, #8]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	bf0c      	ite	eq
 80031f6:	2301      	moveq	r3, #1
 80031f8:	2300      	movne	r3, #0
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	461a      	mov	r2, r3
 80031fe:	79fb      	ldrb	r3, [r7, #7]
 8003200:	429a      	cmp	r2, r3
 8003202:	d19b      	bne.n	800313c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	3720      	adds	r7, #32
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	20000034 	.word	0x20000034

08003214 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b088      	sub	sp, #32
 8003218:	af02      	add	r7, sp, #8
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	60b9      	str	r1, [r7, #8]
 800321e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	9300      	str	r3, [sp, #0]
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	2201      	movs	r2, #1
 8003228:	2102      	movs	r1, #2
 800322a:	68f8      	ldr	r0, [r7, #12]
 800322c:	f7ff ff6a 	bl	8003104 <SPI_WaitFlagStateUntilTimeout>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d007      	beq.n	8003246 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800323a:	f043 0220 	orr.w	r2, r3, #32
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e032      	b.n	80032ac <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003246:	4b1b      	ldr	r3, [pc, #108]	; (80032b4 <SPI_EndRxTxTransaction+0xa0>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a1b      	ldr	r2, [pc, #108]	; (80032b8 <SPI_EndRxTxTransaction+0xa4>)
 800324c:	fba2 2303 	umull	r2, r3, r2, r3
 8003250:	0d5b      	lsrs	r3, r3, #21
 8003252:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003256:	fb02 f303 	mul.w	r3, r2, r3
 800325a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003264:	d112      	bne.n	800328c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	9300      	str	r3, [sp, #0]
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	2200      	movs	r2, #0
 800326e:	2180      	movs	r1, #128	; 0x80
 8003270:	68f8      	ldr	r0, [r7, #12]
 8003272:	f7ff ff47 	bl	8003104 <SPI_WaitFlagStateUntilTimeout>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d016      	beq.n	80032aa <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003280:	f043 0220 	orr.w	r2, r3, #32
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	e00f      	b.n	80032ac <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d00a      	beq.n	80032a8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	3b01      	subs	r3, #1
 8003296:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032a2:	2b80      	cmp	r3, #128	; 0x80
 80032a4:	d0f2      	beq.n	800328c <SPI_EndRxTxTransaction+0x78>
 80032a6:	e000      	b.n	80032aa <SPI_EndRxTxTransaction+0x96>
        break;
 80032a8:	bf00      	nop
  }

  return HAL_OK;
 80032aa:	2300      	movs	r3, #0
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3718      	adds	r7, #24
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	20000034 	.word	0x20000034
 80032b8:	165e9f81 	.word	0x165e9f81

080032bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d101      	bne.n	80032ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e042      	b.n	8003354 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d106      	bne.n	80032e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f7fe f85c 	bl	80013a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2224      	movs	r2, #36	; 0x24
 80032ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	68da      	ldr	r2, [r3, #12]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f000 fe55 	bl	8003fb0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	691a      	ldr	r2, [r3, #16]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003314:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	695a      	ldr	r2, [r3, #20]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003324:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	68da      	ldr	r2, [r3, #12]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003334:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2220      	movs	r2, #32
 8003340:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2220      	movs	r2, #32
 8003348:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003352:	2300      	movs	r3, #0
}
 8003354:	4618      	mov	r0, r3
 8003356:	3708      	adds	r7, #8
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}

0800335c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b08a      	sub	sp, #40	; 0x28
 8003360:	af02      	add	r7, sp, #8
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	60b9      	str	r1, [r7, #8]
 8003366:	603b      	str	r3, [r7, #0]
 8003368:	4613      	mov	r3, r2
 800336a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800336c:	2300      	movs	r3, #0
 800336e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003376:	b2db      	uxtb	r3, r3
 8003378:	2b20      	cmp	r3, #32
 800337a:	d175      	bne.n	8003468 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d002      	beq.n	8003388 <HAL_UART_Transmit+0x2c>
 8003382:	88fb      	ldrh	r3, [r7, #6]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d101      	bne.n	800338c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	e06e      	b.n	800346a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2200      	movs	r2, #0
 8003390:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2221      	movs	r2, #33	; 0x21
 8003396:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800339a:	f7fe f957 	bl	800164c <HAL_GetTick>
 800339e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	88fa      	ldrh	r2, [r7, #6]
 80033a4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	88fa      	ldrh	r2, [r7, #6]
 80033aa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033b4:	d108      	bne.n	80033c8 <HAL_UART_Transmit+0x6c>
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d104      	bne.n	80033c8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80033be:	2300      	movs	r3, #0
 80033c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	61bb      	str	r3, [r7, #24]
 80033c6:	e003      	b.n	80033d0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033cc:	2300      	movs	r3, #0
 80033ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80033d0:	e02e      	b.n	8003430 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	9300      	str	r3, [sp, #0]
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	2200      	movs	r2, #0
 80033da:	2180      	movs	r1, #128	; 0x80
 80033dc:	68f8      	ldr	r0, [r7, #12]
 80033de:	f000 fbb7 	bl	8003b50 <UART_WaitOnFlagUntilTimeout>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d005      	beq.n	80033f4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2220      	movs	r2, #32
 80033ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	e03a      	b.n	800346a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d10b      	bne.n	8003412 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	881b      	ldrh	r3, [r3, #0]
 80033fe:	461a      	mov	r2, r3
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003408:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	3302      	adds	r3, #2
 800340e:	61bb      	str	r3, [r7, #24]
 8003410:	e007      	b.n	8003422 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	781a      	ldrb	r2, [r3, #0]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	3301      	adds	r3, #1
 8003420:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003426:	b29b      	uxth	r3, r3
 8003428:	3b01      	subs	r3, #1
 800342a:	b29a      	uxth	r2, r3
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003434:	b29b      	uxth	r3, r3
 8003436:	2b00      	cmp	r3, #0
 8003438:	d1cb      	bne.n	80033d2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	9300      	str	r3, [sp, #0]
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	2200      	movs	r2, #0
 8003442:	2140      	movs	r1, #64	; 0x40
 8003444:	68f8      	ldr	r0, [r7, #12]
 8003446:	f000 fb83 	bl	8003b50 <UART_WaitOnFlagUntilTimeout>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d005      	beq.n	800345c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2220      	movs	r2, #32
 8003454:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8003458:	2303      	movs	r3, #3
 800345a:	e006      	b.n	800346a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2220      	movs	r2, #32
 8003460:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003464:	2300      	movs	r3, #0
 8003466:	e000      	b.n	800346a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003468:	2302      	movs	r3, #2
  }
}
 800346a:	4618      	mov	r0, r3
 800346c:	3720      	adds	r7, #32
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}

08003472 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003472:	b580      	push	{r7, lr}
 8003474:	b08a      	sub	sp, #40	; 0x28
 8003476:	af02      	add	r7, sp, #8
 8003478:	60f8      	str	r0, [r7, #12]
 800347a:	60b9      	str	r1, [r7, #8]
 800347c:	603b      	str	r3, [r7, #0]
 800347e:	4613      	mov	r3, r2
 8003480:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003482:	2300      	movs	r3, #0
 8003484:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b20      	cmp	r3, #32
 8003490:	f040 8081 	bne.w	8003596 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d002      	beq.n	80034a0 <HAL_UART_Receive+0x2e>
 800349a:	88fb      	ldrh	r3, [r7, #6]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d101      	bne.n	80034a4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e079      	b.n	8003598 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2200      	movs	r2, #0
 80034a8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2222      	movs	r2, #34	; 0x22
 80034ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2200      	movs	r2, #0
 80034b6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034b8:	f7fe f8c8 	bl	800164c <HAL_GetTick>
 80034bc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	88fa      	ldrh	r2, [r7, #6]
 80034c2:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	88fa      	ldrh	r2, [r7, #6]
 80034c8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034d2:	d108      	bne.n	80034e6 <HAL_UART_Receive+0x74>
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	691b      	ldr	r3, [r3, #16]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d104      	bne.n	80034e6 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80034dc:	2300      	movs	r3, #0
 80034de:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	61bb      	str	r3, [r7, #24]
 80034e4:	e003      	b.n	80034ee <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034ea:	2300      	movs	r3, #0
 80034ec:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80034ee:	e047      	b.n	8003580 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	9300      	str	r3, [sp, #0]
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	2200      	movs	r2, #0
 80034f8:	2120      	movs	r1, #32
 80034fa:	68f8      	ldr	r0, [r7, #12]
 80034fc:	f000 fb28 	bl	8003b50 <UART_WaitOnFlagUntilTimeout>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d005      	beq.n	8003512 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2220      	movs	r2, #32
 800350a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e042      	b.n	8003598 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d10c      	bne.n	8003532 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	b29b      	uxth	r3, r3
 8003520:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003524:	b29a      	uxth	r2, r3
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800352a:	69bb      	ldr	r3, [r7, #24]
 800352c:	3302      	adds	r3, #2
 800352e:	61bb      	str	r3, [r7, #24]
 8003530:	e01f      	b.n	8003572 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800353a:	d007      	beq.n	800354c <HAL_UART_Receive+0xda>
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d10a      	bne.n	800355a <HAL_UART_Receive+0xe8>
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	691b      	ldr	r3, [r3, #16]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d106      	bne.n	800355a <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	b2da      	uxtb	r2, r3
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	701a      	strb	r2, [r3, #0]
 8003558:	e008      	b.n	800356c <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	b2db      	uxtb	r3, r3
 8003562:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003566:	b2da      	uxtb	r2, r3
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	3301      	adds	r3, #1
 8003570:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003576:	b29b      	uxth	r3, r3
 8003578:	3b01      	subs	r3, #1
 800357a:	b29a      	uxth	r2, r3
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003584:	b29b      	uxth	r3, r3
 8003586:	2b00      	cmp	r3, #0
 8003588:	d1b2      	bne.n	80034f0 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2220      	movs	r2, #32
 800358e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8003592:	2300      	movs	r3, #0
 8003594:	e000      	b.n	8003598 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003596:	2302      	movs	r3, #2
  }
}
 8003598:	4618      	mov	r0, r3
 800359a:	3720      	adds	r7, #32
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}

080035a0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	60b9      	str	r1, [r7, #8]
 80035aa:	4613      	mov	r3, r2
 80035ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	2b20      	cmp	r3, #32
 80035b8:	d112      	bne.n	80035e0 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d002      	beq.n	80035c6 <HAL_UART_Receive_IT+0x26>
 80035c0:	88fb      	ldrh	r3, [r7, #6]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d101      	bne.n	80035ca <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e00b      	b.n	80035e2 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2200      	movs	r2, #0
 80035ce:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80035d0:	88fb      	ldrh	r3, [r7, #6]
 80035d2:	461a      	mov	r2, r3
 80035d4:	68b9      	ldr	r1, [r7, #8]
 80035d6:	68f8      	ldr	r0, [r7, #12]
 80035d8:	f000 fb13 	bl	8003c02 <UART_Start_Receive_IT>
 80035dc:	4603      	mov	r3, r0
 80035de:	e000      	b.n	80035e2 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80035e0:	2302      	movs	r3, #2
  }
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3710      	adds	r7, #16
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
	...

080035ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b0ba      	sub	sp, #232	; 0xe8
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	695b      	ldr	r3, [r3, #20]
 800360e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003612:	2300      	movs	r3, #0
 8003614:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003618:	2300      	movs	r3, #0
 800361a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800361e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003622:	f003 030f 	and.w	r3, r3, #15
 8003626:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800362a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800362e:	2b00      	cmp	r3, #0
 8003630:	d10f      	bne.n	8003652 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003632:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003636:	f003 0320 	and.w	r3, r3, #32
 800363a:	2b00      	cmp	r3, #0
 800363c:	d009      	beq.n	8003652 <HAL_UART_IRQHandler+0x66>
 800363e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003642:	f003 0320 	and.w	r3, r3, #32
 8003646:	2b00      	cmp	r3, #0
 8003648:	d003      	beq.n	8003652 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f000 fbf2 	bl	8003e34 <UART_Receive_IT>
      return;
 8003650:	e25b      	b.n	8003b0a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003652:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003656:	2b00      	cmp	r3, #0
 8003658:	f000 80de 	beq.w	8003818 <HAL_UART_IRQHandler+0x22c>
 800365c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003660:	f003 0301 	and.w	r3, r3, #1
 8003664:	2b00      	cmp	r3, #0
 8003666:	d106      	bne.n	8003676 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003668:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800366c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003670:	2b00      	cmp	r3, #0
 8003672:	f000 80d1 	beq.w	8003818 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003676:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800367a:	f003 0301 	and.w	r3, r3, #1
 800367e:	2b00      	cmp	r3, #0
 8003680:	d00b      	beq.n	800369a <HAL_UART_IRQHandler+0xae>
 8003682:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800368a:	2b00      	cmp	r3, #0
 800368c:	d005      	beq.n	800369a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003692:	f043 0201 	orr.w	r2, r3, #1
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800369a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800369e:	f003 0304 	and.w	r3, r3, #4
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00b      	beq.n	80036be <HAL_UART_IRQHandler+0xd2>
 80036a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036aa:	f003 0301 	and.w	r3, r3, #1
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d005      	beq.n	80036be <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b6:	f043 0202 	orr.w	r2, r3, #2
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036c2:	f003 0302 	and.w	r3, r3, #2
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00b      	beq.n	80036e2 <HAL_UART_IRQHandler+0xf6>
 80036ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036ce:	f003 0301 	and.w	r3, r3, #1
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d005      	beq.n	80036e2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036da:	f043 0204 	orr.w	r2, r3, #4
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80036e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036e6:	f003 0308 	and.w	r3, r3, #8
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d011      	beq.n	8003712 <HAL_UART_IRQHandler+0x126>
 80036ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036f2:	f003 0320 	and.w	r3, r3, #32
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d105      	bne.n	8003706 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80036fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036fe:	f003 0301 	and.w	r3, r3, #1
 8003702:	2b00      	cmp	r3, #0
 8003704:	d005      	beq.n	8003712 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800370a:	f043 0208 	orr.w	r2, r3, #8
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003716:	2b00      	cmp	r3, #0
 8003718:	f000 81f2 	beq.w	8003b00 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800371c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003720:	f003 0320 	and.w	r3, r3, #32
 8003724:	2b00      	cmp	r3, #0
 8003726:	d008      	beq.n	800373a <HAL_UART_IRQHandler+0x14e>
 8003728:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800372c:	f003 0320 	and.w	r3, r3, #32
 8003730:	2b00      	cmp	r3, #0
 8003732:	d002      	beq.n	800373a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f000 fb7d 	bl	8003e34 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	695b      	ldr	r3, [r3, #20]
 8003740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003744:	2b40      	cmp	r3, #64	; 0x40
 8003746:	bf0c      	ite	eq
 8003748:	2301      	moveq	r3, #1
 800374a:	2300      	movne	r3, #0
 800374c:	b2db      	uxtb	r3, r3
 800374e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003756:	f003 0308 	and.w	r3, r3, #8
 800375a:	2b00      	cmp	r3, #0
 800375c:	d103      	bne.n	8003766 <HAL_UART_IRQHandler+0x17a>
 800375e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003762:	2b00      	cmp	r3, #0
 8003764:	d04f      	beq.n	8003806 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f000 fa85 	bl	8003c76 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	695b      	ldr	r3, [r3, #20]
 8003772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003776:	2b40      	cmp	r3, #64	; 0x40
 8003778:	d141      	bne.n	80037fe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	3314      	adds	r3, #20
 8003780:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003784:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003788:	e853 3f00 	ldrex	r3, [r3]
 800378c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003790:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003794:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003798:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	3314      	adds	r3, #20
 80037a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80037a6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80037aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80037b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80037b6:	e841 2300 	strex	r3, r2, [r1]
 80037ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80037be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d1d9      	bne.n	800377a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d013      	beq.n	80037f6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037d2:	4a7e      	ldr	r2, [pc, #504]	; (80039cc <HAL_UART_IRQHandler+0x3e0>)
 80037d4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037da:	4618      	mov	r0, r3
 80037dc:	f7fe fc95 	bl	800210a <HAL_DMA_Abort_IT>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d016      	beq.n	8003814 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80037f0:	4610      	mov	r0, r2
 80037f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037f4:	e00e      	b.n	8003814 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 f994 	bl	8003b24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037fc:	e00a      	b.n	8003814 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 f990 	bl	8003b24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003804:	e006      	b.n	8003814 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 f98c 	bl	8003b24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003812:	e175      	b.n	8003b00 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003814:	bf00      	nop
    return;
 8003816:	e173      	b.n	8003b00 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381c:	2b01      	cmp	r3, #1
 800381e:	f040 814f 	bne.w	8003ac0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003822:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003826:	f003 0310 	and.w	r3, r3, #16
 800382a:	2b00      	cmp	r3, #0
 800382c:	f000 8148 	beq.w	8003ac0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003830:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003834:	f003 0310 	and.w	r3, r3, #16
 8003838:	2b00      	cmp	r3, #0
 800383a:	f000 8141 	beq.w	8003ac0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800383e:	2300      	movs	r3, #0
 8003840:	60bb      	str	r3, [r7, #8]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	60bb      	str	r3, [r7, #8]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	60bb      	str	r3, [r7, #8]
 8003852:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	695b      	ldr	r3, [r3, #20]
 800385a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800385e:	2b40      	cmp	r3, #64	; 0x40
 8003860:	f040 80b6 	bne.w	80039d0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003870:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003874:	2b00      	cmp	r3, #0
 8003876:	f000 8145 	beq.w	8003b04 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800387e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003882:	429a      	cmp	r2, r3
 8003884:	f080 813e 	bcs.w	8003b04 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800388e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003894:	69db      	ldr	r3, [r3, #28]
 8003896:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800389a:	f000 8088 	beq.w	80039ae <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	330c      	adds	r3, #12
 80038a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80038ac:	e853 3f00 	ldrex	r3, [r3]
 80038b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80038b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80038b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	330c      	adds	r3, #12
 80038c6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80038ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80038ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80038d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80038da:	e841 2300 	strex	r3, r2, [r1]
 80038de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80038e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d1d9      	bne.n	800389e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	3314      	adds	r3, #20
 80038f0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038f4:	e853 3f00 	ldrex	r3, [r3]
 80038f8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80038fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80038fc:	f023 0301 	bic.w	r3, r3, #1
 8003900:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	3314      	adds	r3, #20
 800390a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800390e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003912:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003914:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003916:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800391a:	e841 2300 	strex	r3, r2, [r1]
 800391e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003920:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003922:	2b00      	cmp	r3, #0
 8003924:	d1e1      	bne.n	80038ea <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	3314      	adds	r3, #20
 800392c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800392e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003930:	e853 3f00 	ldrex	r3, [r3]
 8003934:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003936:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003938:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800393c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	3314      	adds	r3, #20
 8003946:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800394a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800394c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800394e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003950:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003952:	e841 2300 	strex	r3, r2, [r1]
 8003956:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003958:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800395a:	2b00      	cmp	r3, #0
 800395c:	d1e3      	bne.n	8003926 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2220      	movs	r2, #32
 8003962:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	330c      	adds	r3, #12
 8003972:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003974:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003976:	e853 3f00 	ldrex	r3, [r3]
 800397a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800397c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800397e:	f023 0310 	bic.w	r3, r3, #16
 8003982:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	330c      	adds	r3, #12
 800398c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003990:	65ba      	str	r2, [r7, #88]	; 0x58
 8003992:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003994:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003996:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003998:	e841 2300 	strex	r3, r2, [r1]
 800399c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800399e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d1e3      	bne.n	800396c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039a8:	4618      	mov	r0, r3
 80039aa:	f7fe fb3e 	bl	800202a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2202      	movs	r2, #2
 80039b2:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80039bc:	b29b      	uxth	r3, r3
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	4619      	mov	r1, r3
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f000 f8b7 	bl	8003b38 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80039ca:	e09b      	b.n	8003b04 <HAL_UART_IRQHandler+0x518>
 80039cc:	08003d3d 	.word	0x08003d3d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80039d8:	b29b      	uxth	r3, r3
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	f000 808e 	beq.w	8003b08 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80039ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	f000 8089 	beq.w	8003b08 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	330c      	adds	r3, #12
 80039fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a00:	e853 3f00 	ldrex	r3, [r3]
 8003a04:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003a06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a08:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a0c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	330c      	adds	r3, #12
 8003a16:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003a1a:	647a      	str	r2, [r7, #68]	; 0x44
 8003a1c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a1e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003a20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a22:	e841 2300 	strex	r3, r2, [r1]
 8003a26:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003a28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d1e3      	bne.n	80039f6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	3314      	adds	r3, #20
 8003a34:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a38:	e853 3f00 	ldrex	r3, [r3]
 8003a3c:	623b      	str	r3, [r7, #32]
   return(result);
 8003a3e:	6a3b      	ldr	r3, [r7, #32]
 8003a40:	f023 0301 	bic.w	r3, r3, #1
 8003a44:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	3314      	adds	r3, #20
 8003a4e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003a52:	633a      	str	r2, [r7, #48]	; 0x30
 8003a54:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a5a:	e841 2300 	strex	r3, r2, [r1]
 8003a5e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d1e3      	bne.n	8003a2e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2220      	movs	r2, #32
 8003a6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	330c      	adds	r3, #12
 8003a7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	e853 3f00 	ldrex	r3, [r3]
 8003a82:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f023 0310 	bic.w	r3, r3, #16
 8003a8a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	330c      	adds	r3, #12
 8003a94:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003a98:	61fa      	str	r2, [r7, #28]
 8003a9a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a9c:	69b9      	ldr	r1, [r7, #24]
 8003a9e:	69fa      	ldr	r2, [r7, #28]
 8003aa0:	e841 2300 	strex	r3, r2, [r1]
 8003aa4:	617b      	str	r3, [r7, #20]
   return(result);
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d1e3      	bne.n	8003a74 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2202      	movs	r2, #2
 8003ab0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ab2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f000 f83d 	bl	8003b38 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003abe:	e023      	b.n	8003b08 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003ac0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ac4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d009      	beq.n	8003ae0 <HAL_UART_IRQHandler+0x4f4>
 8003acc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d003      	beq.n	8003ae0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f000 f943 	bl	8003d64 <UART_Transmit_IT>
    return;
 8003ade:	e014      	b.n	8003b0a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003ae0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d00e      	beq.n	8003b0a <HAL_UART_IRQHandler+0x51e>
 8003aec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d008      	beq.n	8003b0a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f000 f983 	bl	8003e04 <UART_EndTransmit_IT>
    return;
 8003afe:	e004      	b.n	8003b0a <HAL_UART_IRQHandler+0x51e>
    return;
 8003b00:	bf00      	nop
 8003b02:	e002      	b.n	8003b0a <HAL_UART_IRQHandler+0x51e>
      return;
 8003b04:	bf00      	nop
 8003b06:	e000      	b.n	8003b0a <HAL_UART_IRQHandler+0x51e>
      return;
 8003b08:	bf00      	nop
  }
}
 8003b0a:	37e8      	adds	r7, #232	; 0xe8
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003b18:	bf00      	nop
 8003b1a:	370c      	adds	r7, #12
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr

08003b24 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003b2c:	bf00      	nop
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	460b      	mov	r3, r1
 8003b42:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003b44:	bf00      	nop
 8003b46:	370c      	adds	r7, #12
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr

08003b50 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b086      	sub	sp, #24
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	60f8      	str	r0, [r7, #12]
 8003b58:	60b9      	str	r1, [r7, #8]
 8003b5a:	603b      	str	r3, [r7, #0]
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b60:	e03b      	b.n	8003bda <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b62:	6a3b      	ldr	r3, [r7, #32]
 8003b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b68:	d037      	beq.n	8003bda <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b6a:	f7fd fd6f 	bl	800164c <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	6a3a      	ldr	r2, [r7, #32]
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d302      	bcc.n	8003b80 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b7a:	6a3b      	ldr	r3, [r7, #32]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d101      	bne.n	8003b84 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003b80:	2303      	movs	r3, #3
 8003b82:	e03a      	b.n	8003bfa <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	f003 0304 	and.w	r3, r3, #4
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d023      	beq.n	8003bda <UART_WaitOnFlagUntilTimeout+0x8a>
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	2b80      	cmp	r3, #128	; 0x80
 8003b96:	d020      	beq.n	8003bda <UART_WaitOnFlagUntilTimeout+0x8a>
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	2b40      	cmp	r3, #64	; 0x40
 8003b9c:	d01d      	beq.n	8003bda <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0308 	and.w	r3, r3, #8
 8003ba8:	2b08      	cmp	r3, #8
 8003baa:	d116      	bne.n	8003bda <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003bac:	2300      	movs	r3, #0
 8003bae:	617b      	str	r3, [r7, #20]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	617b      	str	r3, [r7, #20]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	617b      	str	r3, [r7, #20]
 8003bc0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003bc2:	68f8      	ldr	r0, [r7, #12]
 8003bc4:	f000 f857 	bl	8003c76 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2208      	movs	r2, #8
 8003bcc:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e00f      	b.n	8003bfa <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	4013      	ands	r3, r2
 8003be4:	68ba      	ldr	r2, [r7, #8]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	bf0c      	ite	eq
 8003bea:	2301      	moveq	r3, #1
 8003bec:	2300      	movne	r3, #0
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	79fb      	ldrb	r3, [r7, #7]
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d0b4      	beq.n	8003b62 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3718      	adds	r7, #24
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}

08003c02 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c02:	b480      	push	{r7}
 8003c04:	b085      	sub	sp, #20
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	60f8      	str	r0, [r7, #12]
 8003c0a:	60b9      	str	r1, [r7, #8]
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	68ba      	ldr	r2, [r7, #8]
 8003c14:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	88fa      	ldrh	r2, [r7, #6]
 8003c1a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	88fa      	ldrh	r2, [r7, #6]
 8003c20:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2200      	movs	r2, #0
 8003c26:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2222      	movs	r2, #34	; 0x22
 8003c2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	691b      	ldr	r3, [r3, #16]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d007      	beq.n	8003c48 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	68da      	ldr	r2, [r3, #12]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c46:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	695a      	ldr	r2, [r3, #20]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f042 0201 	orr.w	r2, r2, #1
 8003c56:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	68da      	ldr	r2, [r3, #12]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f042 0220 	orr.w	r2, r2, #32
 8003c66:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3714      	adds	r7, #20
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr

08003c76 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c76:	b480      	push	{r7}
 8003c78:	b095      	sub	sp, #84	; 0x54
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	330c      	adds	r3, #12
 8003c84:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c88:	e853 3f00 	ldrex	r3, [r3]
 8003c8c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c90:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c94:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	330c      	adds	r3, #12
 8003c9c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c9e:	643a      	str	r2, [r7, #64]	; 0x40
 8003ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ca2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003ca4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003ca6:	e841 2300 	strex	r3, r2, [r1]
 8003caa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d1e5      	bne.n	8003c7e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	3314      	adds	r3, #20
 8003cb8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cba:	6a3b      	ldr	r3, [r7, #32]
 8003cbc:	e853 3f00 	ldrex	r3, [r3]
 8003cc0:	61fb      	str	r3, [r7, #28]
   return(result);
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	f023 0301 	bic.w	r3, r3, #1
 8003cc8:	64bb      	str	r3, [r7, #72]	; 0x48
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	3314      	adds	r3, #20
 8003cd0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003cd2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003cd4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003cd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cda:	e841 2300 	strex	r3, r2, [r1]
 8003cde:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d1e5      	bne.n	8003cb2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d119      	bne.n	8003d22 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	330c      	adds	r3, #12
 8003cf4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	e853 3f00 	ldrex	r3, [r3]
 8003cfc:	60bb      	str	r3, [r7, #8]
   return(result);
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	f023 0310 	bic.w	r3, r3, #16
 8003d04:	647b      	str	r3, [r7, #68]	; 0x44
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	330c      	adds	r3, #12
 8003d0c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d0e:	61ba      	str	r2, [r7, #24]
 8003d10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d12:	6979      	ldr	r1, [r7, #20]
 8003d14:	69ba      	ldr	r2, [r7, #24]
 8003d16:	e841 2300 	strex	r3, r2, [r1]
 8003d1a:	613b      	str	r3, [r7, #16]
   return(result);
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d1e5      	bne.n	8003cee <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2220      	movs	r2, #32
 8003d26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003d30:	bf00      	nop
 8003d32:	3754      	adds	r7, #84	; 0x54
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d48:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2200      	movs	r2, #0
 8003d54:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d56:	68f8      	ldr	r0, [r7, #12]
 8003d58:	f7ff fee4 	bl	8003b24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d5c:	bf00      	nop
 8003d5e:	3710      	adds	r7, #16
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b085      	sub	sp, #20
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	2b21      	cmp	r3, #33	; 0x21
 8003d76:	d13e      	bne.n	8003df6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d80:	d114      	bne.n	8003dac <UART_Transmit_IT+0x48>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	691b      	ldr	r3, [r3, #16]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d110      	bne.n	8003dac <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a1b      	ldr	r3, [r3, #32]
 8003d8e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	881b      	ldrh	r3, [r3, #0]
 8003d94:	461a      	mov	r2, r3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d9e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6a1b      	ldr	r3, [r3, #32]
 8003da4:	1c9a      	adds	r2, r3, #2
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	621a      	str	r2, [r3, #32]
 8003daa:	e008      	b.n	8003dbe <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6a1b      	ldr	r3, [r3, #32]
 8003db0:	1c59      	adds	r1, r3, #1
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	6211      	str	r1, [r2, #32]
 8003db6:	781a      	ldrb	r2, [r3, #0]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	3b01      	subs	r3, #1
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	4619      	mov	r1, r3
 8003dcc:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d10f      	bne.n	8003df2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	68da      	ldr	r2, [r3, #12]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003de0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	68da      	ldr	r2, [r3, #12]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003df0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003df2:	2300      	movs	r3, #0
 8003df4:	e000      	b.n	8003df8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003df6:	2302      	movs	r3, #2
  }
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3714      	adds	r7, #20
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr

08003e04 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b082      	sub	sp, #8
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	68da      	ldr	r2, [r3, #12]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e1a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2220      	movs	r2, #32
 8003e20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f7ff fe73 	bl	8003b10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003e2a:	2300      	movs	r3, #0
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3708      	adds	r7, #8
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b08c      	sub	sp, #48	; 0x30
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	2b22      	cmp	r3, #34	; 0x22
 8003e46:	f040 80ae 	bne.w	8003fa6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e52:	d117      	bne.n	8003e84 <UART_Receive_IT+0x50>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	691b      	ldr	r3, [r3, #16]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d113      	bne.n	8003e84 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e64:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e72:	b29a      	uxth	r2, r3
 8003e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e76:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e7c:	1c9a      	adds	r2, r3, #2
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	629a      	str	r2, [r3, #40]	; 0x28
 8003e82:	e026      	b.n	8003ed2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e88:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e96:	d007      	beq.n	8003ea8 <UART_Receive_IT+0x74>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d10a      	bne.n	8003eb6 <UART_Receive_IT+0x82>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	691b      	ldr	r3, [r3, #16]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d106      	bne.n	8003eb6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	b2da      	uxtb	r2, r3
 8003eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eb2:	701a      	strb	r2, [r3, #0]
 8003eb4:	e008      	b.n	8003ec8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ec2:	b2da      	uxtb	r2, r3
 8003ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ec6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ecc:	1c5a      	adds	r2, r3, #1
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	3b01      	subs	r3, #1
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	4619      	mov	r1, r3
 8003ee0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d15d      	bne.n	8003fa2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	68da      	ldr	r2, [r3, #12]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f022 0220 	bic.w	r2, r2, #32
 8003ef4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	68da      	ldr	r2, [r3, #12]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f04:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	695a      	ldr	r2, [r3, #20]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f022 0201 	bic.w	r2, r2, #1
 8003f14:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2220      	movs	r2, #32
 8003f1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d135      	bne.n	8003f98 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	330c      	adds	r3, #12
 8003f38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	e853 3f00 	ldrex	r3, [r3]
 8003f40:	613b      	str	r3, [r7, #16]
   return(result);
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	f023 0310 	bic.w	r3, r3, #16
 8003f48:	627b      	str	r3, [r7, #36]	; 0x24
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	330c      	adds	r3, #12
 8003f50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f52:	623a      	str	r2, [r7, #32]
 8003f54:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f56:	69f9      	ldr	r1, [r7, #28]
 8003f58:	6a3a      	ldr	r2, [r7, #32]
 8003f5a:	e841 2300 	strex	r3, r2, [r1]
 8003f5e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d1e5      	bne.n	8003f32 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0310 	and.w	r3, r3, #16
 8003f70:	2b10      	cmp	r3, #16
 8003f72:	d10a      	bne.n	8003f8a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f74:	2300      	movs	r3, #0
 8003f76:	60fb      	str	r3, [r7, #12]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	60fb      	str	r3, [r7, #12]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	60fb      	str	r3, [r7, #12]
 8003f88:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003f8e:	4619      	mov	r1, r3
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f7ff fdd1 	bl	8003b38 <HAL_UARTEx_RxEventCallback>
 8003f96:	e002      	b.n	8003f9e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f7fc fd2b 	bl	80009f4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	e002      	b.n	8003fa8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	e000      	b.n	8003fa8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003fa6:	2302      	movs	r3, #2
  }
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3730      	adds	r7, #48	; 0x30
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fb4:	b0c0      	sub	sp, #256	; 0x100
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	691b      	ldr	r3, [r3, #16]
 8003fc4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fcc:	68d9      	ldr	r1, [r3, #12]
 8003fce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	ea40 0301 	orr.w	r3, r0, r1
 8003fd8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003fda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fde:	689a      	ldr	r2, [r3, #8]
 8003fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	431a      	orrs	r2, r3
 8003fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fec:	695b      	ldr	r3, [r3, #20]
 8003fee:	431a      	orrs	r2, r3
 8003ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ff4:	69db      	ldr	r3, [r3, #28]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004008:	f021 010c 	bic.w	r1, r1, #12
 800400c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004016:	430b      	orrs	r3, r1
 8004018:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800401a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	695b      	ldr	r3, [r3, #20]
 8004022:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004026:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800402a:	6999      	ldr	r1, [r3, #24]
 800402c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	ea40 0301 	orr.w	r3, r0, r1
 8004036:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	4b8f      	ldr	r3, [pc, #572]	; (800427c <UART_SetConfig+0x2cc>)
 8004040:	429a      	cmp	r2, r3
 8004042:	d005      	beq.n	8004050 <UART_SetConfig+0xa0>
 8004044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	4b8d      	ldr	r3, [pc, #564]	; (8004280 <UART_SetConfig+0x2d0>)
 800404c:	429a      	cmp	r2, r3
 800404e:	d104      	bne.n	800405a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004050:	f7fe fe78 	bl	8002d44 <HAL_RCC_GetPCLK2Freq>
 8004054:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004058:	e003      	b.n	8004062 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800405a:	f7fe fe5f 	bl	8002d1c <HAL_RCC_GetPCLK1Freq>
 800405e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004066:	69db      	ldr	r3, [r3, #28]
 8004068:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800406c:	f040 810c 	bne.w	8004288 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004070:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004074:	2200      	movs	r2, #0
 8004076:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800407a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800407e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004082:	4622      	mov	r2, r4
 8004084:	462b      	mov	r3, r5
 8004086:	1891      	adds	r1, r2, r2
 8004088:	65b9      	str	r1, [r7, #88]	; 0x58
 800408a:	415b      	adcs	r3, r3
 800408c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800408e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004092:	4621      	mov	r1, r4
 8004094:	eb12 0801 	adds.w	r8, r2, r1
 8004098:	4629      	mov	r1, r5
 800409a:	eb43 0901 	adc.w	r9, r3, r1
 800409e:	f04f 0200 	mov.w	r2, #0
 80040a2:	f04f 0300 	mov.w	r3, #0
 80040a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040b2:	4690      	mov	r8, r2
 80040b4:	4699      	mov	r9, r3
 80040b6:	4623      	mov	r3, r4
 80040b8:	eb18 0303 	adds.w	r3, r8, r3
 80040bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80040c0:	462b      	mov	r3, r5
 80040c2:	eb49 0303 	adc.w	r3, r9, r3
 80040c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80040ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80040d6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80040da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80040de:	460b      	mov	r3, r1
 80040e0:	18db      	adds	r3, r3, r3
 80040e2:	653b      	str	r3, [r7, #80]	; 0x50
 80040e4:	4613      	mov	r3, r2
 80040e6:	eb42 0303 	adc.w	r3, r2, r3
 80040ea:	657b      	str	r3, [r7, #84]	; 0x54
 80040ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80040f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80040f4:	f7fc f86e 	bl	80001d4 <__aeabi_uldivmod>
 80040f8:	4602      	mov	r2, r0
 80040fa:	460b      	mov	r3, r1
 80040fc:	4b61      	ldr	r3, [pc, #388]	; (8004284 <UART_SetConfig+0x2d4>)
 80040fe:	fba3 2302 	umull	r2, r3, r3, r2
 8004102:	095b      	lsrs	r3, r3, #5
 8004104:	011c      	lsls	r4, r3, #4
 8004106:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800410a:	2200      	movs	r2, #0
 800410c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004110:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004114:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004118:	4642      	mov	r2, r8
 800411a:	464b      	mov	r3, r9
 800411c:	1891      	adds	r1, r2, r2
 800411e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004120:	415b      	adcs	r3, r3
 8004122:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004124:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004128:	4641      	mov	r1, r8
 800412a:	eb12 0a01 	adds.w	sl, r2, r1
 800412e:	4649      	mov	r1, r9
 8004130:	eb43 0b01 	adc.w	fp, r3, r1
 8004134:	f04f 0200 	mov.w	r2, #0
 8004138:	f04f 0300 	mov.w	r3, #0
 800413c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004140:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004144:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004148:	4692      	mov	sl, r2
 800414a:	469b      	mov	fp, r3
 800414c:	4643      	mov	r3, r8
 800414e:	eb1a 0303 	adds.w	r3, sl, r3
 8004152:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004156:	464b      	mov	r3, r9
 8004158:	eb4b 0303 	adc.w	r3, fp, r3
 800415c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800416c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004170:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004174:	460b      	mov	r3, r1
 8004176:	18db      	adds	r3, r3, r3
 8004178:	643b      	str	r3, [r7, #64]	; 0x40
 800417a:	4613      	mov	r3, r2
 800417c:	eb42 0303 	adc.w	r3, r2, r3
 8004180:	647b      	str	r3, [r7, #68]	; 0x44
 8004182:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004186:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800418a:	f7fc f823 	bl	80001d4 <__aeabi_uldivmod>
 800418e:	4602      	mov	r2, r0
 8004190:	460b      	mov	r3, r1
 8004192:	4611      	mov	r1, r2
 8004194:	4b3b      	ldr	r3, [pc, #236]	; (8004284 <UART_SetConfig+0x2d4>)
 8004196:	fba3 2301 	umull	r2, r3, r3, r1
 800419a:	095b      	lsrs	r3, r3, #5
 800419c:	2264      	movs	r2, #100	; 0x64
 800419e:	fb02 f303 	mul.w	r3, r2, r3
 80041a2:	1acb      	subs	r3, r1, r3
 80041a4:	00db      	lsls	r3, r3, #3
 80041a6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80041aa:	4b36      	ldr	r3, [pc, #216]	; (8004284 <UART_SetConfig+0x2d4>)
 80041ac:	fba3 2302 	umull	r2, r3, r3, r2
 80041b0:	095b      	lsrs	r3, r3, #5
 80041b2:	005b      	lsls	r3, r3, #1
 80041b4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80041b8:	441c      	add	r4, r3
 80041ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041be:	2200      	movs	r2, #0
 80041c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80041c4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80041c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80041cc:	4642      	mov	r2, r8
 80041ce:	464b      	mov	r3, r9
 80041d0:	1891      	adds	r1, r2, r2
 80041d2:	63b9      	str	r1, [r7, #56]	; 0x38
 80041d4:	415b      	adcs	r3, r3
 80041d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80041dc:	4641      	mov	r1, r8
 80041de:	1851      	adds	r1, r2, r1
 80041e0:	6339      	str	r1, [r7, #48]	; 0x30
 80041e2:	4649      	mov	r1, r9
 80041e4:	414b      	adcs	r3, r1
 80041e6:	637b      	str	r3, [r7, #52]	; 0x34
 80041e8:	f04f 0200 	mov.w	r2, #0
 80041ec:	f04f 0300 	mov.w	r3, #0
 80041f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80041f4:	4659      	mov	r1, fp
 80041f6:	00cb      	lsls	r3, r1, #3
 80041f8:	4651      	mov	r1, sl
 80041fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041fe:	4651      	mov	r1, sl
 8004200:	00ca      	lsls	r2, r1, #3
 8004202:	4610      	mov	r0, r2
 8004204:	4619      	mov	r1, r3
 8004206:	4603      	mov	r3, r0
 8004208:	4642      	mov	r2, r8
 800420a:	189b      	adds	r3, r3, r2
 800420c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004210:	464b      	mov	r3, r9
 8004212:	460a      	mov	r2, r1
 8004214:	eb42 0303 	adc.w	r3, r2, r3
 8004218:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800421c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004228:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800422c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004230:	460b      	mov	r3, r1
 8004232:	18db      	adds	r3, r3, r3
 8004234:	62bb      	str	r3, [r7, #40]	; 0x28
 8004236:	4613      	mov	r3, r2
 8004238:	eb42 0303 	adc.w	r3, r2, r3
 800423c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800423e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004242:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004246:	f7fb ffc5 	bl	80001d4 <__aeabi_uldivmod>
 800424a:	4602      	mov	r2, r0
 800424c:	460b      	mov	r3, r1
 800424e:	4b0d      	ldr	r3, [pc, #52]	; (8004284 <UART_SetConfig+0x2d4>)
 8004250:	fba3 1302 	umull	r1, r3, r3, r2
 8004254:	095b      	lsrs	r3, r3, #5
 8004256:	2164      	movs	r1, #100	; 0x64
 8004258:	fb01 f303 	mul.w	r3, r1, r3
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	00db      	lsls	r3, r3, #3
 8004260:	3332      	adds	r3, #50	; 0x32
 8004262:	4a08      	ldr	r2, [pc, #32]	; (8004284 <UART_SetConfig+0x2d4>)
 8004264:	fba2 2303 	umull	r2, r3, r2, r3
 8004268:	095b      	lsrs	r3, r3, #5
 800426a:	f003 0207 	and.w	r2, r3, #7
 800426e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4422      	add	r2, r4
 8004276:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004278:	e106      	b.n	8004488 <UART_SetConfig+0x4d8>
 800427a:	bf00      	nop
 800427c:	40011000 	.word	0x40011000
 8004280:	40011400 	.word	0x40011400
 8004284:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004288:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800428c:	2200      	movs	r2, #0
 800428e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004292:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004296:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800429a:	4642      	mov	r2, r8
 800429c:	464b      	mov	r3, r9
 800429e:	1891      	adds	r1, r2, r2
 80042a0:	6239      	str	r1, [r7, #32]
 80042a2:	415b      	adcs	r3, r3
 80042a4:	627b      	str	r3, [r7, #36]	; 0x24
 80042a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80042aa:	4641      	mov	r1, r8
 80042ac:	1854      	adds	r4, r2, r1
 80042ae:	4649      	mov	r1, r9
 80042b0:	eb43 0501 	adc.w	r5, r3, r1
 80042b4:	f04f 0200 	mov.w	r2, #0
 80042b8:	f04f 0300 	mov.w	r3, #0
 80042bc:	00eb      	lsls	r3, r5, #3
 80042be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042c2:	00e2      	lsls	r2, r4, #3
 80042c4:	4614      	mov	r4, r2
 80042c6:	461d      	mov	r5, r3
 80042c8:	4643      	mov	r3, r8
 80042ca:	18e3      	adds	r3, r4, r3
 80042cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80042d0:	464b      	mov	r3, r9
 80042d2:	eb45 0303 	adc.w	r3, r5, r3
 80042d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80042da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80042e6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80042ea:	f04f 0200 	mov.w	r2, #0
 80042ee:	f04f 0300 	mov.w	r3, #0
 80042f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80042f6:	4629      	mov	r1, r5
 80042f8:	008b      	lsls	r3, r1, #2
 80042fa:	4621      	mov	r1, r4
 80042fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004300:	4621      	mov	r1, r4
 8004302:	008a      	lsls	r2, r1, #2
 8004304:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004308:	f7fb ff64 	bl	80001d4 <__aeabi_uldivmod>
 800430c:	4602      	mov	r2, r0
 800430e:	460b      	mov	r3, r1
 8004310:	4b60      	ldr	r3, [pc, #384]	; (8004494 <UART_SetConfig+0x4e4>)
 8004312:	fba3 2302 	umull	r2, r3, r3, r2
 8004316:	095b      	lsrs	r3, r3, #5
 8004318:	011c      	lsls	r4, r3, #4
 800431a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800431e:	2200      	movs	r2, #0
 8004320:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004324:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004328:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800432c:	4642      	mov	r2, r8
 800432e:	464b      	mov	r3, r9
 8004330:	1891      	adds	r1, r2, r2
 8004332:	61b9      	str	r1, [r7, #24]
 8004334:	415b      	adcs	r3, r3
 8004336:	61fb      	str	r3, [r7, #28]
 8004338:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800433c:	4641      	mov	r1, r8
 800433e:	1851      	adds	r1, r2, r1
 8004340:	6139      	str	r1, [r7, #16]
 8004342:	4649      	mov	r1, r9
 8004344:	414b      	adcs	r3, r1
 8004346:	617b      	str	r3, [r7, #20]
 8004348:	f04f 0200 	mov.w	r2, #0
 800434c:	f04f 0300 	mov.w	r3, #0
 8004350:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004354:	4659      	mov	r1, fp
 8004356:	00cb      	lsls	r3, r1, #3
 8004358:	4651      	mov	r1, sl
 800435a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800435e:	4651      	mov	r1, sl
 8004360:	00ca      	lsls	r2, r1, #3
 8004362:	4610      	mov	r0, r2
 8004364:	4619      	mov	r1, r3
 8004366:	4603      	mov	r3, r0
 8004368:	4642      	mov	r2, r8
 800436a:	189b      	adds	r3, r3, r2
 800436c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004370:	464b      	mov	r3, r9
 8004372:	460a      	mov	r2, r1
 8004374:	eb42 0303 	adc.w	r3, r2, r3
 8004378:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800437c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	67bb      	str	r3, [r7, #120]	; 0x78
 8004386:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004388:	f04f 0200 	mov.w	r2, #0
 800438c:	f04f 0300 	mov.w	r3, #0
 8004390:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004394:	4649      	mov	r1, r9
 8004396:	008b      	lsls	r3, r1, #2
 8004398:	4641      	mov	r1, r8
 800439a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800439e:	4641      	mov	r1, r8
 80043a0:	008a      	lsls	r2, r1, #2
 80043a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80043a6:	f7fb ff15 	bl	80001d4 <__aeabi_uldivmod>
 80043aa:	4602      	mov	r2, r0
 80043ac:	460b      	mov	r3, r1
 80043ae:	4611      	mov	r1, r2
 80043b0:	4b38      	ldr	r3, [pc, #224]	; (8004494 <UART_SetConfig+0x4e4>)
 80043b2:	fba3 2301 	umull	r2, r3, r3, r1
 80043b6:	095b      	lsrs	r3, r3, #5
 80043b8:	2264      	movs	r2, #100	; 0x64
 80043ba:	fb02 f303 	mul.w	r3, r2, r3
 80043be:	1acb      	subs	r3, r1, r3
 80043c0:	011b      	lsls	r3, r3, #4
 80043c2:	3332      	adds	r3, #50	; 0x32
 80043c4:	4a33      	ldr	r2, [pc, #204]	; (8004494 <UART_SetConfig+0x4e4>)
 80043c6:	fba2 2303 	umull	r2, r3, r2, r3
 80043ca:	095b      	lsrs	r3, r3, #5
 80043cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043d0:	441c      	add	r4, r3
 80043d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043d6:	2200      	movs	r2, #0
 80043d8:	673b      	str	r3, [r7, #112]	; 0x70
 80043da:	677a      	str	r2, [r7, #116]	; 0x74
 80043dc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80043e0:	4642      	mov	r2, r8
 80043e2:	464b      	mov	r3, r9
 80043e4:	1891      	adds	r1, r2, r2
 80043e6:	60b9      	str	r1, [r7, #8]
 80043e8:	415b      	adcs	r3, r3
 80043ea:	60fb      	str	r3, [r7, #12]
 80043ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80043f0:	4641      	mov	r1, r8
 80043f2:	1851      	adds	r1, r2, r1
 80043f4:	6039      	str	r1, [r7, #0]
 80043f6:	4649      	mov	r1, r9
 80043f8:	414b      	adcs	r3, r1
 80043fa:	607b      	str	r3, [r7, #4]
 80043fc:	f04f 0200 	mov.w	r2, #0
 8004400:	f04f 0300 	mov.w	r3, #0
 8004404:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004408:	4659      	mov	r1, fp
 800440a:	00cb      	lsls	r3, r1, #3
 800440c:	4651      	mov	r1, sl
 800440e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004412:	4651      	mov	r1, sl
 8004414:	00ca      	lsls	r2, r1, #3
 8004416:	4610      	mov	r0, r2
 8004418:	4619      	mov	r1, r3
 800441a:	4603      	mov	r3, r0
 800441c:	4642      	mov	r2, r8
 800441e:	189b      	adds	r3, r3, r2
 8004420:	66bb      	str	r3, [r7, #104]	; 0x68
 8004422:	464b      	mov	r3, r9
 8004424:	460a      	mov	r2, r1
 8004426:	eb42 0303 	adc.w	r3, r2, r3
 800442a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800442c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	663b      	str	r3, [r7, #96]	; 0x60
 8004436:	667a      	str	r2, [r7, #100]	; 0x64
 8004438:	f04f 0200 	mov.w	r2, #0
 800443c:	f04f 0300 	mov.w	r3, #0
 8004440:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004444:	4649      	mov	r1, r9
 8004446:	008b      	lsls	r3, r1, #2
 8004448:	4641      	mov	r1, r8
 800444a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800444e:	4641      	mov	r1, r8
 8004450:	008a      	lsls	r2, r1, #2
 8004452:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004456:	f7fb febd 	bl	80001d4 <__aeabi_uldivmod>
 800445a:	4602      	mov	r2, r0
 800445c:	460b      	mov	r3, r1
 800445e:	4b0d      	ldr	r3, [pc, #52]	; (8004494 <UART_SetConfig+0x4e4>)
 8004460:	fba3 1302 	umull	r1, r3, r3, r2
 8004464:	095b      	lsrs	r3, r3, #5
 8004466:	2164      	movs	r1, #100	; 0x64
 8004468:	fb01 f303 	mul.w	r3, r1, r3
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	011b      	lsls	r3, r3, #4
 8004470:	3332      	adds	r3, #50	; 0x32
 8004472:	4a08      	ldr	r2, [pc, #32]	; (8004494 <UART_SetConfig+0x4e4>)
 8004474:	fba2 2303 	umull	r2, r3, r2, r3
 8004478:	095b      	lsrs	r3, r3, #5
 800447a:	f003 020f 	and.w	r2, r3, #15
 800447e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4422      	add	r2, r4
 8004486:	609a      	str	r2, [r3, #8]
}
 8004488:	bf00      	nop
 800448a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800448e:	46bd      	mov	sp, r7
 8004490:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004494:	51eb851f 	.word	0x51eb851f

08004498 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b084      	sub	sp, #16
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	7c1b      	ldrb	r3, [r3, #16]
 80044a6:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80044ae:	461a      	mov	r2, r3
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	fb02 f303 	mul.w	r3, r2, r3
 80044b6:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	00db      	lsls	r3, r3, #3
 80044bc:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044c2:	68fa      	ldr	r2, [r7, #12]
 80044c4:	2100      	movs	r1, #0
 80044c6:	4618      	mov	r0, r3
 80044c8:	f001 ff55 	bl	8006376 <memset>
}
 80044cc:	bf00      	nop
 80044ce:	3710      	adds	r7, #16
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}

080044d4 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b086      	sub	sp, #24
 80044d8:	af02      	add	r7, sp, #8
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	460b      	mov	r3, r1
 80044de:	70fb      	strb	r3, [r7, #3]
 80044e0:	4613      	mov	r3, r2
 80044e2:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	7c1b      	ldrb	r3, [r3, #16]
 80044ea:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 80044ec:	78fb      	ldrb	r3, [r7, #3]
 80044ee:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044f4:	60bb      	str	r3, [r7, #8]
  offset *= w;
 80044f6:	7bfb      	ldrb	r3, [r7, #15]
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	89ba      	ldrh	r2, [r7, #12]
 80044fc:	fb12 f303 	smulbb	r3, r2, r3
 8004500:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8004502:	89bb      	ldrh	r3, [r7, #12]
 8004504:	00db      	lsls	r3, r3, #3
 8004506:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8004508:	89bb      	ldrh	r3, [r7, #12]
 800450a:	68ba      	ldr	r2, [r7, #8]
 800450c:	4413      	add	r3, r2
 800450e:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8004510:	7bf9      	ldrb	r1, [r7, #15]
 8004512:	78ba      	ldrb	r2, [r7, #2]
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	9300      	str	r3, [sp, #0]
 8004518:	460b      	mov	r3, r1
 800451a:	2100      	movs	r1, #0
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f001 fe5c 	bl	80061da <u8x8_DrawTile>
}
 8004522:	bf00      	nop
 8004524:	3710      	adds	r7, #16
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}

0800452a <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 800452a:	b580      	push	{r7, lr}
 800452c:	b084      	sub	sp, #16
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8004532:	2300      	movs	r3, #0
 8004534:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800453c:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004544:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	7c5b      	ldrb	r3, [r3, #17]
 800454c:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 800454e:	7bba      	ldrb	r2, [r7, #14]
 8004550:	7bfb      	ldrb	r3, [r7, #15]
 8004552:	4619      	mov	r1, r3
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f7ff ffbd 	bl	80044d4 <u8g2_send_tile_row>
    src_row++;
 800455a:	7bfb      	ldrb	r3, [r7, #15]
 800455c:	3301      	adds	r3, #1
 800455e:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8004560:	7bbb      	ldrb	r3, [r7, #14]
 8004562:	3301      	adds	r3, #1
 8004564:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8004566:	7bfa      	ldrb	r2, [r7, #15]
 8004568:	7b7b      	ldrb	r3, [r7, #13]
 800456a:	429a      	cmp	r2, r3
 800456c:	d203      	bcs.n	8004576 <u8g2_send_buffer+0x4c>
 800456e:	7bba      	ldrb	r2, [r7, #14]
 8004570:	7b3b      	ldrb	r3, [r7, #12]
 8004572:	429a      	cmp	r2, r3
 8004574:	d3eb      	bcc.n	800454e <u8g2_send_buffer+0x24>
}
 8004576:	bf00      	nop
 8004578:	3710      	adds	r7, #16
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}

0800457e <u8g2_SetBufferCurrTileRow>:
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
}

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 800457e:	b580      	push	{r7, lr}
 8004580:	b082      	sub	sp, #8
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
 8004586:	460b      	mov	r3, r1
 8004588:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	78fa      	ldrb	r2, [r7, #3]
 800458e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  u8g2->cb->update_dimension(u8g2);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	4798      	blx	r3
}
 80045a6:	bf00      	nop
 80045a8:	3708      	adds	r7, #8
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}

080045ae <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 80045ae:	b580      	push	{r7, lr}
 80045b0:	b082      	sub	sp, #8
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d002      	beq.n	80045c6 <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f7ff ff69 	bl	8004498 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 80045c6:	2100      	movs	r1, #0
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f7ff ffd8 	bl	800457e <u8g2_SetBufferCurrTileRow>
}
 80045ce:	bf00      	nop
 80045d0:	3708      	adds	r7, #8
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}

080045d6 <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 80045d6:	b580      	push	{r7, lr}
 80045d8:	b084      	sub	sp, #16
 80045da:	af00      	add	r7, sp, #0
 80045dc:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f7ff ffa3 	bl	800452a <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80045ea:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 80045f2:	7bfb      	ldrb	r3, [r7, #15]
 80045f4:	4413      	add	r3, r2
 80045f6:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	7c5b      	ldrb	r3, [r3, #17]
 80045fe:	7bfa      	ldrb	r2, [r7, #15]
 8004600:	429a      	cmp	r2, r3
 8004602:	d304      	bcc.n	800460e <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f001 fe39 	bl	800627c <u8x8_RefreshDisplay>
    return 0;
 800460a:	2300      	movs	r3, #0
 800460c:	e00d      	b.n	800462a <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8004614:	2b00      	cmp	r3, #0
 8004616:	d002      	beq.n	800461e <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f7ff ff3d 	bl	8004498 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 800461e:	7bfb      	ldrb	r3, [r7, #15]
 8004620:	4619      	mov	r1, r3
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f7ff ffab 	bl	800457e <u8g2_SetBufferCurrTileRow>
  return 1;
 8004628:	2301      	movs	r3, #1
}
 800462a:	4618      	mov	r0, r3
 800462c:	3710      	adds	r7, #16
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}

08004632 <u8g2_draw_circle_section>:
/* Circle */

static void u8g2_draw_circle_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option) U8G2_NOINLINE;

static void u8g2_draw_circle_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option)
{
 8004632:	b580      	push	{r7, lr}
 8004634:	b084      	sub	sp, #16
 8004636:	af00      	add	r7, sp, #0
 8004638:	60f8      	str	r0, [r7, #12]
 800463a:	4608      	mov	r0, r1
 800463c:	4611      	mov	r1, r2
 800463e:	461a      	mov	r2, r3
 8004640:	4603      	mov	r3, r0
 8004642:	817b      	strh	r3, [r7, #10]
 8004644:	460b      	mov	r3, r1
 8004646:	813b      	strh	r3, [r7, #8]
 8004648:	4613      	mov	r3, r2
 800464a:	80fb      	strh	r3, [r7, #6]
    /* upper right */
    if ( option & U8G2_DRAW_UPPER_RIGHT )
 800464c:	7f3b      	ldrb	r3, [r7, #28]
 800464e:	f003 0301 	and.w	r3, r3, #1
 8004652:	2b00      	cmp	r3, #0
 8004654:	d017      	beq.n	8004686 <u8g2_draw_circle_section+0x54>
    {
      u8g2_DrawPixel(u8g2, x0 + x, y0 - y);
 8004656:	88fa      	ldrh	r2, [r7, #6]
 8004658:	897b      	ldrh	r3, [r7, #10]
 800465a:	4413      	add	r3, r2
 800465c:	b299      	uxth	r1, r3
 800465e:	8b3a      	ldrh	r2, [r7, #24]
 8004660:	893b      	ldrh	r3, [r7, #8]
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	b29b      	uxth	r3, r3
 8004666:	461a      	mov	r2, r3
 8004668:	68f8      	ldr	r0, [r7, #12]
 800466a:	f000 ffd7 	bl	800561c <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 + y, y0 - x);
 800466e:	88fa      	ldrh	r2, [r7, #6]
 8004670:	893b      	ldrh	r3, [r7, #8]
 8004672:	4413      	add	r3, r2
 8004674:	b299      	uxth	r1, r3
 8004676:	8b3a      	ldrh	r2, [r7, #24]
 8004678:	897b      	ldrh	r3, [r7, #10]
 800467a:	1ad3      	subs	r3, r2, r3
 800467c:	b29b      	uxth	r3, r3
 800467e:	461a      	mov	r2, r3
 8004680:	68f8      	ldr	r0, [r7, #12]
 8004682:	f000 ffcb 	bl	800561c <u8g2_DrawPixel>
    }
    
    /* upper left */
    if ( option & U8G2_DRAW_UPPER_LEFT )
 8004686:	7f3b      	ldrb	r3, [r7, #28]
 8004688:	f003 0302 	and.w	r3, r3, #2
 800468c:	2b00      	cmp	r3, #0
 800468e:	d017      	beq.n	80046c0 <u8g2_draw_circle_section+0x8e>
    {
      u8g2_DrawPixel(u8g2, x0 - x, y0 - y);
 8004690:	88fa      	ldrh	r2, [r7, #6]
 8004692:	897b      	ldrh	r3, [r7, #10]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	b299      	uxth	r1, r3
 8004698:	8b3a      	ldrh	r2, [r7, #24]
 800469a:	893b      	ldrh	r3, [r7, #8]
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	b29b      	uxth	r3, r3
 80046a0:	461a      	mov	r2, r3
 80046a2:	68f8      	ldr	r0, [r7, #12]
 80046a4:	f000 ffba 	bl	800561c <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 - y, y0 - x);
 80046a8:	88fa      	ldrh	r2, [r7, #6]
 80046aa:	893b      	ldrh	r3, [r7, #8]
 80046ac:	1ad3      	subs	r3, r2, r3
 80046ae:	b299      	uxth	r1, r3
 80046b0:	8b3a      	ldrh	r2, [r7, #24]
 80046b2:	897b      	ldrh	r3, [r7, #10]
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	461a      	mov	r2, r3
 80046ba:	68f8      	ldr	r0, [r7, #12]
 80046bc:	f000 ffae 	bl	800561c <u8g2_DrawPixel>
    }
    
    /* lower right */
    if ( option & U8G2_DRAW_LOWER_RIGHT )
 80046c0:	7f3b      	ldrb	r3, [r7, #28]
 80046c2:	f003 0308 	and.w	r3, r3, #8
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d017      	beq.n	80046fa <u8g2_draw_circle_section+0xc8>
    {
      u8g2_DrawPixel(u8g2, x0 + x, y0 + y);
 80046ca:	88fa      	ldrh	r2, [r7, #6]
 80046cc:	897b      	ldrh	r3, [r7, #10]
 80046ce:	4413      	add	r3, r2
 80046d0:	b299      	uxth	r1, r3
 80046d2:	8b3a      	ldrh	r2, [r7, #24]
 80046d4:	893b      	ldrh	r3, [r7, #8]
 80046d6:	4413      	add	r3, r2
 80046d8:	b29b      	uxth	r3, r3
 80046da:	461a      	mov	r2, r3
 80046dc:	68f8      	ldr	r0, [r7, #12]
 80046de:	f000 ff9d 	bl	800561c <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 + y, y0 + x);
 80046e2:	88fa      	ldrh	r2, [r7, #6]
 80046e4:	893b      	ldrh	r3, [r7, #8]
 80046e6:	4413      	add	r3, r2
 80046e8:	b299      	uxth	r1, r3
 80046ea:	8b3a      	ldrh	r2, [r7, #24]
 80046ec:	897b      	ldrh	r3, [r7, #10]
 80046ee:	4413      	add	r3, r2
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	461a      	mov	r2, r3
 80046f4:	68f8      	ldr	r0, [r7, #12]
 80046f6:	f000 ff91 	bl	800561c <u8g2_DrawPixel>
    }
    
    /* lower left */
    if ( option & U8G2_DRAW_LOWER_LEFT )
 80046fa:	7f3b      	ldrb	r3, [r7, #28]
 80046fc:	f003 0304 	and.w	r3, r3, #4
 8004700:	2b00      	cmp	r3, #0
 8004702:	d017      	beq.n	8004734 <u8g2_draw_circle_section+0x102>
    {
      u8g2_DrawPixel(u8g2, x0 - x, y0 + y);
 8004704:	88fa      	ldrh	r2, [r7, #6]
 8004706:	897b      	ldrh	r3, [r7, #10]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	b299      	uxth	r1, r3
 800470c:	8b3a      	ldrh	r2, [r7, #24]
 800470e:	893b      	ldrh	r3, [r7, #8]
 8004710:	4413      	add	r3, r2
 8004712:	b29b      	uxth	r3, r3
 8004714:	461a      	mov	r2, r3
 8004716:	68f8      	ldr	r0, [r7, #12]
 8004718:	f000 ff80 	bl	800561c <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 - y, y0 + x);
 800471c:	88fa      	ldrh	r2, [r7, #6]
 800471e:	893b      	ldrh	r3, [r7, #8]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	b299      	uxth	r1, r3
 8004724:	8b3a      	ldrh	r2, [r7, #24]
 8004726:	897b      	ldrh	r3, [r7, #10]
 8004728:	4413      	add	r3, r2
 800472a:	b29b      	uxth	r3, r3
 800472c:	461a      	mov	r2, r3
 800472e:	68f8      	ldr	r0, [r7, #12]
 8004730:	f000 ff74 	bl	800561c <u8g2_DrawPixel>
    }
}
 8004734:	bf00      	nop
 8004736:	3710      	adds	r7, #16
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}

0800473c <u8g2_draw_circle>:

static void u8g2_draw_circle(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b08a      	sub	sp, #40	; 0x28
 8004740:	af02      	add	r7, sp, #8
 8004742:	60f8      	str	r0, [r7, #12]
 8004744:	4608      	mov	r0, r1
 8004746:	4611      	mov	r1, r2
 8004748:	461a      	mov	r2, r3
 800474a:	4603      	mov	r3, r0
 800474c:	817b      	strh	r3, [r7, #10]
 800474e:	460b      	mov	r3, r1
 8004750:	813b      	strh	r3, [r7, #8]
 8004752:	4613      	mov	r3, r2
 8004754:	80fb      	strh	r3, [r7, #6]
    u8g2_int_t ddF_x;
    u8g2_int_t ddF_y;
    u8g2_uint_t x;
    u8g2_uint_t y;

    f = 1;
 8004756:	2301      	movs	r3, #1
 8004758:	83fb      	strh	r3, [r7, #30]
    f -= rad;
 800475a:	8bfa      	ldrh	r2, [r7, #30]
 800475c:	88fb      	ldrh	r3, [r7, #6]
 800475e:	1ad3      	subs	r3, r2, r3
 8004760:	b29b      	uxth	r3, r3
 8004762:	83fb      	strh	r3, [r7, #30]
    ddF_x = 1;
 8004764:	2301      	movs	r3, #1
 8004766:	83bb      	strh	r3, [r7, #28]
    ddF_y = 0;
 8004768:	2300      	movs	r3, #0
 800476a:	837b      	strh	r3, [r7, #26]
    ddF_y -= rad;
 800476c:	8b7a      	ldrh	r2, [r7, #26]
 800476e:	88fb      	ldrh	r3, [r7, #6]
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	b29b      	uxth	r3, r3
 8004774:	837b      	strh	r3, [r7, #26]
    ddF_y *= 2;
 8004776:	8b7b      	ldrh	r3, [r7, #26]
 8004778:	005b      	lsls	r3, r3, #1
 800477a:	b29b      	uxth	r3, r3
 800477c:	837b      	strh	r3, [r7, #26]
    x = 0;
 800477e:	2300      	movs	r3, #0
 8004780:	833b      	strh	r3, [r7, #24]
    y = rad;
 8004782:	88fb      	ldrh	r3, [r7, #6]
 8004784:	82fb      	strh	r3, [r7, #22]

    u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);
 8004786:	8978      	ldrh	r0, [r7, #10]
 8004788:	8afa      	ldrh	r2, [r7, #22]
 800478a:	8b39      	ldrh	r1, [r7, #24]
 800478c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004790:	9301      	str	r3, [sp, #4]
 8004792:	893b      	ldrh	r3, [r7, #8]
 8004794:	9300      	str	r3, [sp, #0]
 8004796:	4603      	mov	r3, r0
 8004798:	68f8      	ldr	r0, [r7, #12]
 800479a:	f7ff ff4a 	bl	8004632 <u8g2_draw_circle_section>
    
    while ( x < y )
 800479e:	e027      	b.n	80047f0 <u8g2_draw_circle+0xb4>
    {
      if (f >= 0) 
 80047a0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	db0b      	blt.n	80047c0 <u8g2_draw_circle+0x84>
      {
        y--;
 80047a8:	8afb      	ldrh	r3, [r7, #22]
 80047aa:	3b01      	subs	r3, #1
 80047ac:	82fb      	strh	r3, [r7, #22]
        ddF_y += 2;
 80047ae:	8b7b      	ldrh	r3, [r7, #26]
 80047b0:	3302      	adds	r3, #2
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	837b      	strh	r3, [r7, #26]
        f += ddF_y;
 80047b6:	8bfa      	ldrh	r2, [r7, #30]
 80047b8:	8b7b      	ldrh	r3, [r7, #26]
 80047ba:	4413      	add	r3, r2
 80047bc:	b29b      	uxth	r3, r3
 80047be:	83fb      	strh	r3, [r7, #30]
      }
      x++;
 80047c0:	8b3b      	ldrh	r3, [r7, #24]
 80047c2:	3301      	adds	r3, #1
 80047c4:	833b      	strh	r3, [r7, #24]
      ddF_x += 2;
 80047c6:	8bbb      	ldrh	r3, [r7, #28]
 80047c8:	3302      	adds	r3, #2
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	83bb      	strh	r3, [r7, #28]
      f += ddF_x;
 80047ce:	8bfa      	ldrh	r2, [r7, #30]
 80047d0:	8bbb      	ldrh	r3, [r7, #28]
 80047d2:	4413      	add	r3, r2
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	83fb      	strh	r3, [r7, #30]

      u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);    
 80047d8:	8978      	ldrh	r0, [r7, #10]
 80047da:	8afa      	ldrh	r2, [r7, #22]
 80047dc:	8b39      	ldrh	r1, [r7, #24]
 80047de:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80047e2:	9301      	str	r3, [sp, #4]
 80047e4:	893b      	ldrh	r3, [r7, #8]
 80047e6:	9300      	str	r3, [sp, #0]
 80047e8:	4603      	mov	r3, r0
 80047ea:	68f8      	ldr	r0, [r7, #12]
 80047ec:	f7ff ff21 	bl	8004632 <u8g2_draw_circle_section>
    while ( x < y )
 80047f0:	8b3a      	ldrh	r2, [r7, #24]
 80047f2:	8afb      	ldrh	r3, [r7, #22]
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d3d3      	bcc.n	80047a0 <u8g2_draw_circle+0x64>
    }
}
 80047f8:	bf00      	nop
 80047fa:	bf00      	nop
 80047fc:	3720      	adds	r7, #32
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}

08004802 <u8g2_DrawCircle>:

void u8g2_DrawCircle(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
{
 8004802:	b590      	push	{r4, r7, lr}
 8004804:	b087      	sub	sp, #28
 8004806:	af02      	add	r7, sp, #8
 8004808:	60f8      	str	r0, [r7, #12]
 800480a:	4608      	mov	r0, r1
 800480c:	4611      	mov	r1, r2
 800480e:	461a      	mov	r2, r3
 8004810:	4603      	mov	r3, r0
 8004812:	817b      	strh	r3, [r7, #10]
 8004814:	460b      	mov	r3, r1
 8004816:	813b      	strh	r3, [r7, #8]
 8004818:	4613      	mov	r3, r2
 800481a:	80fb      	strh	r3, [r7, #6]
  /* check for bounding box */
#ifdef U8G2_WITH_INTERSECTION
  {
    if ( u8g2_IsIntersection(u8g2, x0-rad, y0-rad, x0+rad+1, y0+rad+1) == 0 ) 
 800481c:	897a      	ldrh	r2, [r7, #10]
 800481e:	88fb      	ldrh	r3, [r7, #6]
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	b299      	uxth	r1, r3
 8004824:	893a      	ldrh	r2, [r7, #8]
 8004826:	88fb      	ldrh	r3, [r7, #6]
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	b298      	uxth	r0, r3
 800482c:	897a      	ldrh	r2, [r7, #10]
 800482e:	88fb      	ldrh	r3, [r7, #6]
 8004830:	4413      	add	r3, r2
 8004832:	b29b      	uxth	r3, r3
 8004834:	3301      	adds	r3, #1
 8004836:	b29c      	uxth	r4, r3
 8004838:	893a      	ldrh	r2, [r7, #8]
 800483a:	88fb      	ldrh	r3, [r7, #6]
 800483c:	4413      	add	r3, r2
 800483e:	b29b      	uxth	r3, r3
 8004840:	3301      	adds	r3, #1
 8004842:	b29b      	uxth	r3, r3
 8004844:	9300      	str	r3, [sp, #0]
 8004846:	4623      	mov	r3, r4
 8004848:	4602      	mov	r2, r0
 800484a:	68f8      	ldr	r0, [r7, #12]
 800484c:	f000 ff4c 	bl	80056e8 <u8g2_IsIntersection>
 8004850:	4603      	mov	r3, r0
 8004852:	2b00      	cmp	r3, #0
 8004854:	d00a      	beq.n	800486c <u8g2_DrawCircle+0x6a>
  }
#endif /* U8G2_WITH_INTERSECTION */
  
  
  /* draw circle */
  u8g2_draw_circle(u8g2, x0, y0, rad, option);
 8004856:	88f8      	ldrh	r0, [r7, #6]
 8004858:	893a      	ldrh	r2, [r7, #8]
 800485a:	8979      	ldrh	r1, [r7, #10]
 800485c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004860:	9300      	str	r3, [sp, #0]
 8004862:	4603      	mov	r3, r0
 8004864:	68f8      	ldr	r0, [r7, #12]
 8004866:	f7ff ff69 	bl	800473c <u8g2_draw_circle>
 800486a:	e000      	b.n	800486e <u8g2_DrawCircle+0x6c>
      return;
 800486c:	bf00      	nop
}
 800486e:	3714      	adds	r7, #20
 8004870:	46bd      	mov	sp, r7
 8004872:	bd90      	pop	{r4, r7, pc}

08004874 <u8g2_m_16_16_1>:
  *page_cnt = 16;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_16_1(uint8_t *page_cnt)
{
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 1;
  return 0;
  #else
  static uint8_t buf[128];
  *page_cnt = 1;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	701a      	strb	r2, [r3, #0]
  return buf;
 8004882:	4b03      	ldr	r3, [pc, #12]	; (8004890 <u8g2_m_16_16_1+0x1c>)
  #endif
}
 8004884:	4618      	mov	r0, r3
 8004886:	370c      	adds	r7, #12
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr
 8004890:	20000274 	.word	0x20000274

08004894 <u8g2_Setup_sh1107_pimoroni_128x128_1>:
  u8g2_SetupDisplay(u8g2, u8x8_d_sh1107_128x128, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
  buf = u8g2_m_16_16_1(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
void u8g2_Setup_sh1107_pimoroni_128x128_1(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b088      	sub	sp, #32
 8004898:	af02      	add	r7, sp, #8
 800489a:	60f8      	str	r0, [r7, #12]
 800489c:	60b9      	str	r1, [r7, #8]
 800489e:	607a      	str	r2, [r7, #4]
 80048a0:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_sh1107_pimoroni_128x128, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	9300      	str	r3, [sp, #0]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a0b      	ldr	r2, [pc, #44]	; (80048d8 <u8g2_Setup_sh1107_pimoroni_128x128_1+0x44>)
 80048aa:	490c      	ldr	r1, [pc, #48]	; (80048dc <u8g2_Setup_sh1107_pimoroni_128x128_1+0x48>)
 80048ac:	68f8      	ldr	r0, [r7, #12]
 80048ae:	f001 fd45 	bl	800633c <u8x8_Setup>
  buf = u8g2_m_16_16_1(&tile_buf_height);
 80048b2:	f107 0313 	add.w	r3, r7, #19
 80048b6:	4618      	mov	r0, r3
 80048b8:	f7ff ffdc 	bl	8004874 <u8g2_m_16_16_1>
 80048bc:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 80048be:	7cfa      	ldrb	r2, [r7, #19]
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	9300      	str	r3, [sp, #0]
 80048c4:	4b06      	ldr	r3, [pc, #24]	; (80048e0 <u8g2_Setup_sh1107_pimoroni_128x128_1+0x4c>)
 80048c6:	6979      	ldr	r1, [r7, #20]
 80048c8:	68f8      	ldr	r0, [r7, #12]
 80048ca:	f001 f891 	bl	80059f0 <u8g2_SetupBuffer>
}
 80048ce:	bf00      	nop
 80048d0:	3718      	adds	r7, #24
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	bf00      	nop
 80048d8:	08005f05 	.word	0x08005f05
 80048dc:	080060d5 	.word	0x080060d5
 80048e0:	08005873 	.word	0x08005873

080048e4 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	460b      	mov	r3, r1
 80048ee:	70fb      	strb	r3, [r7, #3]
  font += offset;
 80048f0:	78fb      	ldrb	r3, [r7, #3]
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	4413      	add	r3, r2
 80048f6:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	781b      	ldrb	r3, [r3, #0]
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	370c      	adds	r7, #12
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr

08004908 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 8004908:	b480      	push	{r7}
 800490a:	b085      	sub	sp, #20
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	460b      	mov	r3, r1
 8004912:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 8004914:	78fb      	ldrb	r3, [r7, #3]
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	4413      	add	r3, r2
 800491a:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	81fb      	strh	r3, [r7, #14]
    font++;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	3301      	adds	r3, #1
 8004926:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 8004928:	89fb      	ldrh	r3, [r7, #14]
 800492a:	021b      	lsls	r3, r3, #8
 800492c:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	781b      	ldrb	r3, [r3, #0]
 8004932:	b29a      	uxth	r2, r3
 8004934:	89fb      	ldrh	r3, [r7, #14]
 8004936:	4413      	add	r3, r2
 8004938:	81fb      	strh	r3, [r7, #14]
    return pos;
 800493a:	89fb      	ldrh	r3, [r7, #14]
}
 800493c:	4618      	mov	r0, r3
 800493e:	3714      	adds	r7, #20
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr

08004948 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b082      	sub	sp, #8
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 8004952:	2100      	movs	r1, #0
 8004954:	6838      	ldr	r0, [r7, #0]
 8004956:	f7ff ffc5 	bl	80048e4 <u8g2_font_get_byte>
 800495a:	4603      	mov	r3, r0
 800495c:	461a      	mov	r2, r3
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 8004962:	2101      	movs	r1, #1
 8004964:	6838      	ldr	r0, [r7, #0]
 8004966:	f7ff ffbd 	bl	80048e4 <u8g2_font_get_byte>
 800496a:	4603      	mov	r3, r0
 800496c:	461a      	mov	r2, r3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 8004972:	2102      	movs	r1, #2
 8004974:	6838      	ldr	r0, [r7, #0]
 8004976:	f7ff ffb5 	bl	80048e4 <u8g2_font_get_byte>
 800497a:	4603      	mov	r3, r0
 800497c:	461a      	mov	r2, r3
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 8004982:	2103      	movs	r1, #3
 8004984:	6838      	ldr	r0, [r7, #0]
 8004986:	f7ff ffad 	bl	80048e4 <u8g2_font_get_byte>
 800498a:	4603      	mov	r3, r0
 800498c:	461a      	mov	r2, r3
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 8004992:	2104      	movs	r1, #4
 8004994:	6838      	ldr	r0, [r7, #0]
 8004996:	f7ff ffa5 	bl	80048e4 <u8g2_font_get_byte>
 800499a:	4603      	mov	r3, r0
 800499c:	461a      	mov	r2, r3
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 80049a2:	2105      	movs	r1, #5
 80049a4:	6838      	ldr	r0, [r7, #0]
 80049a6:	f7ff ff9d 	bl	80048e4 <u8g2_font_get_byte>
 80049aa:	4603      	mov	r3, r0
 80049ac:	461a      	mov	r2, r3
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 80049b2:	2106      	movs	r1, #6
 80049b4:	6838      	ldr	r0, [r7, #0]
 80049b6:	f7ff ff95 	bl	80048e4 <u8g2_font_get_byte>
 80049ba:	4603      	mov	r3, r0
 80049bc:	461a      	mov	r2, r3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 80049c2:	2107      	movs	r1, #7
 80049c4:	6838      	ldr	r0, [r7, #0]
 80049c6:	f7ff ff8d 	bl	80048e4 <u8g2_font_get_byte>
 80049ca:	4603      	mov	r3, r0
 80049cc:	461a      	mov	r2, r3
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 80049d2:	2108      	movs	r1, #8
 80049d4:	6838      	ldr	r0, [r7, #0]
 80049d6:	f7ff ff85 	bl	80048e4 <u8g2_font_get_byte>
 80049da:	4603      	mov	r3, r0
 80049dc:	461a      	mov	r2, r3
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 80049e2:	2109      	movs	r1, #9
 80049e4:	6838      	ldr	r0, [r7, #0]
 80049e6:	f7ff ff7d 	bl	80048e4 <u8g2_font_get_byte>
 80049ea:	4603      	mov	r3, r0
 80049ec:	b25a      	sxtb	r2, r3
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 80049f2:	210a      	movs	r1, #10
 80049f4:	6838      	ldr	r0, [r7, #0]
 80049f6:	f7ff ff75 	bl	80048e4 <u8g2_font_get_byte>
 80049fa:	4603      	mov	r3, r0
 80049fc:	b25a      	sxtb	r2, r3
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 8004a02:	210b      	movs	r1, #11
 8004a04:	6838      	ldr	r0, [r7, #0]
 8004a06:	f7ff ff6d 	bl	80048e4 <u8g2_font_get_byte>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	b25a      	sxtb	r2, r3
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 8004a12:	210c      	movs	r1, #12
 8004a14:	6838      	ldr	r0, [r7, #0]
 8004a16:	f7ff ff65 	bl	80048e4 <u8g2_font_get_byte>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	b25a      	sxtb	r2, r3
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 8004a22:	210d      	movs	r1, #13
 8004a24:	6838      	ldr	r0, [r7, #0]
 8004a26:	f7ff ff5d 	bl	80048e4 <u8g2_font_get_byte>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	b25a      	sxtb	r2, r3
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 8004a32:	210e      	movs	r1, #14
 8004a34:	6838      	ldr	r0, [r7, #0]
 8004a36:	f7ff ff55 	bl	80048e4 <u8g2_font_get_byte>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	b25a      	sxtb	r2, r3
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 8004a42:	210f      	movs	r1, #15
 8004a44:	6838      	ldr	r0, [r7, #0]
 8004a46:	f7ff ff4d 	bl	80048e4 <u8g2_font_get_byte>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	b25a      	sxtb	r2, r3
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 8004a52:	2110      	movs	r1, #16
 8004a54:	6838      	ldr	r0, [r7, #0]
 8004a56:	f7ff ff45 	bl	80048e4 <u8g2_font_get_byte>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	b25a      	sxtb	r2, r3
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8004a62:	2111      	movs	r1, #17
 8004a64:	6838      	ldr	r0, [r7, #0]
 8004a66:	f7ff ff4f 	bl	8004908 <u8g2_font_get_word>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 8004a72:	2113      	movs	r1, #19
 8004a74:	6838      	ldr	r0, [r7, #0]
 8004a76:	f7ff ff47 	bl	8004908 <u8g2_font_get_word>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 8004a82:	2115      	movs	r1, #21
 8004a84:	6838      	ldr	r0, [r7, #0]
 8004a86:	f7ff ff3f 	bl	8004908 <u8g2_font_get_word>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	82da      	strh	r2, [r3, #22]
#endif
}
 8004a92:	bf00      	nop
 8004a94:	3708      	adds	r7, #8
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}

08004a9a <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 8004a9a:	b480      	push	{r7}
 8004a9c:	b085      	sub	sp, #20
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	6078      	str	r0, [r7, #4]
 8004aa2:	460b      	mov	r3, r1
 8004aa4:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	7b1b      	ldrb	r3, [r3, #12]
 8004aaa:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	781b      	ldrb	r3, [r3, #0]
 8004ab2:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 8004ab4:	7bfa      	ldrb	r2, [r7, #15]
 8004ab6:	7b7b      	ldrb	r3, [r7, #13]
 8004ab8:	fa42 f303 	asr.w	r3, r2, r3
 8004abc:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 8004abe:	7b7b      	ldrb	r3, [r7, #13]
 8004ac0:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 8004ac2:	7bba      	ldrb	r2, [r7, #14]
 8004ac4:	78fb      	ldrb	r3, [r7, #3]
 8004ac6:	4413      	add	r3, r2
 8004ac8:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 8004aca:	7bbb      	ldrb	r3, [r7, #14]
 8004acc:	2b07      	cmp	r3, #7
 8004ace:	d91a      	bls.n	8004b06 <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 8004ad0:	2308      	movs	r3, #8
 8004ad2:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 8004ad4:	7b3a      	ldrb	r2, [r7, #12]
 8004ad6:	7b7b      	ldrb	r3, [r7, #13]
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	1c5a      	adds	r2, r3, #1
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	461a      	mov	r2, r3
 8004aee:	7b3b      	ldrb	r3, [r7, #12]
 8004af0:	fa02 f303 	lsl.w	r3, r2, r3
 8004af4:	b25a      	sxtb	r2, r3
 8004af6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	b25b      	sxtb	r3, r3
 8004afe:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 8004b00:	7bbb      	ldrb	r3, [r7, #14]
 8004b02:	3b08      	subs	r3, #8
 8004b04:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 8004b06:	78fb      	ldrb	r3, [r7, #3]
 8004b08:	f04f 32ff 	mov.w	r2, #4294967295
 8004b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	43db      	mvns	r3, r3
 8004b14:	b2da      	uxtb	r2, r3
 8004b16:	7bfb      	ldrb	r3, [r7, #15]
 8004b18:	4013      	ands	r3, r2
 8004b1a:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	7bba      	ldrb	r2, [r7, #14]
 8004b20:	731a      	strb	r2, [r3, #12]
  return val;
 8004b22:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3714      	adds	r7, #20
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr

08004b30 <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b084      	sub	sp, #16
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
 8004b38:	460b      	mov	r3, r1
 8004b3a:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8004b3c:	78fb      	ldrb	r3, [r7, #3]
 8004b3e:	4619      	mov	r1, r3
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f7ff ffaa 	bl	8004a9a <u8g2_font_decode_get_unsigned_bits>
 8004b46:	4603      	mov	r3, r0
 8004b48:	73fb      	strb	r3, [r7, #15]
  d = 1;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	73bb      	strb	r3, [r7, #14]
  cnt--;
 8004b4e:	78fb      	ldrb	r3, [r7, #3]
 8004b50:	3b01      	subs	r3, #1
 8004b52:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 8004b54:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8004b58:	78fb      	ldrb	r3, [r7, #3]
 8004b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b5e:	73bb      	strb	r3, [r7, #14]
  v -= d;
 8004b60:	7bfa      	ldrb	r2, [r7, #15]
 8004b62:	7bbb      	ldrb	r3, [r7, #14]
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	73fb      	strb	r3, [r7, #15]
  return v;
 8004b6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3710      	adds	r7, #16
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}

08004b76 <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 8004b76:	b490      	push	{r4, r7}
 8004b78:	b082      	sub	sp, #8
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	4604      	mov	r4, r0
 8004b7e:	4608      	mov	r0, r1
 8004b80:	4611      	mov	r1, r2
 8004b82:	461a      	mov	r2, r3
 8004b84:	4623      	mov	r3, r4
 8004b86:	80fb      	strh	r3, [r7, #6]
 8004b88:	4603      	mov	r3, r0
 8004b8a:	717b      	strb	r3, [r7, #5]
 8004b8c:	460b      	mov	r3, r1
 8004b8e:	713b      	strb	r3, [r7, #4]
 8004b90:	4613      	mov	r3, r2
 8004b92:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 8004b94:	78fb      	ldrb	r3, [r7, #3]
 8004b96:	2b02      	cmp	r3, #2
 8004b98:	d014      	beq.n	8004bc4 <u8g2_add_vector_y+0x4e>
 8004b9a:	2b02      	cmp	r3, #2
 8004b9c:	dc19      	bgt.n	8004bd2 <u8g2_add_vector_y+0x5c>
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d002      	beq.n	8004ba8 <u8g2_add_vector_y+0x32>
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d007      	beq.n	8004bb6 <u8g2_add_vector_y+0x40>
 8004ba6:	e014      	b.n	8004bd2 <u8g2_add_vector_y+0x5c>
  {
    case 0:
      dy += y;
 8004ba8:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8004bac:	b29a      	uxth	r2, r3
 8004bae:	88fb      	ldrh	r3, [r7, #6]
 8004bb0:	4413      	add	r3, r2
 8004bb2:	80fb      	strh	r3, [r7, #6]
      break;
 8004bb4:	e014      	b.n	8004be0 <u8g2_add_vector_y+0x6a>
    case 1:
      dy += x;
 8004bb6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8004bba:	b29a      	uxth	r2, r3
 8004bbc:	88fb      	ldrh	r3, [r7, #6]
 8004bbe:	4413      	add	r3, r2
 8004bc0:	80fb      	strh	r3, [r7, #6]
      break;
 8004bc2:	e00d      	b.n	8004be0 <u8g2_add_vector_y+0x6a>
    case 2:
      dy -= y;
 8004bc4:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	88fa      	ldrh	r2, [r7, #6]
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	80fb      	strh	r3, [r7, #6]
      break;
 8004bd0:	e006      	b.n	8004be0 <u8g2_add_vector_y+0x6a>
    default:
      dy -= x;
 8004bd2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	88fa      	ldrh	r2, [r7, #6]
 8004bda:	1ad3      	subs	r3, r2, r3
 8004bdc:	80fb      	strh	r3, [r7, #6]
      break;      
 8004bde:	bf00      	nop
  }
  return dy;
 8004be0:	88fb      	ldrh	r3, [r7, #6]
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3708      	adds	r7, #8
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bc90      	pop	{r4, r7}
 8004bea:	4770      	bx	lr

08004bec <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 8004bec:	b490      	push	{r4, r7}
 8004bee:	b082      	sub	sp, #8
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	4604      	mov	r4, r0
 8004bf4:	4608      	mov	r0, r1
 8004bf6:	4611      	mov	r1, r2
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	4623      	mov	r3, r4
 8004bfc:	80fb      	strh	r3, [r7, #6]
 8004bfe:	4603      	mov	r3, r0
 8004c00:	717b      	strb	r3, [r7, #5]
 8004c02:	460b      	mov	r3, r1
 8004c04:	713b      	strb	r3, [r7, #4]
 8004c06:	4613      	mov	r3, r2
 8004c08:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 8004c0a:	78fb      	ldrb	r3, [r7, #3]
 8004c0c:	2b02      	cmp	r3, #2
 8004c0e:	d014      	beq.n	8004c3a <u8g2_add_vector_x+0x4e>
 8004c10:	2b02      	cmp	r3, #2
 8004c12:	dc19      	bgt.n	8004c48 <u8g2_add_vector_x+0x5c>
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d002      	beq.n	8004c1e <u8g2_add_vector_x+0x32>
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d007      	beq.n	8004c2c <u8g2_add_vector_x+0x40>
 8004c1c:	e014      	b.n	8004c48 <u8g2_add_vector_x+0x5c>
  {
    case 0:
      dx += x;
 8004c1e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8004c22:	b29a      	uxth	r2, r3
 8004c24:	88fb      	ldrh	r3, [r7, #6]
 8004c26:	4413      	add	r3, r2
 8004c28:	80fb      	strh	r3, [r7, #6]
      break;
 8004c2a:	e014      	b.n	8004c56 <u8g2_add_vector_x+0x6a>
    case 1:
      dx -= y;
 8004c2c:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	88fa      	ldrh	r2, [r7, #6]
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	80fb      	strh	r3, [r7, #6]
      break;
 8004c38:	e00d      	b.n	8004c56 <u8g2_add_vector_x+0x6a>
    case 2:
      dx -= x;
 8004c3a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	88fa      	ldrh	r2, [r7, #6]
 8004c42:	1ad3      	subs	r3, r2, r3
 8004c44:	80fb      	strh	r3, [r7, #6]
      break;
 8004c46:	e006      	b.n	8004c56 <u8g2_add_vector_x+0x6a>
    default:
      dx += y;
 8004c48:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8004c4c:	b29a      	uxth	r2, r3
 8004c4e:	88fb      	ldrh	r3, [r7, #6]
 8004c50:	4413      	add	r3, r2
 8004c52:	80fb      	strh	r3, [r7, #6]
      break;      
 8004c54:	bf00      	nop
  }
  return dx;
 8004c56:	88fb      	ldrh	r3, [r7, #6]
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3708      	adds	r7, #8
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bc90      	pop	{r4, r7}
 8004c60:	4770      	bx	lr

08004c62 <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 8004c62:	b580      	push	{r7, lr}
 8004c64:	b088      	sub	sp, #32
 8004c66:	af02      	add	r7, sp, #8
 8004c68:	6078      	str	r0, [r7, #4]
 8004c6a:	460b      	mov	r3, r1
 8004c6c:	70fb      	strb	r3, [r7, #3]
 8004c6e:	4613      	mov	r3, r2
 8004c70:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	3360      	adds	r3, #96	; 0x60
 8004c76:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 8004c78:	78fb      	ldrb	r3, [r7, #3]
 8004c7a:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8004c82:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8004c8a:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8004c92:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 8004c94:	7bfa      	ldrb	r2, [r7, #15]
 8004c96:	7d7b      	ldrb	r3, [r7, #21]
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 8004c9c:	7bfb      	ldrb	r3, [r7, #15]
 8004c9e:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 8004ca0:	7dfa      	ldrb	r2, [r7, #23]
 8004ca2:	7bfb      	ldrb	r3, [r7, #15]
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d201      	bcs.n	8004cac <u8g2_font_decode_len+0x4a>
      current = cnt;
 8004ca8:	7dfb      	ldrb	r3, [r7, #23]
 8004caa:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	889b      	ldrh	r3, [r3, #4]
 8004cb0:	81bb      	strh	r3, [r7, #12]
    y = decode->target_y;
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	88db      	ldrh	r3, [r3, #6]
 8004cb6:	817b      	strh	r3, [r7, #10]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8004cb8:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8004cbc:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	7c1b      	ldrb	r3, [r3, #16]
 8004cc4:	89b8      	ldrh	r0, [r7, #12]
 8004cc6:	f7ff ff91 	bl	8004bec <u8g2_add_vector_x>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	81bb      	strh	r3, [r7, #12]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 8004cce:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8004cd2:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	7c1b      	ldrb	r3, [r3, #16]
 8004cda:	8978      	ldrh	r0, [r7, #10]
 8004cdc:	f7ff ff4b 	bl	8004b76 <u8g2_add_vector_y>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	817b      	strh	r3, [r7, #10]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 8004ce4:	78bb      	ldrb	r3, [r7, #2]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d010      	beq.n	8004d0c <u8g2_font_decode_len+0xaa>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	7b9a      	ldrb	r2, [r3, #14]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 8004cf4:	7dbb      	ldrb	r3, [r7, #22]
 8004cf6:	b298      	uxth	r0, r3
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	7c1b      	ldrb	r3, [r3, #16]
 8004cfc:	897a      	ldrh	r2, [r7, #10]
 8004cfe:	89b9      	ldrh	r1, [r7, #12]
 8004d00:	9300      	str	r3, [sp, #0]
 8004d02:	4603      	mov	r3, r0
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f000 fbfe 	bl	8005506 <u8g2_DrawHVLine>
 8004d0a:	e013      	b.n	8004d34 <u8g2_font_decode_len+0xd2>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	7b5b      	ldrb	r3, [r3, #13]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d10f      	bne.n	8004d34 <u8g2_font_decode_len+0xd2>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	7bda      	ldrb	r2, [r3, #15]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 8004d1e:	7dbb      	ldrb	r3, [r7, #22]
 8004d20:	b298      	uxth	r0, r3
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	7c1b      	ldrb	r3, [r3, #16]
 8004d26:	897a      	ldrh	r2, [r7, #10]
 8004d28:	89b9      	ldrh	r1, [r7, #12]
 8004d2a:	9300      	str	r3, [sp, #0]
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f000 fbe9 	bl	8005506 <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8004d34:	7dfa      	ldrb	r2, [r7, #23]
 8004d36:	7bfb      	ldrb	r3, [r7, #15]
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d309      	bcc.n	8004d50 <u8g2_font_decode_len+0xee>
      break;
    cnt -= rem;
 8004d3c:	7dfa      	ldrb	r2, [r7, #23]
 8004d3e:	7bfb      	ldrb	r3, [r7, #15]
 8004d40:	1ad3      	subs	r3, r2, r3
 8004d42:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 8004d44:	2300      	movs	r3, #0
 8004d46:	757b      	strb	r3, [r7, #21]
    ly++;
 8004d48:	7d3b      	ldrb	r3, [r7, #20]
 8004d4a:	3301      	adds	r3, #1
 8004d4c:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 8004d4e:	e79d      	b.n	8004c8c <u8g2_font_decode_len+0x2a>
      break;
 8004d50:	bf00      	nop
  }
  lx += cnt;
 8004d52:	7d7a      	ldrb	r2, [r7, #21]
 8004d54:	7dfb      	ldrb	r3, [r7, #23]
 8004d56:	4413      	add	r3, r2
 8004d58:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 8004d5a:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	721a      	strb	r2, [r3, #8]
  decode->y = ly;  
 8004d62:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	725a      	strb	r2, [r3, #9]
}
 8004d6a:	bf00      	nop
 8004d6c:	3718      	adds	r7, #24
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}

08004d72 <u8g2_font_setup_decode>:
  
}


static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8004d72:	b580      	push	{r7, lr}
 8004d74:	b084      	sub	sp, #16
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	6078      	str	r0, [r7, #4]
 8004d7a:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	3360      	adds	r3, #96	; 0x60
 8004d80:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	683a      	ldr	r2, [r7, #0]
 8004d86:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	731a      	strb	r2, [r3, #12]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8004d94:	4619      	mov	r1, r3
 8004d96:	68f8      	ldr	r0, [r7, #12]
 8004d98:	f7ff fe7f 	bl	8004a9a <u8g2_font_decode_get_unsigned_bits>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	b25a      	sxtb	r2, r3
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	729a      	strb	r2, [r3, #10]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8004daa:	4619      	mov	r1, r3
 8004dac:	68f8      	ldr	r0, [r7, #12]
 8004dae:	f7ff fe74 	bl	8004a9a <u8g2_font_decode_get_unsigned_bits>
 8004db2:	4603      	mov	r3, r0
 8004db4:	b25a      	sxtb	r2, r3
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	72da      	strb	r2, [r3, #11]
  
  decode->fg_color = u8g2->draw_color;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f893 2092 	ldrb.w	r2, [r3, #146]	; 0x92
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	739a      	strb	r2, [r3, #14]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	7b9b      	ldrb	r3, [r3, #14]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	bf0c      	ite	eq
 8004dcc:	2301      	moveq	r3, #1
 8004dce:	2300      	movne	r3, #0
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	73da      	strb	r2, [r3, #15]
}
 8004dd8:	bf00      	nop
 8004dda:	3710      	adds	r7, #16
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}

08004de0 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b08a      	sub	sp, #40	; 0x28
 8004de4:	af02      	add	r7, sp, #8
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	3360      	adds	r3, #96	; 0x60
 8004dee:	617b      	str	r3, [r7, #20]
    
  u8g2_font_setup_decode(u8g2, glyph_data);     /* set values in u8g2->font_decode data structure */
 8004df0:	6839      	ldr	r1, [r7, #0]
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f7ff ffbd 	bl	8004d72 <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8004dfe:	74fb      	strb	r3, [r7, #19]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8004e06:	4619      	mov	r1, r3
 8004e08:	6978      	ldr	r0, [r7, #20]
 8004e0a:	f7ff fe91 	bl	8004b30 <u8g2_font_decode_get_signed_bits>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	74bb      	strb	r3, [r7, #18]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8004e18:	4619      	mov	r1, r3
 8004e1a:	6978      	ldr	r0, [r7, #20]
 8004e1c:	f7ff fe88 	bl	8004b30 <u8g2_font_decode_get_signed_bits>
 8004e20:	4603      	mov	r3, r0
 8004e22:	747b      	strb	r3, [r7, #17]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004e2a:	4619      	mov	r1, r3
 8004e2c:	6978      	ldr	r0, [r7, #20]
 8004e2e:	f7ff fe7f 	bl	8004b30 <u8g2_font_decode_get_signed_bits>
 8004e32:	4603      	mov	r3, r0
 8004e34:	743b      	strb	r3, [r7, #16]
  
  if ( decode->glyph_width > 0 )
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	f340 80d7 	ble.w	8004ff0 <u8g2_font_decode_glyph+0x210>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	8898      	ldrh	r0, [r3, #4]
 8004e46:	7cfa      	ldrb	r2, [r7, #19]
 8004e48:	7c7b      	ldrb	r3, [r7, #17]
 8004e4a:	4413      	add	r3, r2
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	425b      	negs	r3, r3
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	b25a      	sxtb	r2, r3
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	7c1b      	ldrb	r3, [r3, #16]
 8004e58:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8004e5c:	f7ff fec6 	bl	8004bec <u8g2_add_vector_x>
 8004e60:	4603      	mov	r3, r0
 8004e62:	461a      	mov	r2, r3
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	809a      	strh	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	88d8      	ldrh	r0, [r3, #6]
 8004e6c:	7cfa      	ldrb	r2, [r7, #19]
 8004e6e:	7c7b      	ldrb	r3, [r7, #17]
 8004e70:	4413      	add	r3, r2
 8004e72:	b2db      	uxtb	r3, r3
 8004e74:	425b      	negs	r3, r3
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	b25a      	sxtb	r2, r3
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	7c1b      	ldrb	r3, [r3, #16]
 8004e7e:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8004e82:	f7ff fe78 	bl	8004b76 <u8g2_add_vector_y>
 8004e86:	4603      	mov	r3, r0
 8004e88:	461a      	mov	r2, r3
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	80da      	strh	r2, [r3, #6]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	889b      	ldrh	r3, [r3, #4]
 8004e92:	83fb      	strh	r3, [r7, #30]
      y0 = decode->target_y;
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	88db      	ldrh	r3, [r3, #6]
 8004e98:	837b      	strh	r3, [r7, #26]
      x1 = x0;
 8004e9a:	8bfb      	ldrh	r3, [r7, #30]
 8004e9c:	83bb      	strh	r3, [r7, #28]
      y1 = y0;
 8004e9e:	8b7b      	ldrh	r3, [r7, #26]
 8004ea0:	833b      	strh	r3, [r7, #24]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	7c1b      	ldrb	r3, [r3, #16]
 8004ea6:	2b03      	cmp	r3, #3
 8004ea8:	d85a      	bhi.n	8004f60 <u8g2_font_decode_glyph+0x180>
 8004eaa:	a201      	add	r2, pc, #4	; (adr r2, 8004eb0 <u8g2_font_decode_glyph+0xd0>)
 8004eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eb0:	08004ec1 	.word	0x08004ec1
 8004eb4:	08004edd 	.word	0x08004edd
 8004eb8:	08004f05 	.word	0x08004f05
 8004ebc:	08004f39 	.word	0x08004f39
      {
	case 0:
	    x1 += decode->glyph_width;
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8004ec6:	b29a      	uxth	r2, r3
 8004ec8:	8bbb      	ldrh	r3, [r7, #28]
 8004eca:	4413      	add	r3, r2
 8004ecc:	83bb      	strh	r3, [r7, #28]
	    y1 += h;
 8004ece:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004ed2:	b29a      	uxth	r2, r3
 8004ed4:	8b3b      	ldrh	r3, [r7, #24]
 8004ed6:	4413      	add	r3, r2
 8004ed8:	833b      	strh	r3, [r7, #24]
	    break;
 8004eda:	e041      	b.n	8004f60 <u8g2_font_decode_glyph+0x180>
	case 1:
	    x0 -= h;
 8004edc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	8bfa      	ldrh	r2, [r7, #30]
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8004ee8:	8bfb      	ldrh	r3, [r7, #30]
 8004eea:	3301      	adds	r3, #1
 8004eec:	83fb      	strh	r3, [r7, #30]
	    x1++;
 8004eee:	8bbb      	ldrh	r3, [r7, #28]
 8004ef0:	3301      	adds	r3, #1
 8004ef2:	83bb      	strh	r3, [r7, #28]
	    y1 += decode->glyph_width;
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8004efa:	b29a      	uxth	r2, r3
 8004efc:	8b3b      	ldrh	r3, [r7, #24]
 8004efe:	4413      	add	r3, r2
 8004f00:	833b      	strh	r3, [r7, #24]
	    break;
 8004f02:	e02d      	b.n	8004f60 <u8g2_font_decode_glyph+0x180>
	case 2:
	    x0 -= decode->glyph_width;
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	8bfa      	ldrh	r2, [r7, #30]
 8004f0e:	1ad3      	subs	r3, r2, r3
 8004f10:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8004f12:	8bfb      	ldrh	r3, [r7, #30]
 8004f14:	3301      	adds	r3, #1
 8004f16:	83fb      	strh	r3, [r7, #30]
	    x1++;
 8004f18:	8bbb      	ldrh	r3, [r7, #28]
 8004f1a:	3301      	adds	r3, #1
 8004f1c:	83bb      	strh	r3, [r7, #28]
	    y0 -= h;
 8004f1e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	8b7a      	ldrh	r2, [r7, #26]
 8004f26:	1ad3      	subs	r3, r2, r3
 8004f28:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8004f2a:	8b7b      	ldrh	r3, [r7, #26]
 8004f2c:	3301      	adds	r3, #1
 8004f2e:	837b      	strh	r3, [r7, #26]
	    y1++;
 8004f30:	8b3b      	ldrh	r3, [r7, #24]
 8004f32:	3301      	adds	r3, #1
 8004f34:	833b      	strh	r3, [r7, #24]
	    break;	  
 8004f36:	e013      	b.n	8004f60 <u8g2_font_decode_glyph+0x180>
	case 3:
	    x1 += h;
 8004f38:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004f3c:	b29a      	uxth	r2, r3
 8004f3e:	8bbb      	ldrh	r3, [r7, #28]
 8004f40:	4413      	add	r3, r2
 8004f42:	83bb      	strh	r3, [r7, #28]
	    y0 -= decode->glyph_width;
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	8b7a      	ldrh	r2, [r7, #26]
 8004f4e:	1ad3      	subs	r3, r2, r3
 8004f50:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8004f52:	8b7b      	ldrh	r3, [r7, #26]
 8004f54:	3301      	adds	r3, #1
 8004f56:	837b      	strh	r3, [r7, #26]
	    y1++;
 8004f58:	8b3b      	ldrh	r3, [r7, #24]
 8004f5a:	3301      	adds	r3, #1
 8004f5c:	833b      	strh	r3, [r7, #24]
	    break;	  
 8004f5e:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8004f60:	8bb8      	ldrh	r0, [r7, #28]
 8004f62:	8b7a      	ldrh	r2, [r7, #26]
 8004f64:	8bf9      	ldrh	r1, [r7, #30]
 8004f66:	8b3b      	ldrh	r3, [r7, #24]
 8004f68:	9300      	str	r3, [sp, #0]
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f000 fbbb 	bl	80056e8 <u8g2_IsIntersection>
 8004f72:	4603      	mov	r3, r0
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d102      	bne.n	8004f7e <u8g2_font_decode_glyph+0x19e>
	return d;
 8004f78:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8004f7c:	e03a      	b.n	8004ff4 <u8g2_font_decode_glyph+0x214>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	2200      	movs	r2, #0
 8004f82:	721a      	strb	r2, [r3, #8]
    decode->y = 0;
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	2200      	movs	r2, #0
 8004f88:	725a      	strb	r2, [r3, #9]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8004f90:	4619      	mov	r1, r3
 8004f92:	6978      	ldr	r0, [r7, #20]
 8004f94:	f7ff fd81 	bl	8004a9a <u8g2_font_decode_get_unsigned_bits>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	73fb      	strb	r3, [r7, #15]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8004fa2:	4619      	mov	r1, r3
 8004fa4:	6978      	ldr	r0, [r7, #20]
 8004fa6:	f7ff fd78 	bl	8004a9a <u8g2_font_decode_get_unsigned_bits>
 8004faa:	4603      	mov	r3, r0
 8004fac:	73bb      	strb	r3, [r7, #14]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 8004fae:	7bfb      	ldrb	r3, [r7, #15]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	4619      	mov	r1, r3
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f7ff fe54 	bl	8004c62 <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 8004fba:	7bbb      	ldrb	r3, [r7, #14]
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f7ff fe4e 	bl	8004c62 <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8004fc6:	2101      	movs	r1, #1
 8004fc8:	6978      	ldr	r0, [r7, #20]
 8004fca:	f7ff fd66 	bl	8004a9a <u8g2_font_decode_get_unsigned_bits>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d1ec      	bne.n	8004fae <u8g2_font_decode_glyph+0x1ce>

      if ( decode->y >= h )
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8004fda:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	dd00      	ble.n	8004fe4 <u8g2_font_decode_glyph+0x204>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8004fe2:	e7d2      	b.n	8004f8a <u8g2_font_decode_glyph+0x1aa>
	break;
 8004fe4:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	7b9a      	ldrb	r2, [r3, #14]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  }
  return d;
 8004ff0:	f997 3010 	ldrsb.w	r3, [r7, #16]
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3720      	adds	r7, #32
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}

08004ffc <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b086      	sub	sp, #24
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	460b      	mov	r3, r1
 8005006:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800500c:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	3317      	adds	r3, #23
 8005012:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 8005014:	887b      	ldrh	r3, [r7, #2]
 8005016:	2bff      	cmp	r3, #255	; 0xff
 8005018:	d82a      	bhi.n	8005070 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 800501a:	887b      	ldrh	r3, [r7, #2]
 800501c:	2b60      	cmp	r3, #96	; 0x60
 800501e:	d907      	bls.n	8005030 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8005026:	461a      	mov	r2, r3
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	4413      	add	r3, r2
 800502c:	617b      	str	r3, [r7, #20]
 800502e:	e009      	b.n	8005044 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 8005030:	887b      	ldrh	r3, [r7, #2]
 8005032:	2b40      	cmp	r3, #64	; 0x40
 8005034:	d906      	bls.n	8005044 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800503c:	461a      	mov	r2, r3
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	4413      	add	r3, r2
 8005042:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	3301      	adds	r3, #1
 8005048:	781b      	ldrb	r3, [r3, #0]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d04e      	beq.n	80050ec <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	781b      	ldrb	r3, [r3, #0]
 8005052:	b29b      	uxth	r3, r3
 8005054:	887a      	ldrh	r2, [r7, #2]
 8005056:	429a      	cmp	r2, r3
 8005058:	d102      	bne.n	8005060 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	3302      	adds	r3, #2
 800505e:	e049      	b.n	80050f4 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	3301      	adds	r3, #1
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	461a      	mov	r2, r3
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	4413      	add	r3, r2
 800506c:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 800506e:	e7e9      	b.n	8005044 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8005076:	461a      	mov	r2, r3
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	4413      	add	r3, r2
 800507c:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 8005082:	2100      	movs	r1, #0
 8005084:	6938      	ldr	r0, [r7, #16]
 8005086:	f7ff fc3f 	bl	8004908 <u8g2_font_get_word>
 800508a:	4603      	mov	r3, r0
 800508c:	461a      	mov	r2, r3
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	4413      	add	r3, r2
 8005092:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 8005094:	2102      	movs	r1, #2
 8005096:	6938      	ldr	r0, [r7, #16]
 8005098:	f7ff fc36 	bl	8004908 <u8g2_font_get_word>
 800509c:	4603      	mov	r3, r0
 800509e:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	3304      	adds	r3, #4
 80050a4:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 80050a6:	89fa      	ldrh	r2, [r7, #14]
 80050a8:	887b      	ldrh	r3, [r7, #2]
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d3e9      	bcc.n	8005082 <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	781b      	ldrb	r3, [r3, #0]
 80050b2:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 80050b4:	89fb      	ldrh	r3, [r7, #14]
 80050b6:	021b      	lsls	r3, r3, #8
 80050b8:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	3301      	adds	r3, #1
 80050be:	781b      	ldrb	r3, [r3, #0]
 80050c0:	b29a      	uxth	r2, r3
 80050c2:	89fb      	ldrh	r3, [r7, #14]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 80050c8:	89fb      	ldrh	r3, [r7, #14]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d010      	beq.n	80050f0 <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 80050ce:	89fa      	ldrh	r2, [r7, #14]
 80050d0:	887b      	ldrh	r3, [r7, #2]
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d102      	bne.n	80050dc <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	3303      	adds	r3, #3
 80050da:	e00b      	b.n	80050f4 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	3302      	adds	r3, #2
 80050e0:	781b      	ldrb	r3, [r3, #0]
 80050e2:	461a      	mov	r2, r3
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	4413      	add	r3, r2
 80050e8:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 80050ea:	e7e0      	b.n	80050ae <u8g2_font_get_glyph_data+0xb2>
	break;
 80050ec:	bf00      	nop
 80050ee:	e000      	b.n	80050f2 <u8g2_font_get_glyph_data+0xf6>
	break;
 80050f0:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 80050f2:	2300      	movs	r3, #0
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3718      	adds	r7, #24
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}

080050fc <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b086      	sub	sp, #24
 8005100:	af00      	add	r7, sp, #0
 8005102:	60f8      	str	r0, [r7, #12]
 8005104:	4608      	mov	r0, r1
 8005106:	4611      	mov	r1, r2
 8005108:	461a      	mov	r2, r3
 800510a:	4603      	mov	r3, r0
 800510c:	817b      	strh	r3, [r7, #10]
 800510e:	460b      	mov	r3, r1
 8005110:	813b      	strh	r3, [r7, #8]
 8005112:	4613      	mov	r3, r2
 8005114:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t dx = 0;
 8005116:	2300      	movs	r3, #0
 8005118:	82fb      	strh	r3, [r7, #22]
  u8g2->font_decode.target_x = x;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	897a      	ldrh	r2, [r7, #10]
 800511e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  u8g2->font_decode.target_y = y;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	893a      	ldrh	r2, [r7, #8]
 8005126:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 800512a:	88fb      	ldrh	r3, [r7, #6]
 800512c:	4619      	mov	r1, r3
 800512e:	68f8      	ldr	r0, [r7, #12]
 8005130:	f7ff ff64 	bl	8004ffc <u8g2_font_get_glyph_data>
 8005134:	6138      	str	r0, [r7, #16]
  if ( glyph_data != NULL )
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d005      	beq.n	8005148 <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 800513c:	6939      	ldr	r1, [r7, #16]
 800513e:	68f8      	ldr	r0, [r7, #12]
 8005140:	f7ff fe4e 	bl	8004de0 <u8g2_font_decode_glyph>
 8005144:	4603      	mov	r3, r0
 8005146:	82fb      	strh	r3, [r7, #22]
  }
  return dx;
 8005148:	8afb      	ldrh	r3, [r7, #22]
}
 800514a:	4618      	mov	r0, r3
 800514c:	3718      	adds	r7, #24
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}
	...

08005154 <u8g2_DrawGlyph>:
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b084      	sub	sp, #16
 8005158:	af00      	add	r7, sp, #0
 800515a:	60f8      	str	r0, [r7, #12]
 800515c:	4608      	mov	r0, r1
 800515e:	4611      	mov	r1, r2
 8005160:	461a      	mov	r2, r3
 8005162:	4603      	mov	r3, r0
 8005164:	817b      	strh	r3, [r7, #10]
 8005166:	460b      	mov	r3, r1
 8005168:	813b      	strh	r3, [r7, #8]
 800516a:	4613      	mov	r3, r2
 800516c:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005174:	2b03      	cmp	r3, #3
 8005176:	d833      	bhi.n	80051e0 <u8g2_DrawGlyph+0x8c>
 8005178:	a201      	add	r2, pc, #4	; (adr r2, 8005180 <u8g2_DrawGlyph+0x2c>)
 800517a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800517e:	bf00      	nop
 8005180:	08005191 	.word	0x08005191
 8005184:	080051a5 	.word	0x080051a5
 8005188:	080051b9 	.word	0x080051b9
 800518c:	080051cd 	.word	0x080051cd
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005194:	68f8      	ldr	r0, [r7, #12]
 8005196:	4798      	blx	r3
 8005198:	4603      	mov	r3, r0
 800519a:	461a      	mov	r2, r3
 800519c:	893b      	ldrh	r3, [r7, #8]
 800519e:	4413      	add	r3, r2
 80051a0:	813b      	strh	r3, [r7, #8]
      break;
 80051a2:	e01d      	b.n	80051e0 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051a8:	68f8      	ldr	r0, [r7, #12]
 80051aa:	4798      	blx	r3
 80051ac:	4603      	mov	r3, r0
 80051ae:	461a      	mov	r2, r3
 80051b0:	897b      	ldrh	r3, [r7, #10]
 80051b2:	1a9b      	subs	r3, r3, r2
 80051b4:	817b      	strh	r3, [r7, #10]
      break;
 80051b6:	e013      	b.n	80051e0 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051bc:	68f8      	ldr	r0, [r7, #12]
 80051be:	4798      	blx	r3
 80051c0:	4603      	mov	r3, r0
 80051c2:	461a      	mov	r2, r3
 80051c4:	893b      	ldrh	r3, [r7, #8]
 80051c6:	1a9b      	subs	r3, r3, r2
 80051c8:	813b      	strh	r3, [r7, #8]
      break;
 80051ca:	e009      	b.n	80051e0 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051d0:	68f8      	ldr	r0, [r7, #12]
 80051d2:	4798      	blx	r3
 80051d4:	4603      	mov	r3, r0
 80051d6:	461a      	mov	r2, r3
 80051d8:	897b      	ldrh	r3, [r7, #10]
 80051da:	4413      	add	r3, r2
 80051dc:	817b      	strh	r3, [r7, #10]
      break;
 80051de:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 80051e0:	88fb      	ldrh	r3, [r7, #6]
 80051e2:	893a      	ldrh	r2, [r7, #8]
 80051e4:	8979      	ldrh	r1, [r7, #10]
 80051e6:	68f8      	ldr	r0, [r7, #12]
 80051e8:	f7ff ff88 	bl	80050fc <u8g2_font_draw_glyph>
 80051ec:	4603      	mov	r3, r0
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3710      	adds	r7, #16
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	bf00      	nop

080051f8 <u8g2_draw_string>:
  return u8g2_font_2x_draw_glyph(u8g2, x, y, encoding);
}

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b086      	sub	sp, #24
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	60f8      	str	r0, [r7, #12]
 8005200:	607b      	str	r3, [r7, #4]
 8005202:	460b      	mov	r3, r1
 8005204:	817b      	strh	r3, [r7, #10]
 8005206:	4613      	mov	r3, r2
 8005208:	813b      	strh	r3, [r7, #8]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 800520a:	68f8      	ldr	r0, [r7, #12]
 800520c:	f000 fd75 	bl	8005cfa <u8x8_utf8_init>
  sum = 0;
 8005210:	2300      	movs	r3, #0
 8005212:	82fb      	strh	r3, [r7, #22]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	7812      	ldrb	r2, [r2, #0]
 800521c:	4611      	mov	r1, r2
 800521e:	68f8      	ldr	r0, [r7, #12]
 8005220:	4798      	blx	r3
 8005222:	4603      	mov	r3, r0
 8005224:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 8005226:	8abb      	ldrh	r3, [r7, #20]
 8005228:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800522c:	4293      	cmp	r3, r2
 800522e:	d038      	beq.n	80052a2 <u8g2_draw_string+0xaa>
      break;
    str++;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	3301      	adds	r3, #1
 8005234:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 8005236:	8abb      	ldrh	r3, [r7, #20]
 8005238:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800523c:	4293      	cmp	r3, r2
 800523e:	d0e9      	beq.n	8005214 <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8005240:	8abb      	ldrh	r3, [r7, #20]
 8005242:	893a      	ldrh	r2, [r7, #8]
 8005244:	8979      	ldrh	r1, [r7, #10]
 8005246:	68f8      	ldr	r0, [r7, #12]
 8005248:	f7ff ff84 	bl	8005154 <u8g2_DrawGlyph>
 800524c:	4603      	mov	r3, r0
 800524e:	827b      	strh	r3, [r7, #18]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005256:	2b03      	cmp	r3, #3
 8005258:	d81e      	bhi.n	8005298 <u8g2_draw_string+0xa0>
 800525a:	a201      	add	r2, pc, #4	; (adr r2, 8005260 <u8g2_draw_string+0x68>)
 800525c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005260:	08005271 	.word	0x08005271
 8005264:	0800527b 	.word	0x0800527b
 8005268:	08005285 	.word	0x08005285
 800526c:	0800528f 	.word	0x0800528f
      {
	case 0:
	  x += delta;
 8005270:	897a      	ldrh	r2, [r7, #10]
 8005272:	8a7b      	ldrh	r3, [r7, #18]
 8005274:	4413      	add	r3, r2
 8005276:	817b      	strh	r3, [r7, #10]
	  break;
 8005278:	e00e      	b.n	8005298 <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 800527a:	893a      	ldrh	r2, [r7, #8]
 800527c:	8a7b      	ldrh	r3, [r7, #18]
 800527e:	4413      	add	r3, r2
 8005280:	813b      	strh	r3, [r7, #8]
	  break;
 8005282:	e009      	b.n	8005298 <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 8005284:	897a      	ldrh	r2, [r7, #10]
 8005286:	8a7b      	ldrh	r3, [r7, #18]
 8005288:	1ad3      	subs	r3, r2, r3
 800528a:	817b      	strh	r3, [r7, #10]
	  break;
 800528c:	e004      	b.n	8005298 <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 800528e:	893a      	ldrh	r2, [r7, #8]
 8005290:	8a7b      	ldrh	r3, [r7, #18]
 8005292:	1ad3      	subs	r3, r2, r3
 8005294:	813b      	strh	r3, [r7, #8]
	  break;
 8005296:	bf00      	nop

#else
      x += delta;
#endif

      sum += delta;    
 8005298:	8afa      	ldrh	r2, [r7, #22]
 800529a:	8a7b      	ldrh	r3, [r7, #18]
 800529c:	4413      	add	r3, r2
 800529e:	82fb      	strh	r3, [r7, #22]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 80052a0:	e7b8      	b.n	8005214 <u8g2_draw_string+0x1c>
      break;
 80052a2:	bf00      	nop
    }
  }
  return sum;
 80052a4:	8afb      	ldrh	r3, [r7, #22]
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3718      	adds	r7, #24
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}
 80052ae:	bf00      	nop

080052b0 <u8g2_DrawStr>:
  }
  return sum;
}

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b084      	sub	sp, #16
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	60f8      	str	r0, [r7, #12]
 80052b8:	607b      	str	r3, [r7, #4]
 80052ba:	460b      	mov	r3, r1
 80052bc:	817b      	strh	r3, [r7, #10]
 80052be:	4613      	mov	r3, r2
 80052c0:	813b      	strh	r3, [r7, #8]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	4a06      	ldr	r2, [pc, #24]	; (80052e0 <u8g2_DrawStr+0x30>)
 80052c6:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 80052c8:	893a      	ldrh	r2, [r7, #8]
 80052ca:	8979      	ldrh	r1, [r7, #10]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	68f8      	ldr	r0, [r7, #12]
 80052d0:	f7ff ff92 	bl	80051f8 <u8g2_draw_string>
 80052d4:	4603      	mov	r3, r0
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3710      	adds	r7, #16
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}
 80052de:	bf00      	nop
 80052e0:	08005d17 	.word	0x08005d17

080052e4 <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b083      	sub	sp, #12
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d05d      	beq.n	80053b0 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f993 2081 	ldrsb.w	r2, [r3, #129]	; 0x81
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f993 2082 	ldrsb.w	r2, [r3, #130]	; 0x82
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8005312:	2b00      	cmp	r3, #0
 8005314:	d04d      	beq.n	80053b2 <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800531c:	2b01      	cmp	r3, #1
 800531e:	d11c      	bne.n	800535a <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f993 208e 	ldrsb.w	r2, [r3, #142]	; 0x8e
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f993 3083 	ldrsb.w	r3, [r3, #131]	; 0x83
 800532c:	429a      	cmp	r2, r3
 800532e:	da05      	bge.n	800533c <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f993 3084 	ldrsb.w	r3, [r3, #132]	; 0x84
 8005348:	429a      	cmp	r2, r3
 800534a:	dd32      	ble.n	80053b2 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f993 2084 	ldrsb.w	r2, [r3, #132]	; 0x84
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 8005358:	e02b      	b.n	80053b2 <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f993 308e 	ldrsb.w	r3, [r3, #142]	; 0x8e
 8005360:	461a      	mov	r2, r3
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8005368:	4619      	mov	r1, r3
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8005370:	440b      	add	r3, r1
 8005372:	429a      	cmp	r2, r3
 8005374:	da0d      	bge.n	8005392 <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 800537c:	b2da      	uxtb	r2, r3
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8005384:	b2db      	uxtb	r3, r3
 8005386:	4413      	add	r3, r2
 8005388:	b2db      	uxtb	r3, r3
 800538a:	b25a      	sxtb	r2, r3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 800539e:	429a      	cmp	r2, r3
 80053a0:	dd07      	ble.n	80053b2 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f993 2080 	ldrsb.w	r2, [r3, #128]	; 0x80
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 80053ae:	e000      	b.n	80053b2 <u8g2_UpdateRefHeight+0xce>
    return;
 80053b0:	bf00      	nop
  }  
}
 80053b2:	370c      	adds	r7, #12
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  return 0;
 80053c4:	2300      	movs	r3, #0
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	370c      	adds	r7, #12
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr
	...

080053d4 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b083      	sub	sp, #12
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	4a04      	ldr	r2, [pc, #16]	; (80053f0 <u8g2_SetFontPosBaseline+0x1c>)
 80053e0:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80053e2:	bf00      	nop
 80053e4:	370c      	adds	r7, #12
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr
 80053ee:	bf00      	nop
 80053f0:	080053bd 	.word	0x080053bd

080053f4 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b082      	sub	sp, #8
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005402:	683a      	ldr	r2, [r7, #0]
 8005404:	429a      	cmp	r2, r3
 8005406:	d00b      	beq.n	8005420 <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	683a      	ldr	r2, [r7, #0]
 800540c:	659a      	str	r2, [r3, #88]	; 0x58
    u8g2_read_font_info(&(u8g2->font_info), font);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	3374      	adds	r3, #116	; 0x74
 8005412:	6839      	ldr	r1, [r7, #0]
 8005414:	4618      	mov	r0, r3
 8005416:	f7ff fa97 	bl	8004948 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f7ff ff62 	bl	80052e4 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 8005420:	bf00      	nop
 8005422:	3708      	adds	r7, #8
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}

08005428 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 8005428:	b480      	push	{r7}
 800542a:	b087      	sub	sp, #28
 800542c:	af00      	add	r7, sp, #0
 800542e:	60f8      	str	r0, [r7, #12]
 8005430:	60b9      	str	r1, [r7, #8]
 8005432:	4611      	mov	r1, r2
 8005434:	461a      	mov	r2, r3
 8005436:	460b      	mov	r3, r1
 8005438:	80fb      	strh	r3, [r7, #6]
 800543a:	4613      	mov	r3, r2
 800543c:	80bb      	strh	r3, [r7, #4]
  u8g2_uint_t a = *ap;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	881b      	ldrh	r3, [r3, #0]
 8005442:	82fb      	strh	r3, [r7, #22]
  u8g2_uint_t b;
  b  = a;
 8005444:	8afb      	ldrh	r3, [r7, #22]
 8005446:	82bb      	strh	r3, [r7, #20]
  b += *len;
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	881a      	ldrh	r2, [r3, #0]
 800544c:	8abb      	ldrh	r3, [r7, #20]
 800544e:	4413      	add	r3, r2
 8005450:	82bb      	strh	r3, [r7, #20]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 8005452:	8afa      	ldrh	r2, [r7, #22]
 8005454:	8abb      	ldrh	r3, [r7, #20]
 8005456:	429a      	cmp	r2, r3
 8005458:	d90b      	bls.n	8005472 <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 800545a:	8afa      	ldrh	r2, [r7, #22]
 800545c:	88bb      	ldrh	r3, [r7, #4]
 800545e:	429a      	cmp	r2, r3
 8005460:	d205      	bcs.n	800546e <u8g2_clip_intersection2+0x46>
    {
      b = d;
 8005462:	88bb      	ldrh	r3, [r7, #4]
 8005464:	82bb      	strh	r3, [r7, #20]
      b--;
 8005466:	8abb      	ldrh	r3, [r7, #20]
 8005468:	3b01      	subs	r3, #1
 800546a:	82bb      	strh	r3, [r7, #20]
 800546c:	e001      	b.n	8005472 <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 800546e:	88fb      	ldrh	r3, [r7, #6]
 8005470:	82fb      	strh	r3, [r7, #22]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 8005472:	8afa      	ldrh	r2, [r7, #22]
 8005474:	88bb      	ldrh	r3, [r7, #4]
 8005476:	429a      	cmp	r2, r3
 8005478:	d301      	bcc.n	800547e <u8g2_clip_intersection2+0x56>
    return 0;
 800547a:	2300      	movs	r3, #0
 800547c:	e01c      	b.n	80054b8 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 800547e:	8aba      	ldrh	r2, [r7, #20]
 8005480:	88fb      	ldrh	r3, [r7, #6]
 8005482:	429a      	cmp	r2, r3
 8005484:	d801      	bhi.n	800548a <u8g2_clip_intersection2+0x62>
    return 0;
 8005486:	2300      	movs	r3, #0
 8005488:	e016      	b.n	80054b8 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 800548a:	8afa      	ldrh	r2, [r7, #22]
 800548c:	88fb      	ldrh	r3, [r7, #6]
 800548e:	429a      	cmp	r2, r3
 8005490:	d201      	bcs.n	8005496 <u8g2_clip_intersection2+0x6e>
    a = c;
 8005492:	88fb      	ldrh	r3, [r7, #6]
 8005494:	82fb      	strh	r3, [r7, #22]
  if ( b > d )
 8005496:	8aba      	ldrh	r2, [r7, #20]
 8005498:	88bb      	ldrh	r3, [r7, #4]
 800549a:	429a      	cmp	r2, r3
 800549c:	d901      	bls.n	80054a2 <u8g2_clip_intersection2+0x7a>
    b = d;
 800549e:	88bb      	ldrh	r3, [r7, #4]
 80054a0:	82bb      	strh	r3, [r7, #20]
  
  *ap = a;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	8afa      	ldrh	r2, [r7, #22]
 80054a6:	801a      	strh	r2, [r3, #0]
  b -= a;
 80054a8:	8aba      	ldrh	r2, [r7, #20]
 80054aa:	8afb      	ldrh	r3, [r7, #22]
 80054ac:	1ad3      	subs	r3, r2, r3
 80054ae:	82bb      	strh	r3, [r7, #20]
  *len = b;
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	8aba      	ldrh	r2, [r7, #20]
 80054b4:	801a      	strh	r2, [r3, #0]
  return 1;
 80054b6:	2301      	movs	r3, #1
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	371c      	adds	r7, #28
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr

080054c4 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80054c4:	b590      	push	{r4, r7, lr}
 80054c6:	b087      	sub	sp, #28
 80054c8:	af02      	add	r7, sp, #8
 80054ca:	60f8      	str	r0, [r7, #12]
 80054cc:	4608      	mov	r0, r1
 80054ce:	4611      	mov	r1, r2
 80054d0:	461a      	mov	r2, r3
 80054d2:	4603      	mov	r3, r0
 80054d4:	817b      	strh	r3, [r7, #10]
 80054d6:	460b      	mov	r3, r1
 80054d8:	813b      	strh	r3, [r7, #8]
 80054da:	4613      	mov	r3, r2
 80054dc:	80fb      	strh	r3, [r7, #6]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054e2:	893a      	ldrh	r2, [r7, #8]
 80054e4:	1ad3      	subs	r3, r2, r3
 80054e6:	813b      	strh	r3, [r7, #8]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80054ec:	88f8      	ldrh	r0, [r7, #6]
 80054ee:	893a      	ldrh	r2, [r7, #8]
 80054f0:	8979      	ldrh	r1, [r7, #10]
 80054f2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80054f6:	9300      	str	r3, [sp, #0]
 80054f8:	4603      	mov	r3, r0
 80054fa:	68f8      	ldr	r0, [r7, #12]
 80054fc:	47a0      	blx	r4
}
 80054fe:	bf00      	nop
 8005500:	3714      	adds	r7, #20
 8005502:	46bd      	mov	sp, r7
 8005504:	bd90      	pop	{r4, r7, pc}

08005506 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8005506:	b590      	push	{r4, r7, lr}
 8005508:	b087      	sub	sp, #28
 800550a:	af02      	add	r7, sp, #8
 800550c:	60f8      	str	r0, [r7, #12]
 800550e:	4608      	mov	r0, r1
 8005510:	4611      	mov	r1, r2
 8005512:	461a      	mov	r2, r3
 8005514:	4603      	mov	r3, r0
 8005516:	817b      	strh	r3, [r7, #10]
 8005518:	460b      	mov	r3, r1
 800551a:	813b      	strh	r3, [r7, #8]
 800551c:	4613      	mov	r3, r2
 800551e:	80fb      	strh	r3, [r7, #6]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8005526:	2b00      	cmp	r3, #0
 8005528:	d075      	beq.n	8005616 <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 800552a:	88fb      	ldrh	r3, [r7, #6]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d072      	beq.n	8005616 <u8g2_DrawHVLine+0x110>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8005530:	88fb      	ldrh	r3, [r7, #6]
 8005532:	2b01      	cmp	r3, #1
 8005534:	d91a      	bls.n	800556c <u8g2_DrawHVLine+0x66>
      {
	if ( dir == 2 )
 8005536:	f897 3020 	ldrb.w	r3, [r7, #32]
 800553a:	2b02      	cmp	r3, #2
 800553c:	d109      	bne.n	8005552 <u8g2_DrawHVLine+0x4c>
	{
	  x -= len;
 800553e:	897a      	ldrh	r2, [r7, #10]
 8005540:	88fb      	ldrh	r3, [r7, #6]
 8005542:	1ad3      	subs	r3, r2, r3
 8005544:	b29b      	uxth	r3, r3
 8005546:	817b      	strh	r3, [r7, #10]
	  x++;
 8005548:	897b      	ldrh	r3, [r7, #10]
 800554a:	3301      	adds	r3, #1
 800554c:	b29b      	uxth	r3, r3
 800554e:	817b      	strh	r3, [r7, #10]
 8005550:	e00c      	b.n	800556c <u8g2_DrawHVLine+0x66>
	}
	else if ( dir == 3 )
 8005552:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005556:	2b03      	cmp	r3, #3
 8005558:	d108      	bne.n	800556c <u8g2_DrawHVLine+0x66>
	{
	  y -= len;
 800555a:	893a      	ldrh	r2, [r7, #8]
 800555c:	88fb      	ldrh	r3, [r7, #6]
 800555e:	1ad3      	subs	r3, r2, r3
 8005560:	b29b      	uxth	r3, r3
 8005562:	813b      	strh	r3, [r7, #8]
	  y++;
 8005564:	893b      	ldrh	r3, [r7, #8]
 8005566:	3301      	adds	r3, #1
 8005568:	b29b      	uxth	r3, r3
 800556a:	813b      	strh	r3, [r7, #8]
	}
      }
      dir &= 1;  
 800556c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005570:	f003 0301 	and.w	r3, r3, #1
 8005574:	f887 3020 	strb.w	r3, [r7, #32]
      
      /* clip against the user window */
      if ( dir == 0 )
 8005578:	f897 3020 	ldrb.w	r3, [r7, #32]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d11a      	bne.n	80055b6 <u8g2_DrawHVLine+0xb0>
      {
	if ( y < u8g2->user_y0 )
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8005586:	893b      	ldrh	r3, [r7, #8]
 8005588:	429a      	cmp	r2, r3
 800558a:	d83b      	bhi.n	8005604 <u8g2_DrawHVLine+0xfe>
	  return;
	if ( y >= u8g2->user_y1 )
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8005592:	893b      	ldrh	r3, [r7, #8]
 8005594:	429a      	cmp	r2, r3
 8005596:	d937      	bls.n	8005608 <u8g2_DrawHVLine+0x102>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80055a4:	1db9      	adds	r1, r7, #6
 80055a6:	f107 000a 	add.w	r0, r7, #10
 80055aa:	f7ff ff3d 	bl	8005428 <u8g2_clip_intersection2>
 80055ae:	4603      	mov	r3, r0
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d11a      	bne.n	80055ea <u8g2_DrawHVLine+0xe4>
	  return;
 80055b4:	e02f      	b.n	8005616 <u8g2_DrawHVLine+0x110>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80055bc:	897b      	ldrh	r3, [r7, #10]
 80055be:	429a      	cmp	r2, r3
 80055c0:	d824      	bhi.n	800560c <u8g2_DrawHVLine+0x106>
	  return;
	if ( x >= u8g2->user_x1 )
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80055c8:	897b      	ldrh	r3, [r7, #10]
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d920      	bls.n	8005610 <u8g2_DrawHVLine+0x10a>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 80055da:	1db9      	adds	r1, r7, #6
 80055dc:	f107 0008 	add.w	r0, r7, #8
 80055e0:	f7ff ff22 	bl	8005428 <u8g2_clip_intersection2>
 80055e4:	4603      	mov	r3, r0
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d014      	beq.n	8005614 <u8g2_DrawHVLine+0x10e>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ee:	689c      	ldr	r4, [r3, #8]
 80055f0:	8979      	ldrh	r1, [r7, #10]
 80055f2:	893a      	ldrh	r2, [r7, #8]
 80055f4:	88f8      	ldrh	r0, [r7, #6]
 80055f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80055fa:	9300      	str	r3, [sp, #0]
 80055fc:	4603      	mov	r3, r0
 80055fe:	68f8      	ldr	r0, [r7, #12]
 8005600:	47a0      	blx	r4
 8005602:	e008      	b.n	8005616 <u8g2_DrawHVLine+0x110>
	  return;
 8005604:	bf00      	nop
 8005606:	e006      	b.n	8005616 <u8g2_DrawHVLine+0x110>
	  return;
 8005608:	bf00      	nop
 800560a:	e004      	b.n	8005616 <u8g2_DrawHVLine+0x110>
	  return;
 800560c:	bf00      	nop
 800560e:	e002      	b.n	8005616 <u8g2_DrawHVLine+0x110>
	  return;
 8005610:	bf00      	nop
 8005612:	e000      	b.n	8005616 <u8g2_DrawHVLine+0x110>
	  return;
 8005614:	bf00      	nop
    }
}
 8005616:	3714      	adds	r7, #20
 8005618:	46bd      	mov	sp, r7
 800561a:	bd90      	pop	{r4, r7, pc}

0800561c <u8g2_DrawPixel>:
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
}

void u8g2_DrawPixel(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b084      	sub	sp, #16
 8005620:	af02      	add	r7, sp, #8
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	460b      	mov	r3, r1
 8005626:	807b      	strh	r3, [r7, #2]
 8005628:	4613      	mov	r3, r2
 800562a:	803b      	strh	r3, [r7, #0]
#ifdef U8G2_WITH_INTERSECTION
  if ( y < u8g2->user_y0 )
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8005632:	883a      	ldrh	r2, [r7, #0]
 8005634:	429a      	cmp	r2, r3
 8005636:	d31a      	bcc.n	800566e <u8g2_DrawPixel+0x52>
    return;
  if ( y >= u8g2->user_y1 )
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800563e:	883a      	ldrh	r2, [r7, #0]
 8005640:	429a      	cmp	r2, r3
 8005642:	d216      	bcs.n	8005672 <u8g2_DrawPixel+0x56>
    return;
  if ( x < u8g2->user_x0 )
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800564a:	887a      	ldrh	r2, [r7, #2]
 800564c:	429a      	cmp	r2, r3
 800564e:	d312      	bcc.n	8005676 <u8g2_DrawPixel+0x5a>
    return;
  if ( x >= u8g2->user_x1 )
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8005656:	887a      	ldrh	r2, [r7, #2]
 8005658:	429a      	cmp	r2, r3
 800565a:	d20e      	bcs.n	800567a <u8g2_DrawPixel+0x5e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 800565c:	883a      	ldrh	r2, [r7, #0]
 800565e:	8879      	ldrh	r1, [r7, #2]
 8005660:	2300      	movs	r3, #0
 8005662:	9300      	str	r3, [sp, #0]
 8005664:	2301      	movs	r3, #1
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f7ff ff4d 	bl	8005506 <u8g2_DrawHVLine>
 800566c:	e006      	b.n	800567c <u8g2_DrawPixel+0x60>
    return;
 800566e:	bf00      	nop
 8005670:	e004      	b.n	800567c <u8g2_DrawPixel+0x60>
    return;
 8005672:	bf00      	nop
 8005674:	e002      	b.n	800567c <u8g2_DrawPixel+0x60>
    return;
 8005676:	bf00      	nop
 8005678:	e000      	b.n	800567c <u8g2_DrawPixel+0x60>
    return;
 800567a:	bf00      	nop
}
 800567c:	3708      	adds	r7, #8
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}

08005682 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8005682:	b490      	push	{r4, r7}
 8005684:	b082      	sub	sp, #8
 8005686:	af00      	add	r7, sp, #0
 8005688:	4604      	mov	r4, r0
 800568a:	4608      	mov	r0, r1
 800568c:	4611      	mov	r1, r2
 800568e:	461a      	mov	r2, r3
 8005690:	4623      	mov	r3, r4
 8005692:	80fb      	strh	r3, [r7, #6]
 8005694:	4603      	mov	r3, r0
 8005696:	80bb      	strh	r3, [r7, #4]
 8005698:	460b      	mov	r3, r1
 800569a:	807b      	strh	r3, [r7, #2]
 800569c:	4613      	mov	r3, r2
 800569e:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 80056a0:	887a      	ldrh	r2, [r7, #2]
 80056a2:	88bb      	ldrh	r3, [r7, #4]
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d20d      	bcs.n	80056c4 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 80056a8:	883a      	ldrh	r2, [r7, #0]
 80056aa:	88fb      	ldrh	r3, [r7, #6]
 80056ac:	429a      	cmp	r2, r3
 80056ae:	d901      	bls.n	80056b4 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 80056b0:	2301      	movs	r3, #1
 80056b2:	e014      	b.n	80056de <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 80056b4:	887a      	ldrh	r2, [r7, #2]
 80056b6:	883b      	ldrh	r3, [r7, #0]
 80056b8:	429a      	cmp	r2, r3
 80056ba:	d901      	bls.n	80056c0 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 80056bc:	2301      	movs	r3, #1
 80056be:	e00e      	b.n	80056de <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 80056c0:	2300      	movs	r3, #0
 80056c2:	e00c      	b.n	80056de <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 80056c4:	883a      	ldrh	r2, [r7, #0]
 80056c6:	88fb      	ldrh	r3, [r7, #6]
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d907      	bls.n	80056dc <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 80056cc:	887a      	ldrh	r2, [r7, #2]
 80056ce:	883b      	ldrh	r3, [r7, #0]
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d901      	bls.n	80056d8 <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 80056d4:	2301      	movs	r3, #1
 80056d6:	e002      	b.n	80056de <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 80056d8:	2300      	movs	r3, #0
 80056da:	e000      	b.n	80056de <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 80056dc:	2300      	movs	r3, #0
    }
  }
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3708      	adds	r7, #8
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bc90      	pop	{r4, r7}
 80056e6:	4770      	bx	lr

080056e8 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b084      	sub	sp, #16
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	60f8      	str	r0, [r7, #12]
 80056f0:	4608      	mov	r0, r1
 80056f2:	4611      	mov	r1, r2
 80056f4:	461a      	mov	r2, r3
 80056f6:	4603      	mov	r3, r0
 80056f8:	817b      	strh	r3, [r7, #10]
 80056fa:	460b      	mov	r3, r1
 80056fc:	813b      	strh	r3, [r7, #8]
 80056fe:	4613      	mov	r3, r2
 8005700:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	f8b3 004c 	ldrh.w	r0, [r3, #76]	; 0x4c
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f8b3 104e 	ldrh.w	r1, [r3, #78]	; 0x4e
 800570e:	8b3b      	ldrh	r3, [r7, #24]
 8005710:	893a      	ldrh	r2, [r7, #8]
 8005712:	f7ff ffb6 	bl	8005682 <u8g2_is_intersection_decision_tree>
 8005716:	4603      	mov	r3, r0
 8005718:	2b00      	cmp	r3, #0
 800571a:	d101      	bne.n	8005720 <u8g2_IsIntersection+0x38>
    return 0; 
 800571c:	2300      	movs	r3, #0
 800571e:	e00a      	b.n	8005736 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f8b3 0048 	ldrh.w	r0, [r3, #72]	; 0x48
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
 800572c:	88fb      	ldrh	r3, [r7, #6]
 800572e:	897a      	ldrh	r2, [r7, #10]
 8005730:	f7ff ffa7 	bl	8005682 <u8g2_is_intersection_decision_tree>
 8005734:	4603      	mov	r3, r0
}
 8005736:	4618      	mov	r0, r3
 8005738:	3710      	adds	r7, #16
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}

0800573e <u8g2_DrawLine>:

#include "u8g2.h"


void u8g2_DrawLine(u8g2_t *u8g2, u8g2_uint_t x1, u8g2_uint_t y1, u8g2_uint_t x2, u8g2_uint_t y2)
{
 800573e:	b580      	push	{r7, lr}
 8005740:	b088      	sub	sp, #32
 8005742:	af00      	add	r7, sp, #0
 8005744:	60f8      	str	r0, [r7, #12]
 8005746:	4608      	mov	r0, r1
 8005748:	4611      	mov	r1, r2
 800574a:	461a      	mov	r2, r3
 800574c:	4603      	mov	r3, r0
 800574e:	817b      	strh	r3, [r7, #10]
 8005750:	460b      	mov	r3, r1
 8005752:	813b      	strh	r3, [r7, #8]
 8005754:	4613      	mov	r3, r2
 8005756:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t x,y;
  u8g2_uint_t dx, dy;
  u8g2_int_t err;
  u8g2_int_t ystep;

  uint8_t swapxy = 0;
 8005758:	2300      	movs	r3, #0
 800575a:	74fb      	strb	r3, [r7, #19]
  
  /* no intersection check at the moment, should be added... */

  if ( x1 > x2 ) dx = x1-x2; else dx = x2-x1;
 800575c:	897a      	ldrh	r2, [r7, #10]
 800575e:	88fb      	ldrh	r3, [r7, #6]
 8005760:	429a      	cmp	r2, r3
 8005762:	d904      	bls.n	800576e <u8g2_DrawLine+0x30>
 8005764:	897a      	ldrh	r2, [r7, #10]
 8005766:	88fb      	ldrh	r3, [r7, #6]
 8005768:	1ad3      	subs	r3, r2, r3
 800576a:	837b      	strh	r3, [r7, #26]
 800576c:	e003      	b.n	8005776 <u8g2_DrawLine+0x38>
 800576e:	88fa      	ldrh	r2, [r7, #6]
 8005770:	897b      	ldrh	r3, [r7, #10]
 8005772:	1ad3      	subs	r3, r2, r3
 8005774:	837b      	strh	r3, [r7, #26]
  if ( y1 > y2 ) dy = y1-y2; else dy = y2-y1;
 8005776:	893a      	ldrh	r2, [r7, #8]
 8005778:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800577a:	429a      	cmp	r2, r3
 800577c:	d904      	bls.n	8005788 <u8g2_DrawLine+0x4a>
 800577e:	893a      	ldrh	r2, [r7, #8]
 8005780:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005782:	1ad3      	subs	r3, r2, r3
 8005784:	833b      	strh	r3, [r7, #24]
 8005786:	e003      	b.n	8005790 <u8g2_DrawLine+0x52>
 8005788:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800578a:	893b      	ldrh	r3, [r7, #8]
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	833b      	strh	r3, [r7, #24]

  if ( dy > dx ) 
 8005790:	8b3a      	ldrh	r2, [r7, #24]
 8005792:	8b7b      	ldrh	r3, [r7, #26]
 8005794:	429a      	cmp	r2, r3
 8005796:	d913      	bls.n	80057c0 <u8g2_DrawLine+0x82>
  {
    swapxy = 1;
 8005798:	2301      	movs	r3, #1
 800579a:	74fb      	strb	r3, [r7, #19]
    tmp = dx; dx =dy; dy = tmp;
 800579c:	8b7b      	ldrh	r3, [r7, #26]
 800579e:	823b      	strh	r3, [r7, #16]
 80057a0:	8b3b      	ldrh	r3, [r7, #24]
 80057a2:	837b      	strh	r3, [r7, #26]
 80057a4:	8a3b      	ldrh	r3, [r7, #16]
 80057a6:	833b      	strh	r3, [r7, #24]
    tmp = x1; x1 =y1; y1 = tmp;
 80057a8:	897b      	ldrh	r3, [r7, #10]
 80057aa:	823b      	strh	r3, [r7, #16]
 80057ac:	893b      	ldrh	r3, [r7, #8]
 80057ae:	817b      	strh	r3, [r7, #10]
 80057b0:	8a3b      	ldrh	r3, [r7, #16]
 80057b2:	813b      	strh	r3, [r7, #8]
    tmp = x2; x2 =y2; y2 = tmp;
 80057b4:	88fb      	ldrh	r3, [r7, #6]
 80057b6:	823b      	strh	r3, [r7, #16]
 80057b8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80057ba:	80fb      	strh	r3, [r7, #6]
 80057bc:	8a3b      	ldrh	r3, [r7, #16]
 80057be:	853b      	strh	r3, [r7, #40]	; 0x28
  }
  if ( x1 > x2 ) 
 80057c0:	897a      	ldrh	r2, [r7, #10]
 80057c2:	88fb      	ldrh	r3, [r7, #6]
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d90b      	bls.n	80057e0 <u8g2_DrawLine+0xa2>
  {
    tmp = x1; x1 =x2; x2 = tmp;
 80057c8:	897b      	ldrh	r3, [r7, #10]
 80057ca:	823b      	strh	r3, [r7, #16]
 80057cc:	88fb      	ldrh	r3, [r7, #6]
 80057ce:	817b      	strh	r3, [r7, #10]
 80057d0:	8a3b      	ldrh	r3, [r7, #16]
 80057d2:	80fb      	strh	r3, [r7, #6]
    tmp = y1; y1 =y2; y2 = tmp;
 80057d4:	893b      	ldrh	r3, [r7, #8]
 80057d6:	823b      	strh	r3, [r7, #16]
 80057d8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80057da:	813b      	strh	r3, [r7, #8]
 80057dc:	8a3b      	ldrh	r3, [r7, #16]
 80057de:	853b      	strh	r3, [r7, #40]	; 0x28
  }
  err = dx >> 1;
 80057e0:	8b7b      	ldrh	r3, [r7, #26]
 80057e2:	085b      	lsrs	r3, r3, #1
 80057e4:	b29b      	uxth	r3, r3
 80057e6:	82fb      	strh	r3, [r7, #22]
  if ( y2 > y1 ) ystep = 1; else ystep = -1;
 80057e8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80057ea:	893b      	ldrh	r3, [r7, #8]
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d902      	bls.n	80057f6 <u8g2_DrawLine+0xb8>
 80057f0:	2301      	movs	r3, #1
 80057f2:	82bb      	strh	r3, [r7, #20]
 80057f4:	e002      	b.n	80057fc <u8g2_DrawLine+0xbe>
 80057f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80057fa:	82bb      	strh	r3, [r7, #20]
  y = y1;
 80057fc:	893b      	ldrh	r3, [r7, #8]
 80057fe:	83bb      	strh	r3, [r7, #28]

#ifndef  U8G2_16BIT
  if ( x2 == 255 )
    x2--;
#else
  if ( x2 == 0xffff )
 8005800:	88fb      	ldrh	r3, [r7, #6]
 8005802:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005806:	4293      	cmp	r3, r2
 8005808:	d102      	bne.n	8005810 <u8g2_DrawLine+0xd2>
    x2--;
 800580a:	88fb      	ldrh	r3, [r7, #6]
 800580c:	3b01      	subs	r3, #1
 800580e:	80fb      	strh	r3, [r7, #6]
#endif

  for( x = x1; x <= x2; x++ )
 8005810:	897b      	ldrh	r3, [r7, #10]
 8005812:	83fb      	strh	r3, [r7, #30]
 8005814:	e024      	b.n	8005860 <u8g2_DrawLine+0x122>
  {
    if ( swapxy == 0 ) 
 8005816:	7cfb      	ldrb	r3, [r7, #19]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d106      	bne.n	800582a <u8g2_DrawLine+0xec>
      u8g2_DrawPixel(u8g2, x, y); 
 800581c:	8bba      	ldrh	r2, [r7, #28]
 800581e:	8bfb      	ldrh	r3, [r7, #30]
 8005820:	4619      	mov	r1, r3
 8005822:	68f8      	ldr	r0, [r7, #12]
 8005824:	f7ff fefa 	bl	800561c <u8g2_DrawPixel>
 8005828:	e005      	b.n	8005836 <u8g2_DrawLine+0xf8>
    else 
      u8g2_DrawPixel(u8g2, y, x); 
 800582a:	8bfa      	ldrh	r2, [r7, #30]
 800582c:	8bbb      	ldrh	r3, [r7, #28]
 800582e:	4619      	mov	r1, r3
 8005830:	68f8      	ldr	r0, [r7, #12]
 8005832:	f7ff fef3 	bl	800561c <u8g2_DrawPixel>
    err -= (u8g2_uint_t)dy;
 8005836:	8afa      	ldrh	r2, [r7, #22]
 8005838:	8b3b      	ldrh	r3, [r7, #24]
 800583a:	1ad3      	subs	r3, r2, r3
 800583c:	b29b      	uxth	r3, r3
 800583e:	82fb      	strh	r3, [r7, #22]
    if ( err < 0 ) 
 8005840:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005844:	2b00      	cmp	r3, #0
 8005846:	da08      	bge.n	800585a <u8g2_DrawLine+0x11c>
    {
      y += (u8g2_uint_t)ystep;
 8005848:	8aba      	ldrh	r2, [r7, #20]
 800584a:	8bbb      	ldrh	r3, [r7, #28]
 800584c:	4413      	add	r3, r2
 800584e:	83bb      	strh	r3, [r7, #28]
      err += (u8g2_uint_t)dx;
 8005850:	8afa      	ldrh	r2, [r7, #22]
 8005852:	8b7b      	ldrh	r3, [r7, #26]
 8005854:	4413      	add	r3, r2
 8005856:	b29b      	uxth	r3, r3
 8005858:	82fb      	strh	r3, [r7, #22]
  for( x = x1; x <= x2; x++ )
 800585a:	8bfb      	ldrh	r3, [r7, #30]
 800585c:	3301      	adds	r3, #1
 800585e:	83fb      	strh	r3, [r7, #30]
 8005860:	8bfa      	ldrh	r2, [r7, #30]
 8005862:	88fb      	ldrh	r3, [r7, #6]
 8005864:	429a      	cmp	r2, r3
 8005866:	d9d6      	bls.n	8005816 <u8g2_DrawLine+0xd8>
    }
  }
}
 8005868:	bf00      	nop
 800586a:	bf00      	nop
 800586c:	3720      	adds	r7, #32
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}

08005872 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8005872:	b480      	push	{r7}
 8005874:	b089      	sub	sp, #36	; 0x24
 8005876:	af00      	add	r7, sp, #0
 8005878:	60f8      	str	r0, [r7, #12]
 800587a:	4608      	mov	r0, r1
 800587c:	4611      	mov	r1, r2
 800587e:	461a      	mov	r2, r3
 8005880:	4603      	mov	r3, r0
 8005882:	817b      	strh	r3, [r7, #10]
 8005884:	460b      	mov	r3, r1
 8005886:	813b      	strh	r3, [r7, #8]
 8005888:	4613      	mov	r3, r2
 800588a:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 800588c:	893b      	ldrh	r3, [r7, #8]
 800588e:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8005890:	7efb      	ldrb	r3, [r7, #27]
 8005892:	f003 0307 	and.w	r3, r3, #7
 8005896:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 8005898:	2301      	movs	r3, #1
 800589a:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 800589c:	7e3a      	ldrb	r2, [r7, #24]
 800589e:	7efb      	ldrb	r3, [r7, #27]
 80058a0:	fa02 f303 	lsl.w	r3, r2, r3
 80058a4:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 80058a6:	2300      	movs	r3, #0
 80058a8:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 80058aa:	2300      	movs	r3, #0
 80058ac:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d801      	bhi.n	80058bc <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 80058b8:	7e3b      	ldrb	r3, [r7, #24]
 80058ba:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d001      	beq.n	80058ca <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 80058c6:	7e3b      	ldrb	r3, [r7, #24]
 80058c8:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 80058ca:	893b      	ldrh	r3, [r7, #8]
 80058cc:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 80058ce:	8afb      	ldrh	r3, [r7, #22]
 80058d0:	f023 0307 	bic.w	r3, r3, #7
 80058d4:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	7c1b      	ldrb	r3, [r3, #16]
 80058dc:	b29b      	uxth	r3, r3
 80058de:	8afa      	ldrh	r2, [r7, #22]
 80058e0:	fb12 f303 	smulbb	r3, r2, r3
 80058e4:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058ea:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 80058ec:	8afb      	ldrh	r3, [r7, #22]
 80058ee:	69fa      	ldr	r2, [r7, #28]
 80058f0:	4413      	add	r3, r2
 80058f2:	61fb      	str	r3, [r7, #28]
  ptr += x;
 80058f4:	897b      	ldrh	r3, [r7, #10]
 80058f6:	69fa      	ldr	r2, [r7, #28]
 80058f8:	4413      	add	r3, r2
 80058fa:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 80058fc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005900:	2b00      	cmp	r3, #0
 8005902:	d117      	bne.n	8005934 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8005904:	69fb      	ldr	r3, [r7, #28]
 8005906:	781a      	ldrb	r2, [r3, #0]
 8005908:	7ebb      	ldrb	r3, [r7, #26]
 800590a:	4313      	orrs	r3, r2
 800590c:	b2da      	uxtb	r2, r3
 800590e:	69fb      	ldr	r3, [r7, #28]
 8005910:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	781a      	ldrb	r2, [r3, #0]
 8005916:	7e7b      	ldrb	r3, [r7, #25]
 8005918:	4053      	eors	r3, r2
 800591a:	b2da      	uxtb	r2, r3
 800591c:	69fb      	ldr	r3, [r7, #28]
 800591e:	701a      	strb	r2, [r3, #0]
	ptr++;
 8005920:	69fb      	ldr	r3, [r7, #28]
 8005922:	3301      	adds	r3, #1
 8005924:	61fb      	str	r3, [r7, #28]
	len--;
 8005926:	88fb      	ldrh	r3, [r7, #6]
 8005928:	3b01      	subs	r3, #1
 800592a:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 800592c:	88fb      	ldrh	r3, [r7, #6]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d1e8      	bne.n	8005904 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8005932:	e038      	b.n	80059a6 <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 8005934:	69fb      	ldr	r3, [r7, #28]
 8005936:	781a      	ldrb	r2, [r3, #0]
 8005938:	7ebb      	ldrb	r3, [r7, #26]
 800593a:	4313      	orrs	r3, r2
 800593c:	b2da      	uxtb	r2, r3
 800593e:	69fb      	ldr	r3, [r7, #28]
 8005940:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8005942:	69fb      	ldr	r3, [r7, #28]
 8005944:	781a      	ldrb	r2, [r3, #0]
 8005946:	7e7b      	ldrb	r3, [r7, #25]
 8005948:	4053      	eors	r3, r2
 800594a:	b2da      	uxtb	r2, r3
 800594c:	69fb      	ldr	r3, [r7, #28]
 800594e:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 8005950:	7efb      	ldrb	r3, [r7, #27]
 8005952:	3301      	adds	r3, #1
 8005954:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 8005956:	7efb      	ldrb	r3, [r7, #27]
 8005958:	f003 0307 	and.w	r3, r3, #7
 800595c:	76fb      	strb	r3, [r7, #27]
      len--;
 800595e:	88fb      	ldrh	r3, [r7, #6]
 8005960:	3b01      	subs	r3, #1
 8005962:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 8005964:	7efb      	ldrb	r3, [r7, #27]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d114      	bne.n	8005994 <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800596e:	461a      	mov	r2, r3
 8005970:	69fb      	ldr	r3, [r7, #28]
 8005972:	4413      	add	r3, r2
 8005974:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 800597c:	2b01      	cmp	r3, #1
 800597e:	d801      	bhi.n	8005984 <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 8005980:	2301      	movs	r3, #1
 8005982:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 800598a:	2b01      	cmp	r3, #1
 800598c:	d008      	beq.n	80059a0 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 800598e:	2301      	movs	r3, #1
 8005990:	767b      	strb	r3, [r7, #25]
 8005992:	e005      	b.n	80059a0 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 8005994:	7ebb      	ldrb	r3, [r7, #26]
 8005996:	005b      	lsls	r3, r3, #1
 8005998:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 800599a:	7e7b      	ldrb	r3, [r7, #25]
 800599c:	005b      	lsls	r3, r3, #1
 800599e:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 80059a0:	88fb      	ldrh	r3, [r7, #6]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d1c6      	bne.n	8005934 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 80059a6:	bf00      	nop
 80059a8:	3724      	adds	r7, #36	; 0x24
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr

080059b2 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 80059b2:	b580      	push	{r7, lr}
 80059b4:	b082      	sub	sp, #8
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2200      	movs	r2, #0
 80059be:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  u8g2->clip_y0 = 0;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2200      	movs	r2, #0
 80059c6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059d0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059da:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  
  u8g2->cb->update_page_win(u8g2);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	4798      	blx	r3
}
 80059e8:	bf00      	nop
 80059ea:	3708      	adds	r7, #8
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}

080059f0 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b084      	sub	sp, #16
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	60f8      	str	r0, [r7, #12]
 80059f8:	60b9      	str	r1, [r7, #8]
 80059fa:	603b      	str	r3, [r7, #0]
 80059fc:	4613      	mov	r3, r2
 80059fe:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2200      	movs	r2, #0
 8005a04:	659a      	str	r2, [r3, #88]	; 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	683a      	ldr	r2, [r7, #0]
 8005a0a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	68ba      	ldr	r2, [r7, #8]
 8005a10:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	79fa      	ldrb	r2, [r7, #7]
 8005a16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  u8g2->tile_curr_row = 0;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2200      	movs	r2, #0
 8005a26:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
  u8g2->bitmap_transparency = 0;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  
  u8g2->font_height_mode = 0; /* issue 2046 */
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2200      	movs	r2, #0
 8005a36:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
  u8g2->draw_color = 1;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  u8g2->is_auto_page_clear = 1;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2201      	movs	r2, #1
 8005a46:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
  
  u8g2->cb = u8g2_cb;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	69ba      	ldr	r2, [r7, #24]
 8005a4e:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	68f8      	ldr	r0, [r7, #12]
 8005a58:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 8005a5a:	68f8      	ldr	r0, [r7, #12]
 8005a5c:	f7ff ffa9 	bl	80059b2 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8005a60:	68f8      	ldr	r0, [r7, #12]
 8005a62:	f7ff fcb7 	bl	80053d4 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
#endif
}
 8005a6e:	bf00      	nop
 8005a70:	3710      	adds	r7, #16
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}

08005a76 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8005a76:	b480      	push	{r7}
 8005a78:	b085      	sub	sp, #20
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005a8a:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8005a8c:	89fb      	ldrh	r3, [r7, #14]
 8005a8e:	00db      	lsls	r3, r3, #3
 8005a90:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	89fa      	ldrh	r2, [r7, #14]
 8005a96:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  t = display_info->tile_width;
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	7c1b      	ldrb	r3, [r3, #16]
 8005a9c:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 8005a9e:	89fb      	ldrh	r3, [r7, #14]
 8005aa0:	00db      	lsls	r3, r3, #3
 8005aa2:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	89fa      	ldrh	r2, [r7, #14]
 8005aa8:	875a      	strh	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005ab0:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8005ab2:	89fb      	ldrh	r3, [r7, #14]
 8005ab4:	00db      	lsls	r3, r3, #3
 8005ab6:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	89fa      	ldrh	r2, [r7, #14]
 8005abc:	87da      	strh	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_buf_height;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005ac4:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 8005ac6:	89fb      	ldrh	r3, [r7, #14]
 8005ac8:	687a      	ldr	r2, [r7, #4]
 8005aca:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 8005ace:	4413      	add	r3, r2
 8005ad0:	68ba      	ldr	r2, [r7, #8]
 8005ad2:	7c52      	ldrb	r2, [r2, #17]
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	dd08      	ble.n	8005aea <u8g2_update_dimension_common+0x74>
    t = display_info->tile_height - u8g2->tile_curr_row;
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	7c5b      	ldrb	r3, [r3, #17]
 8005adc:	b29a      	uxth	r2, r3
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	1ad3      	subs	r3, r2, r3
 8005ae8:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8005aea:	89fb      	ldrh	r3, [r7, #14]
 8005aec:	00db      	lsls	r3, r3, #3
 8005aee:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  u8g2->buf_y1 += t;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8005b0c:	89fb      	ldrh	r3, [r7, #14]
 8005b0e:	4413      	add	r3, r2
 8005b10:	b29a      	uxth	r2, r3
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	8a9a      	ldrh	r2, [r3, #20]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  u8g2->height = display_info->pixel_height;
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	8ada      	ldrh	r2, [r3, #22]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 8005b2c:	bf00      	nop
 8005b2e:	3714      	adds	r7, #20
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr

08005b38 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b084      	sub	sp, #16
 8005b3c:	af02      	add	r7, sp, #8
 8005b3e:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f8b3 0052 	ldrh.w	r0, [r3, #82]	; 0x52
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005b58:	9300      	str	r3, [sp, #0]
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f7ff fdc3 	bl	80056e8 <u8g2_IsIntersection>
 8005b62:	4603      	mov	r3, r0
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d104      	bne.n	8005b72 <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 8005b70:	e03b      	b.n	8005bea <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2201      	movs	r2, #1
 8005b76:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d205      	bcs.n	8005b96 <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d905      	bls.n	8005bb2 <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d205      	bcs.n	8005bce <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d905      	bls.n	8005bea <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
}
 8005bea:	bf00      	nop
 8005bec:	3708      	adds	r7, #8
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}

08005bf2 <u8g2_update_dimension_r2>:
  u8g2_apply_clip_window(u8g2);
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}

void u8g2_update_dimension_r2(u8g2_t *u8g2)
{
 8005bf2:	b580      	push	{r7, lr}
 8005bf4:	b082      	sub	sp, #8
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f7ff ff3b 	bl	8005a76 <u8g2_update_dimension_common>
}
 8005c00:	bf00      	nop
 8005c02:	3708      	adds	r7, #8
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}

08005c08 <u8g2_update_page_win_r2>:

void u8g2_update_page_win_r2(u8g2_t *u8g2)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b082      	sub	sp, #8
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2200      	movs	r2, #0
 8005c14:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  u8g2->user_x1 = u8g2->width;	/* pixel_buf_width replaced with width */
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  
  /* there are ases where the height is not a multiple of 8. */
  /* in such a case u8g2->buf_y1 might be heigher than u8g2->height */
  u8g2->user_y0 = 0;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2200      	movs	r2, #0
 8005c28:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  if ( u8g2->height >= u8g2->buf_y1 )
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f8b3 2046 	ldrh.w	r2, [r3, #70]	; 0x46
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d30a      	bcc.n	8005c52 <u8g2_update_page_win_r2+0x4a>
    u8g2->user_y0 = u8g2->height - u8g2->buf_y1;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f8b3 2046 	ldrh.w	r2, [r3, #70]	; 0x46
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8005c48:	1ad3      	subs	r3, r2, r3
 8005c4a:	b29a      	uxth	r2, r3
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  u8g2->user_y1 = u8g2->height - u8g2->buf_y0;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f8b3 2046 	ldrh.w	r2, [r3, #70]	; 0x46
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005c5e:	1ad3      	subs	r3, r2, r3
 8005c60:	b29a      	uxth	r2, r3
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f7ff ff65 	bl	8005b38 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8005c6e:	bf00      	nop
 8005c70:	3708      	adds	r7, #8
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}

08005c76 <u8g2_draw_l90_r2>:
  
  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
}

void u8g2_draw_l90_r2(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8005c76:	b580      	push	{r7, lr}
 8005c78:	b088      	sub	sp, #32
 8005c7a:	af02      	add	r7, sp, #8
 8005c7c:	60f8      	str	r0, [r7, #12]
 8005c7e:	4608      	mov	r0, r1
 8005c80:	4611      	mov	r1, r2
 8005c82:	461a      	mov	r2, r3
 8005c84:	4603      	mov	r3, r0
 8005c86:	817b      	strh	r3, [r7, #10]
 8005c88:	460b      	mov	r3, r1
 8005c8a:	813b      	strh	r3, [r7, #8]
 8005c8c:	4613      	mov	r3, r2
 8005c8e:	80fb      	strh	r3, [r7, #6]
    yy -= len;
    yy++;
  }
  */

  yy = u8g2->height;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c96:	82bb      	strh	r3, [r7, #20]
  yy -= y;
 8005c98:	8aba      	ldrh	r2, [r7, #20]
 8005c9a:	893b      	ldrh	r3, [r7, #8]
 8005c9c:	1ad3      	subs	r3, r2, r3
 8005c9e:	82bb      	strh	r3, [r7, #20]
  
  xx = u8g2->width;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005ca6:	82fb      	strh	r3, [r7, #22]
  xx -= x;
 8005ca8:	8afa      	ldrh	r2, [r7, #22]
 8005caa:	897b      	ldrh	r3, [r7, #10]
 8005cac:	1ad3      	subs	r3, r2, r3
 8005cae:	82fb      	strh	r3, [r7, #22]
  
  if ( dir == 0 )
 8005cb0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d107      	bne.n	8005cc8 <u8g2_draw_l90_r2+0x52>
  {
    yy--;
 8005cb8:	8abb      	ldrh	r3, [r7, #20]
 8005cba:	3b01      	subs	r3, #1
 8005cbc:	82bb      	strh	r3, [r7, #20]
    xx -= len;
 8005cbe:	8afa      	ldrh	r2, [r7, #22]
 8005cc0:	88fb      	ldrh	r3, [r7, #6]
 8005cc2:	1ad3      	subs	r3, r2, r3
 8005cc4:	82fb      	strh	r3, [r7, #22]
 8005cc6:	e00a      	b.n	8005cde <u8g2_draw_l90_r2+0x68>
  }
  else if ( dir == 1 )
 8005cc8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d106      	bne.n	8005cde <u8g2_draw_l90_r2+0x68>
  {
    xx--;
 8005cd0:	8afb      	ldrh	r3, [r7, #22]
 8005cd2:	3b01      	subs	r3, #1
 8005cd4:	82fb      	strh	r3, [r7, #22]
    yy -= len;
 8005cd6:	8aba      	ldrh	r2, [r7, #20]
 8005cd8:	88fb      	ldrh	r3, [r7, #6]
 8005cda:	1ad3      	subs	r3, r2, r3
 8005cdc:	82bb      	strh	r3, [r7, #20]
  }

  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
 8005cde:	88f8      	ldrh	r0, [r7, #6]
 8005ce0:	8aba      	ldrh	r2, [r7, #20]
 8005ce2:	8af9      	ldrh	r1, [r7, #22]
 8005ce4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005ce8:	9300      	str	r3, [sp, #0]
 8005cea:	4603      	mov	r3, r0
 8005cec:	68f8      	ldr	r0, [r7, #12]
 8005cee:	f7ff fbe9 	bl	80054c4 <u8g2_draw_hv_line_2dir>
}
 8005cf2:	bf00      	nop
 8005cf4:	3718      	adds	r7, #24
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}

08005cfa <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 8005cfa:	b480      	push	{r7}
 8005cfc:	b083      	sub	sp, #12
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2200      	movs	r2, #0
 8005d06:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8005d0a:	bf00      	nop
 8005d0c:	370c      	adds	r7, #12
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr

08005d16 <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 8005d16:	b480      	push	{r7}
 8005d18:	b083      	sub	sp, #12
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	6078      	str	r0, [r7, #4]
 8005d1e:	460b      	mov	r3, r1
 8005d20:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8005d22:	78fb      	ldrb	r3, [r7, #3]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d002      	beq.n	8005d2e <u8x8_ascii_next+0x18>
 8005d28:	78fb      	ldrb	r3, [r7, #3]
 8005d2a:	2b0a      	cmp	r3, #10
 8005d2c:	d102      	bne.n	8005d34 <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 8005d2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005d32:	e001      	b.n	8005d38 <u8x8_ascii_next+0x22>
  return b;
 8005d34:	78fb      	ldrb	r3, [r7, #3]
 8005d36:	b29b      	uxth	r3, r3
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	370c      	adds	r7, #12
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr

08005d44 <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 8005d44:	b590      	push	{r4, r7, lr}
 8005d46:	b083      	sub	sp, #12
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	460b      	mov	r3, r1
 8005d4e:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	691c      	ldr	r4, [r3, #16]
 8005d54:	78fa      	ldrb	r2, [r7, #3]
 8005d56:	2300      	movs	r3, #0
 8005d58:	2120      	movs	r1, #32
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	47a0      	blx	r4
 8005d5e:	4603      	mov	r3, r0
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	370c      	adds	r7, #12
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd90      	pop	{r4, r7, pc}

08005d68 <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8005d68:	b590      	push	{r4, r7, lr}
 8005d6a:	b085      	sub	sp, #20
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	60f8      	str	r0, [r7, #12]
 8005d70:	460b      	mov	r3, r1
 8005d72:	607a      	str	r2, [r7, #4]
 8005d74:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	691c      	ldr	r4, [r3, #16]
 8005d7a:	7afa      	ldrb	r2, [r7, #11]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2117      	movs	r1, #23
 8005d80:	68f8      	ldr	r0, [r7, #12]
 8005d82:	47a0      	blx	r4
 8005d84:	4603      	mov	r3, r0
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3714      	adds	r7, #20
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd90      	pop	{r4, r7, pc}

08005d8e <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8005d8e:	b580      	push	{r7, lr}
 8005d90:	b082      	sub	sp, #8
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	6078      	str	r0, [r7, #4]
 8005d96:	460b      	mov	r3, r1
 8005d98:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8005d9a:	1cfb      	adds	r3, r7, #3
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	2101      	movs	r1, #1
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f7ff ffe1 	bl	8005d68 <u8x8_byte_SendBytes>
 8005da6:	4603      	mov	r3, r0
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3708      	adds	r7, #8
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}

08005db0 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8005db0:	b590      	push	{r4, r7, lr}
 8005db2:	b083      	sub	sp, #12
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	460b      	mov	r3, r1
 8005dba:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	68dc      	ldr	r4, [r3, #12]
 8005dc0:	78fa      	ldrb	r2, [r7, #3]
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	2115      	movs	r1, #21
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	47a0      	blx	r4
 8005dca:	4603      	mov	r3, r0
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	370c      	adds	r7, #12
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd90      	pop	{r4, r7, pc}

08005dd4 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8005dd4:	b590      	push	{r4, r7, lr}
 8005dd6:	b083      	sub	sp, #12
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
 8005ddc:	460b      	mov	r3, r1
 8005dde:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	68dc      	ldr	r4, [r3, #12]
 8005de4:	78fa      	ldrb	r2, [r7, #3]
 8005de6:	2300      	movs	r3, #0
 8005de8:	2116      	movs	r1, #22
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	47a0      	blx	r4
 8005dee:	4603      	mov	r3, r0
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	370c      	adds	r7, #12
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd90      	pop	{r4, r7, pc}

08005df8 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8005df8:	b590      	push	{r4, r7, lr}
 8005dfa:	b085      	sub	sp, #20
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	60f8      	str	r0, [r7, #12]
 8005e00:	460b      	mov	r3, r1
 8005e02:	607a      	str	r2, [r7, #4]
 8005e04:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	68dc      	ldr	r4, [r3, #12]
 8005e0a:	7afa      	ldrb	r2, [r7, #11]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2117      	movs	r1, #23
 8005e10:	68f8      	ldr	r0, [r7, #12]
 8005e12:	47a0      	blx	r4
 8005e14:	4603      	mov	r3, r0
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3714      	adds	r7, #20
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd90      	pop	{r4, r7, pc}

08005e1e <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8005e1e:	b590      	push	{r4, r7, lr}
 8005e20:	b083      	sub	sp, #12
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	68dc      	ldr	r4, [r3, #12]
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	2118      	movs	r1, #24
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	47a0      	blx	r4
 8005e34:	4603      	mov	r3, r0
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	370c      	adds	r7, #12
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd90      	pop	{r4, r7, pc}

08005e3e <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8005e3e:	b590      	push	{r4, r7, lr}
 8005e40:	b083      	sub	sp, #12
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	68dc      	ldr	r4, [r3, #12]
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	2119      	movs	r1, #25
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	47a0      	blx	r4
 8005e54:	4603      	mov	r3, r0
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	370c      	adds	r7, #12
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd90      	pop	{r4, r7, pc}

08005e5e <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8005e5e:	b590      	push	{r4, r7, lr}
 8005e60:	b085      	sub	sp, #20
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	6078      	str	r0, [r7, #4]
 8005e66:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	781b      	ldrb	r3, [r3, #0]
 8005e6c:	73fb      	strb	r3, [r7, #15]
    data++;
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	3301      	adds	r3, #1
 8005e72:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8005e74:	7bfb      	ldrb	r3, [r7, #15]
 8005e76:	2bfe      	cmp	r3, #254	; 0xfe
 8005e78:	d031      	beq.n	8005ede <u8x8_cad_SendSequence+0x80>
 8005e7a:	2bfe      	cmp	r3, #254	; 0xfe
 8005e7c:	dc3d      	bgt.n	8005efa <u8x8_cad_SendSequence+0x9c>
 8005e7e:	2b19      	cmp	r3, #25
 8005e80:	dc3b      	bgt.n	8005efa <u8x8_cad_SendSequence+0x9c>
 8005e82:	2b18      	cmp	r3, #24
 8005e84:	da23      	bge.n	8005ece <u8x8_cad_SendSequence+0x70>
 8005e86:	2b16      	cmp	r3, #22
 8005e88:	dc02      	bgt.n	8005e90 <u8x8_cad_SendSequence+0x32>
 8005e8a:	2b15      	cmp	r3, #21
 8005e8c:	da03      	bge.n	8005e96 <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8005e8e:	e034      	b.n	8005efa <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 8005e90:	2b17      	cmp	r3, #23
 8005e92:	d00e      	beq.n	8005eb2 <u8x8_cad_SendSequence+0x54>
	return;
 8005e94:	e031      	b.n	8005efa <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	781b      	ldrb	r3, [r3, #0]
 8005e9a:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	68dc      	ldr	r4, [r3, #12]
 8005ea0:	7bba      	ldrb	r2, [r7, #14]
 8005ea2:	7bf9      	ldrb	r1, [r7, #15]
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	47a0      	blx	r4
	  data++;
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	3301      	adds	r3, #1
 8005eae:	603b      	str	r3, [r7, #0]
	  break;
 8005eb0:	e022      	b.n	8005ef8 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	781b      	ldrb	r3, [r3, #0]
 8005eb6:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8005eb8:	f107 030e 	add.w	r3, r7, #14
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	2101      	movs	r1, #1
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f7ff ff99 	bl	8005df8 <u8x8_cad_SendData>
	  data++;
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	3301      	adds	r3, #1
 8005eca:	603b      	str	r3, [r7, #0]
	  break;
 8005ecc:	e014      	b.n	8005ef8 <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	68dc      	ldr	r4, [r3, #12]
 8005ed2:	7bf9      	ldrb	r1, [r7, #15]
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	47a0      	blx	r4
	  break;
 8005edc:	e00c      	b.n	8005ef8 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	781b      	ldrb	r3, [r3, #0]
 8005ee2:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8005ee4:	7bbb      	ldrb	r3, [r7, #14]
 8005ee6:	461a      	mov	r2, r3
 8005ee8:	2129      	movs	r1, #41	; 0x29
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f000 f9d5 	bl	800629a <u8x8_gpio_call>
	  data++;
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	3301      	adds	r3, #1
 8005ef4:	603b      	str	r3, [r7, #0]
	  break;
 8005ef6:	bf00      	nop
    cmd = *data;
 8005ef8:	e7b6      	b.n	8005e68 <u8x8_cad_SendSequence+0xa>
	return;
 8005efa:	bf00      	nop
    }
  }
}
 8005efc:	3714      	adds	r7, #20
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd90      	pop	{r4, r7, pc}
	...

08005f04 <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8005f04:	b590      	push	{r4, r7, lr}
 8005f06:	b085      	sub	sp, #20
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	60f8      	str	r0, [r7, #12]
 8005f0c:	607b      	str	r3, [r7, #4]
 8005f0e:	460b      	mov	r3, r1
 8005f10:	72fb      	strb	r3, [r7, #11]
 8005f12:	4613      	mov	r3, r2
 8005f14:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 8005f16:	7afb      	ldrb	r3, [r7, #11]
 8005f18:	3b14      	subs	r3, #20
 8005f1a:	2b05      	cmp	r3, #5
 8005f1c:	d82f      	bhi.n	8005f7e <u8x8_cad_001+0x7a>
 8005f1e:	a201      	add	r2, pc, #4	; (adr r2, 8005f24 <u8x8_cad_001+0x20>)
 8005f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f24:	08005f6d 	.word	0x08005f6d
 8005f28:	08005f3d 	.word	0x08005f3d
 8005f2c:	08005f51 	.word	0x08005f51
 8005f30:	08005f65 	.word	0x08005f65
 8005f34:	08005f6d 	.word	0x08005f6d
 8005f38:	08005f6d 	.word	0x08005f6d
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 8005f3c:	2100      	movs	r1, #0
 8005f3e:	68f8      	ldr	r0, [r7, #12]
 8005f40:	f7ff ff00 	bl	8005d44 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8005f44:	7abb      	ldrb	r3, [r7, #10]
 8005f46:	4619      	mov	r1, r3
 8005f48:	68f8      	ldr	r0, [r7, #12]
 8005f4a:	f7ff ff20 	bl	8005d8e <u8x8_byte_SendByte>
      break;
 8005f4e:	e018      	b.n	8005f82 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
 8005f50:	2100      	movs	r1, #0
 8005f52:	68f8      	ldr	r0, [r7, #12]
 8005f54:	f7ff fef6 	bl	8005d44 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8005f58:	7abb      	ldrb	r3, [r7, #10]
 8005f5a:	4619      	mov	r1, r3
 8005f5c:	68f8      	ldr	r0, [r7, #12]
 8005f5e:	f7ff ff16 	bl	8005d8e <u8x8_byte_SendByte>
      break;
 8005f62:	e00e      	b.n	8005f82 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 8005f64:	2101      	movs	r1, #1
 8005f66:	68f8      	ldr	r0, [r7, #12]
 8005f68:	f7ff feec 	bl	8005d44 <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	691c      	ldr	r4, [r3, #16]
 8005f70:	7aba      	ldrb	r2, [r7, #10]
 8005f72:	7af9      	ldrb	r1, [r7, #11]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	68f8      	ldr	r0, [r7, #12]
 8005f78:	47a0      	blx	r4
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	e002      	b.n	8005f84 <u8x8_cad_001+0x80>
    default:
      return 0;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	e000      	b.n	8005f84 <u8x8_cad_001+0x80>
  }
  return 1;
 8005f82:	2301      	movs	r3, #1
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3714      	adds	r7, #20
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd90      	pop	{r4, r7, pc}

08005f8c <u8x8_d_sh1107_generic>:
  }
  return 1;
}

static uint8_t u8x8_d_sh1107_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b086      	sub	sp, #24
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	60f8      	str	r0, [r7, #12]
 8005f94:	607b      	str	r3, [r7, #4]
 8005f96:	460b      	mov	r3, r1
 8005f98:	72fb      	strb	r3, [r7, #11]
 8005f9a:	4613      	mov	r3, r2
 8005f9c:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 8005f9e:	7afb      	ldrb	r3, [r7, #11]
 8005fa0:	3b0b      	subs	r3, #11
 8005fa2:	2b04      	cmp	r3, #4
 8005fa4:	f200 8086 	bhi.w	80060b4 <u8x8_d_sh1107_generic+0x128>
 8005fa8:	a201      	add	r2, pc, #4	; (adr r2, 8005fb0 <u8x8_d_sh1107_generic+0x24>)
 8005faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fae:	bf00      	nop
 8005fb0:	08005fc5 	.word	0x08005fc5
 8005fb4:	080060b5 	.word	0x080060b5
 8005fb8:	08005fdf 	.word	0x08005fdf
 8005fbc:	08006011 	.word	0x08006011
 8005fc0:	08006031 	.word	0x08006031
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_sh1107_64x128_noname_init_seq);    
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8005fc4:	7abb      	ldrb	r3, [r7, #10]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d104      	bne.n	8005fd4 <u8x8_d_sh1107_generic+0x48>
	u8x8_cad_SendSequence(u8x8, u8x8_d_sh1107_64x128_noname_powersave0_seq);
 8005fca:	493e      	ldr	r1, [pc, #248]	; (80060c4 <u8x8_d_sh1107_generic+0x138>)
 8005fcc:	68f8      	ldr	r0, [r7, #12]
 8005fce:	f7ff ff46 	bl	8005e5e <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_sh1107_64x128_noname_powersave1_seq);
      break;
 8005fd2:	e071      	b.n	80060b8 <u8x8_d_sh1107_generic+0x12c>
	u8x8_cad_SendSequence(u8x8, u8x8_d_sh1107_64x128_noname_powersave1_seq);
 8005fd4:	493c      	ldr	r1, [pc, #240]	; (80060c8 <u8x8_d_sh1107_generic+0x13c>)
 8005fd6:	68f8      	ldr	r0, [r7, #12]
 8005fd8:	f7ff ff41 	bl	8005e5e <u8x8_cad_SendSequence>
      break;
 8005fdc:	e06c      	b.n	80060b8 <u8x8_d_sh1107_generic+0x12c>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 8005fde:	7abb      	ldrb	r3, [r7, #10]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d10a      	bne.n	8005ffa <u8x8_d_sh1107_generic+0x6e>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_sh1107_64x128_noname_flip0_seq);
 8005fe4:	4939      	ldr	r1, [pc, #228]	; (80060cc <u8x8_d_sh1107_generic+0x140>)
 8005fe6:	68f8      	ldr	r0, [r7, #12]
 8005fe8:	f7ff ff39 	bl	8005e5e <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	7c9a      	ldrb	r2, [r3, #18]
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_sh1107_64x128_noname_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 8005ff8:	e05e      	b.n	80060b8 <u8x8_d_sh1107_generic+0x12c>
	u8x8_cad_SendSequence(u8x8, u8x8_d_sh1107_64x128_noname_flip1_seq);
 8005ffa:	4935      	ldr	r1, [pc, #212]	; (80060d0 <u8x8_d_sh1107_generic+0x144>)
 8005ffc:	68f8      	ldr	r0, [r7, #12]
 8005ffe:	f7ff ff2e 	bl	8005e5e <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	7cda      	ldrb	r2, [r3, #19]
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      break;
 800600e:	e053      	b.n	80060b8 <u8x8_d_sh1107_generic+0x12c>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8006010:	68f8      	ldr	r0, [r7, #12]
 8006012:	f7ff ff04 	bl	8005e1e <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 8006016:	2181      	movs	r1, #129	; 0x81
 8006018:	68f8      	ldr	r0, [r7, #12]
 800601a:	f7ff fec9 	bl	8005db0 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* sh1107 has range from 0 to 255 */
 800601e:	7abb      	ldrb	r3, [r7, #10]
 8006020:	4619      	mov	r1, r3
 8006022:	68f8      	ldr	r0, [r7, #12]
 8006024:	f7ff fed6 	bl	8005dd4 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8006028:	68f8      	ldr	r0, [r7, #12]
 800602a:	f7ff ff08 	bl	8005e3e <u8x8_cad_EndTransfer>
      break;
 800602e:	e043      	b.n	80060b8 <u8x8_d_sh1107_generic+0x12c>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 8006030:	68f8      	ldr	r0, [r7, #12]
 8006032:	f7ff fef4 	bl	8005e1e <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	795b      	ldrb	r3, [r3, #5]
 800603a:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 800603c:	7dfb      	ldrb	r3, [r7, #23]
 800603e:	00db      	lsls	r3, r3, #3
 8006040:	75fb      	strb	r3, [r7, #23]
      x += u8x8->x_offset;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8006048:	7dfb      	ldrb	r3, [r7, #23]
 800604a:	4413      	add	r3, r2
 800604c:	75fb      	strb	r3, [r7, #23]

      //u8x8_cad_SendCmd(u8x8, 0x040 ); /* set line offset to 0 */

      // set column address
      u8x8_cad_SendCmd(u8x8, 0x010 | (x >> 4));
 800604e:	7dfb      	ldrb	r3, [r7, #23]
 8006050:	091b      	lsrs	r3, r3, #4
 8006052:	b2db      	uxtb	r3, r3
 8006054:	f043 0310 	orr.w	r3, r3, #16
 8006058:	b2db      	uxtb	r3, r3
 800605a:	4619      	mov	r1, r3
 800605c:	68f8      	ldr	r0, [r7, #12]
 800605e:	f7ff fea7 	bl	8005db0 <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x000 | ((x & 15))); /* probably wrong, should be SendCmd */
 8006062:	7dfb      	ldrb	r3, [r7, #23]
 8006064:	f003 030f 	and.w	r3, r3, #15
 8006068:	b2db      	uxtb	r3, r3
 800606a:	4619      	mov	r1, r3
 800606c:	68f8      	ldr	r0, [r7, #12]
 800606e:	f7ff fe9f 	bl	8005db0 <u8x8_cad_SendCmd>
      
      // set page address
      u8x8_cad_SendCmd(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos)); /* probably wrong, should be SendCmd */
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	799b      	ldrb	r3, [r3, #6]
 8006076:	f063 034f 	orn	r3, r3, #79	; 0x4f
 800607a:	b2db      	uxtb	r3, r3
 800607c:	4619      	mov	r1, r3
 800607e:	68f8      	ldr	r0, [r7, #12]
 8006080:	f7ff fe96 	bl	8005db0 <u8x8_cad_SendCmd>
    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	791b      	ldrb	r3, [r3, #4]
 8006088:	75bb      	strb	r3, [r7, #22]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	613b      	str	r3, [r7, #16]
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 8006090:	7dbb      	ldrb	r3, [r7, #22]
 8006092:	00db      	lsls	r3, r3, #3
 8006094:	b2db      	uxtb	r3, r3
 8006096:	693a      	ldr	r2, [r7, #16]
 8006098:	4619      	mov	r1, r3
 800609a:	68f8      	ldr	r0, [r7, #12]
 800609c:	f7ff feac 	bl	8005df8 <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 80060a0:	7abb      	ldrb	r3, [r7, #10]
 80060a2:	3b01      	subs	r3, #1
 80060a4:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 80060a6:	7abb      	ldrb	r3, [r7, #10]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d1eb      	bne.n	8006084 <u8x8_d_sh1107_generic+0xf8>
      
      u8x8_cad_EndTransfer(u8x8);
 80060ac:	68f8      	ldr	r0, [r7, #12]
 80060ae:	f7ff fec6 	bl	8005e3e <u8x8_cad_EndTransfer>
      break;
 80060b2:	e001      	b.n	80060b8 <u8x8_d_sh1107_generic+0x12c>
    default:
      return 0;
 80060b4:	2300      	movs	r3, #0
 80060b6:	e000      	b.n	80060ba <u8x8_d_sh1107_generic+0x12e>
  }
  return 1;
 80060b8:	2301      	movs	r3, #1
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3718      	adds	r7, #24
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}
 80060c2:	bf00      	nop
 80060c4:	08010600 	.word	0x08010600
 80060c8:	08010608 	.word	0x08010608
 80060cc:	08010610 	.word	0x08010610
 80060d0:	08010618 	.word	0x08010618

080060d4 <u8x8_d_sh1107_pimoroni_128x128>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 128
};

uint8_t u8x8_d_sh1107_pimoroni_128x128(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b084      	sub	sp, #16
 80060d8:	af00      	add	r7, sp, #0
 80060da:	60f8      	str	r0, [r7, #12]
 80060dc:	607b      	str	r3, [r7, #4]
 80060de:	460b      	mov	r3, r1
 80060e0:	72fb      	strb	r3, [r7, #11]
 80060e2:	4613      	mov	r3, r2
 80060e4:	72bb      	strb	r3, [r7, #10]
    
  if ( u8x8_d_sh1107_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 80060e6:	7aba      	ldrb	r2, [r7, #10]
 80060e8:	7af9      	ldrb	r1, [r7, #11]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	68f8      	ldr	r0, [r7, #12]
 80060ee:	f7ff ff4d 	bl	8005f8c <u8x8_d_sh1107_generic>
 80060f2:	4603      	mov	r3, r0
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d001      	beq.n	80060fc <u8x8_d_sh1107_pimoroni_128x128+0x28>
    return 1;
 80060f8:	2301      	movs	r3, #1
 80060fa:	e014      	b.n	8006126 <u8x8_d_sh1107_pimoroni_128x128+0x52>
  
  switch(msg)
 80060fc:	7afb      	ldrb	r3, [r7, #11]
 80060fe:	2b09      	cmp	r3, #9
 8006100:	d009      	beq.n	8006116 <u8x8_d_sh1107_pimoroni_128x128+0x42>
 8006102:	2b0a      	cmp	r3, #10
 8006104:	d10c      	bne.n	8006120 <u8x8_d_sh1107_pimoroni_128x128+0x4c>
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 8006106:	68f8      	ldr	r0, [r7, #12]
 8006108:	f000 f82a 	bl	8006160 <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_sh1107_128x128_init_seq);    
 800610c:	4908      	ldr	r1, [pc, #32]	; (8006130 <u8x8_d_sh1107_pimoroni_128x128+0x5c>)
 800610e:	68f8      	ldr	r0, [r7, #12]
 8006110:	f7ff fea5 	bl	8005e5e <u8x8_cad_SendSequence>
      break;
 8006114:	e006      	b.n	8006124 <u8x8_d_sh1107_pimoroni_128x128+0x50>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_sh1107_pimoroni_128x128_display_info);
 8006116:	4907      	ldr	r1, [pc, #28]	; (8006134 <u8x8_d_sh1107_pimoroni_128x128+0x60>)
 8006118:	68f8      	ldr	r0, [r7, #12]
 800611a:	f000 f80d 	bl	8006138 <u8x8_d_helper_display_setup_memory>
      break;
 800611e:	e001      	b.n	8006124 <u8x8_d_sh1107_pimoroni_128x128+0x50>
    default:
      return 0;
 8006120:	2300      	movs	r3, #0
 8006122:	e000      	b.n	8006126 <u8x8_d_sh1107_pimoroni_128x128+0x52>
  }
  return 1;
 8006124:	2301      	movs	r3, #1
}
 8006126:	4618      	mov	r0, r3
 8006128:	3710      	adds	r7, #16
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}
 800612e:	bf00      	nop
 8006130:	08010620 	.word	0x08010620
 8006134:	08010650 	.word	0x08010650

08006138 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8006138:	b480      	push	{r7}
 800613a:	b083      	sub	sp, #12
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	683a      	ldr	r2, [r7, #0]
 8006146:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	7c9a      	ldrb	r2, [r3, #18]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8006154:	bf00      	nop
 8006156:	370c      	adds	r7, #12
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr

08006160 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8006160:	b590      	push	{r4, r7, lr}
 8006162:	b083      	sub	sp, #12
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	695c      	ldr	r4, [r3, #20]
 800616c:	2300      	movs	r3, #0
 800616e:	2200      	movs	r2, #0
 8006170:	2128      	movs	r1, #40	; 0x28
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	68dc      	ldr	r4, [r3, #12]
 800617a:	2300      	movs	r3, #0
 800617c:	2200      	movs	r2, #0
 800617e:	2114      	movs	r1, #20
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8006184:	2201      	movs	r2, #1
 8006186:	214b      	movs	r1, #75	; 0x4b
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f000 f886 	bl	800629a <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	791b      	ldrb	r3, [r3, #4]
 8006194:	461a      	mov	r2, r3
 8006196:	2129      	movs	r1, #41	; 0x29
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f000 f87e 	bl	800629a <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 800619e:	2200      	movs	r2, #0
 80061a0:	214b      	movs	r1, #75	; 0x4b
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f000 f879 	bl	800629a <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	791b      	ldrb	r3, [r3, #4]
 80061ae:	461a      	mov	r2, r3
 80061b0:	2129      	movs	r1, #41	; 0x29
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f000 f871 	bl	800629a <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 80061b8:	2201      	movs	r2, #1
 80061ba:	214b      	movs	r1, #75	; 0x4b
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f000 f86c 	bl	800629a <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	795b      	ldrb	r3, [r3, #5]
 80061c8:	461a      	mov	r2, r3
 80061ca:	2129      	movs	r1, #41	; 0x29
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f000 f864 	bl	800629a <u8x8_gpio_call>
}    
 80061d2:	bf00      	nop
 80061d4:	370c      	adds	r7, #12
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd90      	pop	{r4, r7, pc}

080061da <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 80061da:	b590      	push	{r4, r7, lr}
 80061dc:	b085      	sub	sp, #20
 80061de:	af00      	add	r7, sp, #0
 80061e0:	6078      	str	r0, [r7, #4]
 80061e2:	4608      	mov	r0, r1
 80061e4:	4611      	mov	r1, r2
 80061e6:	461a      	mov	r2, r3
 80061e8:	4603      	mov	r3, r0
 80061ea:	70fb      	strb	r3, [r7, #3]
 80061ec:	460b      	mov	r3, r1
 80061ee:	70bb      	strb	r3, [r7, #2]
 80061f0:	4613      	mov	r3, r2
 80061f2:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 80061f4:	78fb      	ldrb	r3, [r7, #3]
 80061f6:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 80061f8:	78bb      	ldrb	r3, [r7, #2]
 80061fa:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 80061fc:	787b      	ldrb	r3, [r7, #1]
 80061fe:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 8006200:	6a3b      	ldr	r3, [r7, #32]
 8006202:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	689c      	ldr	r4, [r3, #8]
 8006208:	f107 0308 	add.w	r3, r7, #8
 800620c:	2201      	movs	r2, #1
 800620e:	210f      	movs	r1, #15
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	47a0      	blx	r4
 8006214:	4603      	mov	r3, r0
}
 8006216:	4618      	mov	r0, r3
 8006218:	3714      	adds	r7, #20
 800621a:	46bd      	mov	sp, r7
 800621c:	bd90      	pop	{r4, r7, pc}

0800621e <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 800621e:	b590      	push	{r4, r7, lr}
 8006220:	b083      	sub	sp, #12
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	689c      	ldr	r4, [r3, #8]
 800622a:	2300      	movs	r3, #0
 800622c:	2200      	movs	r2, #0
 800622e:	2109      	movs	r1, #9
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	47a0      	blx	r4
}
 8006234:	bf00      	nop
 8006236:	370c      	adds	r7, #12
 8006238:	46bd      	mov	sp, r7
 800623a:	bd90      	pop	{r4, r7, pc}

0800623c <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 800623c:	b590      	push	{r4, r7, lr}
 800623e:	b083      	sub	sp, #12
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	689c      	ldr	r4, [r3, #8]
 8006248:	2300      	movs	r3, #0
 800624a:	2200      	movs	r2, #0
 800624c:	210a      	movs	r1, #10
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	47a0      	blx	r4
  /* u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, 0, NULL);  */ /* It would make sense to call flip mode 0 here after U8X8_MSG_DISPLAY_INIT */
}
 8006252:	bf00      	nop
 8006254:	370c      	adds	r7, #12
 8006256:	46bd      	mov	sp, r7
 8006258:	bd90      	pop	{r4, r7, pc}

0800625a <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 800625a:	b590      	push	{r4, r7, lr}
 800625c:	b083      	sub	sp, #12
 800625e:	af00      	add	r7, sp, #0
 8006260:	6078      	str	r0, [r7, #4]
 8006262:	460b      	mov	r3, r1
 8006264:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	689c      	ldr	r4, [r3, #8]
 800626a:	78fa      	ldrb	r2, [r7, #3]
 800626c:	2300      	movs	r3, #0
 800626e:	210b      	movs	r1, #11
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	47a0      	blx	r4
}
 8006274:	bf00      	nop
 8006276:	370c      	adds	r7, #12
 8006278:	46bd      	mov	sp, r7
 800627a:	bd90      	pop	{r4, r7, pc}

0800627c <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 800627c:	b590      	push	{r4, r7, lr}
 800627e:	b083      	sub	sp, #12
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	689c      	ldr	r4, [r3, #8]
 8006288:	2300      	movs	r3, #0
 800628a:	2200      	movs	r2, #0
 800628c:	2110      	movs	r1, #16
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	47a0      	blx	r4
}
 8006292:	bf00      	nop
 8006294:	370c      	adds	r7, #12
 8006296:	46bd      	mov	sp, r7
 8006298:	bd90      	pop	{r4, r7, pc}

0800629a <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 800629a:	b590      	push	{r4, r7, lr}
 800629c:	b083      	sub	sp, #12
 800629e:	af00      	add	r7, sp, #0
 80062a0:	6078      	str	r0, [r7, #4]
 80062a2:	460b      	mov	r3, r1
 80062a4:	70fb      	strb	r3, [r7, #3]
 80062a6:	4613      	mov	r3, r2
 80062a8:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	695c      	ldr	r4, [r3, #20]
 80062ae:	78ba      	ldrb	r2, [r7, #2]
 80062b0:	78f9      	ldrb	r1, [r7, #3]
 80062b2:	2300      	movs	r3, #0
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	47a0      	blx	r4
}
 80062b8:	bf00      	nop
 80062ba:	370c      	adds	r7, #12
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd90      	pop	{r4, r7, pc}

080062c0 <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b085      	sub	sp, #20
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	60f8      	str	r0, [r7, #12]
 80062c8:	607b      	str	r3, [r7, #4]
 80062ca:	460b      	mov	r3, r1
 80062cc:	72fb      	strb	r3, [r7, #11]
 80062ce:	4613      	mov	r3, r2
 80062d0:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 80062d2:	2300      	movs	r3, #0
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3714      	adds	r7, #20
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr

080062e0 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b083      	sub	sp, #12
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2200      	movs	r2, #0
 80062ec:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4a11      	ldr	r2, [pc, #68]	; (8006338 <u8x8_SetupDefaults+0x58>)
 80062f2:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	4a10      	ldr	r2, [pc, #64]	; (8006338 <u8x8_SetupDefaults+0x58>)
 80062f8:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	4a0e      	ldr	r2, [pc, #56]	; (8006338 <u8x8_SetupDefaults+0x58>)
 80062fe:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	4a0d      	ldr	r2, [pc, #52]	; (8006338 <u8x8_SetupDefaults+0x58>)
 8006304:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2200      	movs	r2, #0
 800630a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2200      	movs	r2, #0
 8006312:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2200      	movs	r2, #0
 800631a:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	22ff      	movs	r2, #255	; 0xff
 8006320:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	22ff      	movs	r2, #255	; 0xff
 8006328:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 800632c:	bf00      	nop
 800632e:	370c      	adds	r7, #12
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr
 8006338:	080062c1 	.word	0x080062c1

0800633c <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b084      	sub	sp, #16
 8006340:	af00      	add	r7, sp, #0
 8006342:	60f8      	str	r0, [r7, #12]
 8006344:	60b9      	str	r1, [r7, #8]
 8006346:	607a      	str	r2, [r7, #4]
 8006348:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 800634a:	68f8      	ldr	r0, [r7, #12]
 800634c:	f7ff ffc8 	bl	80062e0 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	68ba      	ldr	r2, [r7, #8]
 8006354:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	687a      	ldr	r2, [r7, #4]
 800635a:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	683a      	ldr	r2, [r7, #0]
 8006360:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	69ba      	ldr	r2, [r7, #24]
 8006366:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8006368:	68f8      	ldr	r0, [r7, #12]
 800636a:	f7ff ff58 	bl	800621e <u8x8_SetupMemory>
}
 800636e:	bf00      	nop
 8006370:	3710      	adds	r7, #16
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}

08006376 <memset>:
 8006376:	4402      	add	r2, r0
 8006378:	4603      	mov	r3, r0
 800637a:	4293      	cmp	r3, r2
 800637c:	d100      	bne.n	8006380 <memset+0xa>
 800637e:	4770      	bx	lr
 8006380:	f803 1b01 	strb.w	r1, [r3], #1
 8006384:	e7f9      	b.n	800637a <memset+0x4>

08006386 <strncpy>:
 8006386:	b510      	push	{r4, lr}
 8006388:	3901      	subs	r1, #1
 800638a:	4603      	mov	r3, r0
 800638c:	b132      	cbz	r2, 800639c <strncpy+0x16>
 800638e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006392:	f803 4b01 	strb.w	r4, [r3], #1
 8006396:	3a01      	subs	r2, #1
 8006398:	2c00      	cmp	r4, #0
 800639a:	d1f7      	bne.n	800638c <strncpy+0x6>
 800639c:	441a      	add	r2, r3
 800639e:	2100      	movs	r1, #0
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d100      	bne.n	80063a6 <strncpy+0x20>
 80063a4:	bd10      	pop	{r4, pc}
 80063a6:	f803 1b01 	strb.w	r1, [r3], #1
 80063aa:	e7f9      	b.n	80063a0 <strncpy+0x1a>

080063ac <__libc_init_array>:
 80063ac:	b570      	push	{r4, r5, r6, lr}
 80063ae:	4d0d      	ldr	r5, [pc, #52]	; (80063e4 <__libc_init_array+0x38>)
 80063b0:	4c0d      	ldr	r4, [pc, #52]	; (80063e8 <__libc_init_array+0x3c>)
 80063b2:	1b64      	subs	r4, r4, r5
 80063b4:	10a4      	asrs	r4, r4, #2
 80063b6:	2600      	movs	r6, #0
 80063b8:	42a6      	cmp	r6, r4
 80063ba:	d109      	bne.n	80063d0 <__libc_init_array+0x24>
 80063bc:	4d0b      	ldr	r5, [pc, #44]	; (80063ec <__libc_init_array+0x40>)
 80063be:	4c0c      	ldr	r4, [pc, #48]	; (80063f0 <__libc_init_array+0x44>)
 80063c0:	f000 f818 	bl	80063f4 <_init>
 80063c4:	1b64      	subs	r4, r4, r5
 80063c6:	10a4      	asrs	r4, r4, #2
 80063c8:	2600      	movs	r6, #0
 80063ca:	42a6      	cmp	r6, r4
 80063cc:	d105      	bne.n	80063da <__libc_init_array+0x2e>
 80063ce:	bd70      	pop	{r4, r5, r6, pc}
 80063d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80063d4:	4798      	blx	r3
 80063d6:	3601      	adds	r6, #1
 80063d8:	e7ee      	b.n	80063b8 <__libc_init_array+0xc>
 80063da:	f855 3b04 	ldr.w	r3, [r5], #4
 80063de:	4798      	blx	r3
 80063e0:	3601      	adds	r6, #1
 80063e2:	e7f2      	b.n	80063ca <__libc_init_array+0x1e>
 80063e4:	08010670 	.word	0x08010670
 80063e8:	08010670 	.word	0x08010670
 80063ec:	08010670 	.word	0x08010670
 80063f0:	08010674 	.word	0x08010674

080063f4 <_init>:
 80063f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063f6:	bf00      	nop
 80063f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063fa:	bc08      	pop	{r3}
 80063fc:	469e      	mov	lr, r3
 80063fe:	4770      	bx	lr

08006400 <_fini>:
 8006400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006402:	bf00      	nop
 8006404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006406:	bc08      	pop	{r3}
 8006408:	469e      	mov	lr, r3
 800640a:	4770      	bx	lr
